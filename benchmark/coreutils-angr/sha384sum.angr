0xa660:	sub	rsp, 8
0xa664:	add	rsp, 8
0xa668:	ret	


0xa650:	mov	rdx, qword ptr [rip + 0x2039b1]
0xa657:	xor	esi, esi
0xa659:	jmp	0x1870


0xa640:	ret	


0xa5d0:	push	r15
0xa5d2:	push	r14
0xa5d4:	mov	r15, rdx
0xa5d7:	push	r13
0xa5d9:	push	r12
0xa5db:	lea	r12, [rip + 0x20342e]
0xa5e2:	push	rbp
0xa5e3:	lea	rbp, [rip + 0x20342e]
0xa5ea:	push	rbx
0xa5eb:	mov	r13d, edi
0xa5ee:	mov	r14, rsi
0xa5f1:	sub	rbp, r12
0xa5f4:	sub	rsp, 8
0xa5f8:	sar	rbp, 3
0xa5fc:	call	0x1580


0xa590:	sub	rsp, 8
0xa594:	mov	edi, 0xe
0xa599:	call	0x17b0


0xa530:	sub	rsp, 8
0xa534:	xor	esi, esi
0xa536:	call	0x1800


0xa4b0:	push	r12
0xa4b2:	push	rbp
0xa4b3:	mov	rbp, rdi
0xa4b6:	push	rbx
0xa4b7:	call	0x1600


0xa420:	push	r13
0xa422:	push	r12
0xa424:	mov	r13, rsi
0xa427:	push	rbp
0xa428:	push	rbx
0xa429:	mov	rbx, rdi
0xa42c:	mov	r12, rdx
0xa42f:	sub	rsp, 0x18
0xa433:	mov	rax, qword ptr fs:[0x28]
0xa43c:	mov	qword ptr [rsp + 8], rax
0xa441:	xor	eax, eax
0xa443:	lea	rax, [rsp + 4]
0xa448:	test	rdi, rdi
0xa44b:	cmove	rbx, rax
0xa44f:	mov	rdi, rbx
0xa452:	call	0x16b0


0xa3c0:	mov	rax, qword ptr [rdi + 8]
0xa3c4:	cmp	qword ptr [rdi + 0x10], rax
0xa3c8:	je	0xa3d0


0xa380:	test	rdi, rdi
0xa383:	push	rbx
0xa384:	mov	rbx, rdi
0xa387:	je	0xa39a


0xa100:	push	r12
0xa102:	push	rbp
0xa103:	mov	ebp, edi
0xa105:	push	rbx
0xa106:	sub	rsp, 0x50
0xa10a:	mov	rax, qword ptr fs:[0x28]
0xa113:	mov	qword ptr [rsp + 0x18], rax
0xa118:	xor	eax, eax
0xa11a:	lea	rax, [rsp + 0x70]
0xa11f:	test	esi, esi
0xa121:	mov	qword ptr [rsp + 0x30], rdx
0xa126:	mov	qword ptr [rsp + 0x38], rcx
0xa12b:	mov	qword ptr [rsp + 0x40], r8
0xa130:	mov	qword ptr [rsp + 8], rax
0xa135:	lea	rax, [rsp + 0x20]
0xa13a:	mov	qword ptr [rsp + 0x48], r9
0xa13f:	mov	dword ptr [rsp], 0x10
0xa146:	mov	qword ptr [rsp + 0x10], rax
0xa14b:	je	0xa352


0xa080:	push	r12
0xa082:	push	rbp
0xa083:	push	rbx
0xa084:	mov	rbx, rdi
0xa087:	call	0x1780


0xa040:	lea	rsi, [rip + 0x1b28]
0xa047:	sub	rsp, 8
0xa04b:	mov	edx, 5
0xa050:	xor	edi, edi
0xa052:	call	0x1660


0xa020:	push	rbx
0xa021:	mov	rbx, rdi
0xa024:	call	0x1680


0x9ff0:	push	rbp
0x9ff1:	push	rbx
0x9ff2:	mov	rbp, rdi
0x9ff5:	mov	rdi, rsi
0x9ff8:	mov	rbx, rsi
0x9ffb:	sub	rsp, 8
0x9fff:	call	0x9df0


0x9fc0:	mov	rax, rdi
0x9fc3:	sub	rsp, 8
0x9fc7:	mul	rsi
0x9fca:	seto	dl
0x9fcd:	test	rax, rax
0x9fd0:	js	0x9fe9


0x9fa0:	push	rbx
0x9fa1:	mov	rbx, rdi
0x9fa4:	call	0x9df0


0x9f50:	test	rdi, rdi
0x9f53:	mov	rax, qword ptr [rsi]
0x9f56:	je	0x9f80


0x9ec0:	test	rdi, rdi
0x9ec3:	mov	r9, rdx
0x9ec6:	mov	rcx, qword ptr [rsi]
0x9ec9:	je	0x9f00


0x9e90:	mov	rax, rsi
0x9e93:	mul	rdx
0x9e96:	mov	rsi, rax
0x9e99:	seto	al
0x9e9c:	test	rsi, rsi
0x9e9f:	js	0x9eab


0x9e50:	test	rsi, rsi
0x9e53:	push	rbx
0x9e54:	mov	rbx, rsi
0x9e57:	jne	0x9e5e


0x9e40:	jmp	0x9df0


0x9e10:	mov	rax, rdi
0x9e13:	mul	rsi
0x9e16:	mov	rdi, rax
0x9e19:	seto	al
0x9e1c:	test	rdi, rdi
0x9e1f:	js	0x9e2b


0x9df0:	push	rbx
0x9df1:	mov	rbx, rdi
0x9df4:	call	0x1790


0x9d70:	push	rbx
0x9d71:	lea	rsi, [rip + 0x1aea]
0x9d78:	mov	edx, 5
0x9d7d:	xor	edi, edi
0x9d7f:	call	0x1660


0x9c90:	push	rbp
0x9c91:	push	rbx
0x9c92:	mov	r10d, 0x20
0x9c98:	xor	r11d, r11d
0x9c9b:	sub	rsp, 0xb8
0x9ca2:	mov	rax, qword ptr fs:[0x28]
0x9cab:	mov	qword ptr [rsp + 0x78], rax
0x9cb0:	xor	eax, eax
0x9cb2:	lea	rax, [rsp + 0xd0]
0x9cba:	mov	qword ptr [rsp + 0xa0], r8
0x9cc2:	lea	rbx, [rsp + 0xd0]
0x9cca:	lea	r8, [rsp + 0x20]
0x9ccf:	mov	qword ptr [rsp + 0xa8], r9
0x9cd7:	mov	dword ptr [rsp + 8], 0x20
0x9cdf:	mov	qword ptr [rsp + 0x10], rax
0x9ce4:	lea	rax, [rsp + 0x80]
0x9cec:	xor	r9d, r9d
0x9cef:	mov	qword ptr [rsp + 0x18], rax
0x9cf4:	mov	rbp, rax
0x9cf7:	nop	word ptr [rax + rax]
0x9d00:	cmp	r10d, 0x2f
0x9d04:	ja	0x9d5c


0x9c10:	sub	rsp, 0x68
0x9c14:	mov	r10, r8
0x9c17:	xor	r9d, r9d
0x9c1a:	mov	rax, qword ptr fs:[0x28]
0x9c23:	mov	qword ptr [rsp + 0x58], rax
0x9c28:	xor	eax, eax
0x9c2a:	mov	r8, rsp
0x9c2d:	nop	dword ptr [rax]
0x9c30:	mov	eax, dword ptr [r10]
0x9c33:	cmp	eax, 0x2f
0x9c36:	ja	0x9c7a


0x9bf0:	xor	r9d, r9d
0x9bf3:	cmp	qword ptr [r8], 0
0x9bf7:	je	0x9c0b


0x97d0:	push	r15
0x97d2:	push	r14
0x97d4:	push	r13
0x97d6:	push	r12
0x97d8:	mov	r12, r9
0x97db:	push	rbp
0x97dc:	push	rbx
0x97dd:	mov	rbp, rdi
0x97e0:	mov	rbx, r8
0x97e3:	sub	rsp, 0x28
0x97e7:	test	rsi, rsi
0x97ea:	je	0x9908


0x97c0:	mov	edx, 3
0x97c5:	xor	esi, esi
0x97c7:	xor	eax, eax
0x97c9:	jmp	0xa100


0x97a0:	lea	rcx, [rip + 0x204899]
0x97a7:	mov	rsi, rdi
0x97aa:	mov	rdx, -1
0x97b1:	xor	edi, edi
0x97b3:	jmp	0x8e60


0x9780:	lea	rcx, [rip + 0x2048b9]
0x9787:	mov	rdx, -1
0x978e:	jmp	0x8e60


0x9760:	lea	rcx, [rip + 0x2048d9]
0x9767:	mov	rdx, rsi
0x976a:	mov	rsi, rdi
0x976d:	xor	edi, edi
0x976f:	jmp	0x8e60


0x9750:	lea	rcx, [rip + 0x2048e9]
0x9757:	jmp	0x8e60


0x9730:	mov	r8, rcx
0x9733:	mov	rcx, rdx
0x9736:	mov	rdx, rsi
0x9739:	mov	rsi, rdi
0x973c:	xor	edi, edi
0x973e:	jmp	0x9660


0x9710:	mov	rcx, rdx
0x9713:	mov	r8, -1
0x971a:	mov	rdx, rsi
0x971d:	mov	rsi, rdi
0x9720:	xor	edi, edi
0x9722:	jmp	0x9660


0x9700:	mov	r8, -1
0x9707:	jmp	0x9660


0x9660:	sub	rsp, 0x48
0x9664:	mov	r9, rcx
0x9667:	mov	rcx, qword ptr [rip + 0x204c02]
0x966e:	movdqa	xmm0, xmmword ptr [rip + 0x204bca]
0x9676:	mov	rax, qword ptr fs:[0x28]
0x967f:	mov	qword ptr [rsp + 0x38], rax
0x9684:	xor	eax, eax
0x9686:	movaps	xmmword ptr [rsp], xmm0
0x968a:	test	rsi, rsi
0x968d:	mov	qword ptr [rsp + 0x30], rcx
0x9692:	mov	dword ptr [rsp], 0xa
0x9699:	movdqa	xmm0, xmmword ptr [rip + 0x204baf]
0x96a1:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x96a6:	movdqa	xmm0, xmmword ptr [rip + 0x204bb2]
0x96ae:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x96b3:	je	0x96e7


0x95d0:	sub	rsp, 0x48
0x95d4:	mov	rax, rdx
0x95d7:	mov	rdx, qword ptr fs:[0x28]
0x95e0:	mov	qword ptr [rsp + 0x38], rdx
0x95e5:	xor	edx, edx
0x95e7:	cmp	esi, 0xa
0x95ea:	je	0x9654


0x95c0:	mov	edx, 0x3a
0x95c5:	jmp	0x94f0


0x95a0:	mov	edx, 0x3a
0x95a5:	mov	rsi, -1
0x95ac:	jmp	0x94f0


0x9590:	movsx	edx, sil
0x9594:	mov	rsi, -1
0x959b:	jmp	0x94f0


0x94f0:	sub	rsp, 0x48
0x94f4:	mov	ecx, edx
0x94f6:	mov	rax, qword ptr fs:[0x28]
0x94ff:	mov	qword ptr [rsp + 0x38], rax
0x9504:	xor	eax, eax
0x9506:	mov	rax, qword ptr [rip + 0x204d63]
0x950d:	mov	r8, rsp
0x9510:	and	ecx, 0x1f
0x9513:	movdqa	xmm0, xmmword ptr [rip + 0x204d25]
0x951b:	mov	qword ptr [rsp + 0x30], rax
0x9520:	mov	eax, edx
0x9522:	movaps	xmmword ptr [rsp], xmm0
0x9526:	shr	al, 5
0x9529:	movzx	eax, al
0x952c:	lea	r9, [r8 + rax*4 + 8]
0x9531:	movdqa	xmm0, xmmword ptr [rip + 0x204d17]
0x9539:	movaps	xmmword ptr [rsp + 0x10], xmm0
0x953e:	movdqa	xmm0, xmmword ptr [rip + 0x204d1a]
0x9546:	movaps	xmmword ptr [rsp + 0x20], xmm0
0x954b:	mov	edx, dword ptr [r9]
0x954e:	mov	eax, edx
0x9550:	shr	eax, cl
0x9552:	not	eax
0x9554:	and	eax, 1
0x9557:	shl	eax, cl
0x9559:	mov	rcx, r8
0x955c:	xor	eax, edx
0x955e:	mov	rdx, rsi
0x9561:	mov	rsi, rdi
0x9564:	mov	dword ptr [r9], eax
0x9567:	xor	edi, edi
0x9569:	call	0x8e60


0x94e0:	mov	rcx, rdx
0x94e3:	mov	rdx, rsi
0x94e6:	mov	esi, edi
0x94e8:	xor	edi, edi
0x94ea:	jmp	0x9440


0x94d0:	mov	rdx, rsi
0x94d3:	mov	esi, edi
0x94d5:	xor	edi, edi
0x94d7:	jmp	0x93b0


0x9440:	sub	rsp, 0x48
0x9444:	mov	rax, rdx
0x9447:	mov	rdx, rcx
0x944a:	mov	rcx, qword ptr fs:[0x28]
0x9453:	mov	qword ptr [rsp + 0x38], rcx
0x9458:	xor	ecx, ecx
0x945a:	cmp	esi, 0xa
0x945d:	je	0x94c0


0x93b0:	sub	rsp, 0x48
0x93b4:	mov	rax, rdx
0x93b7:	mov	rdx, qword ptr fs:[0x28]
0x93c0:	mov	qword ptr [rsp + 0x38], rdx
0x93c5:	xor	edx, edx
0x93c7:	cmp	esi, 0xa
0x93ca:	je	0x9434


0x9390:	lea	rcx, [rip + 0x204ea9]
0x9397:	mov	rdx, rsi
0x939a:	mov	rsi, rdi
0x939d:	xor	edi, edi
0x939f:	jmp	0x8e60


0x9370:	lea	rcx, [rip + 0x204ec9]
0x9377:	mov	rsi, rdi
0x937a:	mov	rdx, -1
0x9381:	xor	edi, edi
0x9383:	jmp	0x8e60


0x9360:	lea	rcx, [rip + 0x204ed9]
0x9367:	jmp	0x8e60


0x9340:	lea	rcx, [rip + 0x204ef9]
0x9347:	mov	rdx, -1
0x934e:	jmp	0x8e60


0x92a0:	mov	eax, dword ptr [rip + 0x204dd2]
0x92a6:	push	r12
0x92a8:	mov	r12, qword ptr [rip + 0x204dd1]
0x92af:	push	rbp
0x92b0:	push	rbx
0x92b1:	cmp	eax, 1
0x92b4:	jle	0x92e1


0x9290:	mov	rcx, rdx
0x9293:	xor	edx, edx
0x9295:	jmp	0x91a0


0x91a0:	push	r15
0x91a2:	push	r14
0x91a4:	lea	rax, [rip + 0x205095]
0x91ab:	push	r13
0x91ad:	push	r12
0x91af:	mov	r12, rdx
0x91b2:	push	rbp
0x91b3:	push	rbx
0x91b4:	mov	rbx, rcx
0x91b7:	mov	r14, rdi
0x91ba:	mov	r15, rsi
0x91bd:	sub	rsp, 0x38
0x91c1:	test	rcx, rcx
0x91c4:	cmove	rbx, rax
0x91c8:	xor	ebp, ebp
0x91ca:	call	0x15d0


0x9120:	push	r15
0x9122:	push	r14
0x9124:	lea	rax, [rip + 0x205115]
0x912b:	push	r13
0x912d:	push	r12
0x912f:	mov	r13, rdi
0x9132:	push	rbp
0x9133:	push	rbx
0x9134:	mov	rbx, r8
0x9137:	mov	r14, rsi
0x913a:	mov	r15, rdx
0x913d:	sub	rsp, 0x18
0x9141:	test	r8, r8
0x9144:	cmove	rbx, rax
0x9148:	mov	qword ptr [rsp + 8], rcx
0x914d:	call	0x15d0


0x90f0:	lea	rax, [rip + 0x205149]
0x90f7:	test	rdi, rdi
0x90fa:	cmove	rdi, rax
0x90fe:	test	rsi, rsi
0x9101:	mov	dword ptr [rdi], 0xa
0x9107:	je	0x9117


0x90d0:	lea	rax, [rip + 0x205169]
0x90d7:	test	rdi, rdi
0x90da:	cmove	rdi, rax
0x90de:	mov	eax, dword ptr [rdi + 4]
0x90e1:	mov	dword ptr [rdi + 4], esi
0x90e4:	ret	


0x9090:	lea	rax, [rip + 0x2051a9]
0x9097:	test	rdi, rdi
0x909a:	mov	ecx, esi
0x909c:	cmove	rdi, rax
0x90a0:	mov	eax, esi
0x90a2:	and	ecx, 0x1f
0x90a5:	shr	al, 5
0x90a8:	movzx	eax, al
0x90ab:	lea	rdi, [rdi + rax*4 + 8]
0x90b0:	mov	esi, dword ptr [rdi]
0x90b2:	mov	eax, esi
0x90b4:	shr	eax, cl
0x90b6:	xor	edx, eax
0x90b8:	and	eax, 1
0x90bb:	and	edx, 1
0x90be:	shl	edx, cl
0x90c0:	xor	edx, esi
0x90c2:	mov	dword ptr [rdi], edx
0x90c4:	ret	


0x9070:	lea	rax, [rip + 0x2051c9]
0x9077:	test	rdi, rdi
0x907a:	cmove	rdi, rax
0x907e:	mov	dword ptr [rdi], esi
0x9080:	ret	


0x9050:	lea	rax, [rip + 0x2051e9]
0x9057:	test	rdi, rdi
0x905a:	cmove	rdi, rax
0x905e:	mov	eax, dword ptr [rdi]
0x9060:	ret	


0x9010:	push	r12
0x9012:	push	rbp
0x9013:	push	rbx
0x9014:	mov	rbx, rdi
0x9017:	call	0x15d0


0x8e60:	push	r15
0x8e62:	push	r14
0x8e64:	movsxd	r15, edi
0x8e67:	push	r13
0x8e69:	push	r12
0x8e6b:	mov	r14, rdx
0x8e6e:	push	rbp
0x8e6f:	push	rbx
0x8e70:	mov	rbp, rcx
0x8e73:	sub	rsp, 0x28
0x8e77:	mov	qword ptr [rsp + 8], rsi
0x8e7c:	call	0x15d0


0x7c20:	push	r15
0x7c22:	push	r14
0x7c24:	mov	r15d, r8d
0x7c27:	push	r13
0x7c29:	push	r12
0x7c2b:	mov	r14, rdi
0x7c2e:	push	rbp
0x7c2f:	push	rbx
0x7c30:	mov	ebx, r9d
0x7c33:	mov	r13, rsi
0x7c36:	mov	rbp, rcx
0x7c39:	and	ebx, 2
0x7c3c:	sub	rsp, 0xb8
0x7c43:	mov	rax, qword ptr [rsp + 0xf0]
0x7c4b:	mov	qword ptr [rsp + 0x10], rdx
0x7c50:	mov	dword ptr [rsp + 8], r8d
0x7c55:	mov	dword ptr [rsp + 0x78], r9d
0x7c5a:	mov	qword ptr [rsp + 0x20], rax
0x7c5f:	mov	rax, qword ptr [rsp + 0xf8]
0x7c67:	mov	qword ptr [rsp + 0x68], rax
0x7c6c:	mov	rax, qword ptr [rsp + 0x100]
0x7c74:	mov	qword ptr [rsp + 0x60], rax
0x7c79:	mov	rax, qword ptr fs:[0x28]
0x7c82:	mov	qword ptr [rsp + 0xa8], rax
0x7c8a:	xor	eax, eax
0x7c8c:	call	0x1670


0x7b30:	push	rbp
0x7b31:	push	rbx
0x7b32:	mov	rbp, rdi
0x7b35:	mov	ebx, esi
0x7b37:	sub	rsp, 8
0x7b3b:	call	0xa590


0x7a90:	test	rdi, rdi
0x7a93:	push	rbx
0x7a94:	je	0x7b0d


0x79f0:	push	r12
0x79f2:	push	rbp
0x79f3:	mov	rbp, rsi
0x79f6:	push	rbx
0x79f7:	call	0x1850


0x79c0:	test	rdi, rdi
0x79c3:	je	0x79e0


0x79b0:	jmp	0x1720


0x7990:	lea	rcx, [rip - 0x667]
0x7997:	lea	rdx, [rip - 0x453e]
0x799e:	jmp	0x7850


0x7970:	lea	rcx, [rip - 0x677]
0x7977:	lea	rdx, [rip - 0x45ae]
0x797e:	jmp	0x7850


0x7850:	push	r15
0x7852:	push	r14
0x7854:	mov	r14, rcx
0x7857:	push	r13
0x7859:	push	r12
0x785b:	mov	r12, rdx
0x785e:	push	rbp
0x785f:	push	rbx
0x7860:	mov	rbx, rdi
0x7863:	mov	edi, 0x8048
0x7868:	sub	rsp, 0x178
0x786f:	mov	rax, qword ptr fs:[0x28]
0x7878:	mov	qword ptr [rsp + 0x168], rax
0x7880:	xor	eax, eax
0x7882:	mov	qword ptr [rsp + 8], rsi
0x7887:	call	0x1790


0x7750:	push	rbp
0x7751:	push	rbx
0x7752:	mov	rbp, rdx
0x7755:	sub	rsp, 0x168
0x775c:	mov	rax, qword ptr fs:[0x28]
0x7765:	mov	qword ptr [rsp + 0x158], rax
0x776d:	xor	eax, eax
0x776f:	movabs	rax, 0xcbbb9d5dc1059ed8
0x7779:	mov	rbx, rsp
0x777c:	mov	qword ptr [rsp + 0x48], 0
0x7785:	mov	qword ptr [rsp], rax
0x7789:	movabs	rax, 0x629a292a367cd507
0x7793:	mov	rdx, rbx
0x7796:	mov	qword ptr [rsp + 8], rax
0x779b:	movabs	rax, 0x9159015a3070dd17
0x77a5:	mov	qword ptr [rsp + 0x40], 0
0x77ae:	mov	qword ptr [rsp + 0x10], rax
0x77b3:	movabs	rax, 0x152fecd8f70e5939
0x77bd:	mov	qword ptr [rsp + 0x50], 0
0x77c6:	mov	qword ptr [rsp + 0x18], rax
0x77cb:	movabs	rax, 0x67332667ffc00b31
0x77d5:	mov	qword ptr [rsp + 0x20], rax
0x77da:	movabs	rax, 0x8eb44a8768581511
0x77e4:	mov	qword ptr [rsp + 0x28], rax
0x77e9:	movabs	rax, 0xdb0c2e0d64f98fa7
0x77f3:	mov	qword ptr [rsp + 0x30], rax
0x77f8:	movabs	rax, 0x47b5481dbefa4fa4
0x7802:	mov	qword ptr [rsp + 0x38], rax
0x7807:	call	0x7360


0x7650:	push	rbp
0x7651:	push	rbx
0x7652:	mov	rbp, rdx
0x7655:	sub	rsp, 0x168
0x765c:	mov	rax, qword ptr fs:[0x28]
0x7665:	mov	qword ptr [rsp + 0x158], rax
0x766d:	xor	eax, eax
0x766f:	movabs	rax, 0x6a09e667f3bcc908
0x7679:	mov	rbx, rsp
0x767c:	mov	qword ptr [rsp + 0x48], 0
0x7685:	mov	qword ptr [rsp], rax
0x7689:	movabs	rax, 0xbb67ae8584caa73b
0x7693:	mov	rdx, rbx
0x7696:	mov	qword ptr [rsp + 8], rax
0x769b:	movabs	rax, 0x3c6ef372fe94f82b
0x76a5:	mov	qword ptr [rsp + 0x40], 0
0x76ae:	mov	qword ptr [rsp + 0x10], rax
0x76b3:	movabs	rax, 0xa54ff53a5f1d36f1
0x76bd:	mov	qword ptr [rsp + 0x50], 0
0x76c6:	mov	qword ptr [rsp + 0x18], rax
0x76cb:	movabs	rax, 0x510e527fade682d1
0x76d5:	mov	qword ptr [rsp + 0x20], rax
0x76da:	movabs	rax, 0x9b05688c2b3e6c1f
0x76e4:	mov	qword ptr [rsp + 0x28], rax
0x76e9:	movabs	rax, 0x1f83d9abfb41bd6b
0x76f3:	mov	qword ptr [rsp + 0x30], rax
0x76f8:	movabs	rax, 0x5be0cd19137e2179
0x7702:	mov	qword ptr [rsp + 0x38], rax
0x7707:	call	0x7360


0x7360:	push	r15
0x7362:	push	r14
0x7364:	push	r13
0x7366:	push	r12
0x7368:	mov	r13, rdx
0x736b:	push	rbp
0x736c:	push	rbx
0x736d:	mov	r12, rsi
0x7370:	mov	rbx, rdi
0x7373:	sub	rsp, 8
0x7377:	mov	rbp, qword ptr [rdx + 0x50]
0x737b:	test	rbp, rbp
0x737e:	jne	0x74b8


0x7330:	push	rbp
0x7331:	push	rbx
0x7332:	mov	rbp, rsi
0x7335:	mov	rbx, rdi
0x7338:	sub	rsp, 8
0x733c:	call	0x7250


0x7300:	push	rbp
0x7301:	push	rbx
0x7302:	mov	rbp, rsi
0x7305:	mov	rbx, rdi
0x7308:	sub	rsp, 8
0x730c:	call	0x7250


0x7250:	push	r12
0x7252:	push	rbp
0x7253:	push	rbx
0x7254:	mov	rdx, qword ptr [rdi + 0x50]
0x7258:	mov	rbx, rdi
0x725b:	mov	rax, qword ptr [rbx + 0x48]
0x725f:	cmp	rdx, 0x70
0x7263:	mov	rcx, rdx
0x7266:	sbb	rbp, rbp
0x7269:	and	rbp, 0xffffffffffffff80
0x726d:	add	rbp, 0x100
0x7274:	cmp	rdx, 0x70
0x7278:	sbb	rsi, rsi
0x727b:	and	rsi, 0xfffffffffffffff0
0x727f:	add	rsi, 0x1f
0x7283:	cmp	rdx, 0x70
0x7287:	sbb	rdi, rdi
0x728a:	xor	r8d, r8d
0x728d:	and	rdi, 0xfffffffffffffff0
0x7291:	add	rdi, 0x1e
0x7295:	add	rcx, qword ptr [rbx + 0x40]
0x7299:	setb	r8b
0x729d:	mov	qword ptr [rbx + 0x40], rcx
0x72a1:	test	r8, r8
0x72a4:	je	0x72ae


0x3530:	push	r15
0x3532:	push	r14
0x3534:	mov	r15, rdi
0x3537:	push	r13
0x3539:	push	r12
0x353b:	push	rbp
0x353c:	push	rbx
0x353d:	mov	rbx, rdx
0x3540:	sub	rsp, 0x188
0x3547:	mov	rbp, qword ptr [rdx + 8]
0x354b:	mov	r13, qword ptr [rdx + 0x10]
0x354f:	mov	rax, qword ptr fs:[0x28]
0x3558:	mov	qword ptr [rsp + 0x178], rax
0x3560:	xor	eax, eax
0x3562:	mov	rax, rsi
0x3565:	mov	r8, qword ptr [rdx + 0x18]
0x3569:	mov	r9, qword ptr [rdx + 0x20]
0x356d:	and	rax, 0xfffffffffffffff8
0x3571:	mov	r12, qword ptr [rdx + 0x28]
0x3575:	mov	r10, qword ptr [rdx + 0x38]
0x3579:	add	rax, rdi
0x357c:	add	rsi, qword ptr [rdx + 0x40]
0x3580:	mov	qword ptr [rsp + 0x88], rdi
0x3588:	mov	rcx, rax
0x358b:	mov	rdi, qword ptr [rdx + 0x30]
0x358f:	mov	qword ptr [rsp + 0xe0], rdx
0x3597:	mov	qword ptr [rsp + 0xd8], rax
0x359f:	mov	rax, qword ptr [rdx]
0x35a2:	setb	dl
0x35a5:	mov	qword ptr [rbx + 0x40], rsi
0x35a9:	movzx	edx, dl
0x35ac:	add	qword ptr [rbx + 0x48], rdx
0x35b0:	cmp	r15, rcx
0x35b3:	jae	0x7219


0x3510:	mov	rax, rsi
0x3513:	xor	edx, edx
0x3515:	nop	dword ptr [rax]
0x3518:	mov	rcx, qword ptr [rdi + rdx]
0x351c:	bswap	rcx
0x351f:	mov	qword ptr [rax + rdx], rcx
0x3523:	add	rdx, 8
0x3527:	cmp	rdx, 0x30
0x352b:	jne	0x3518


0x34f0:	mov	rax, rsi
0x34f3:	xor	edx, edx
0x34f5:	nop	dword ptr [rax]
0x34f8:	mov	rcx, qword ptr [rdi + rdx]
0x34fc:	bswap	rcx
0x34ff:	mov	qword ptr [rax + rdx], rcx
0x3503:	add	rdx, 8
0x3507:	cmp	rdx, 0x40
0x350b:	jne	0x34f8


0x3460:	movabs	rax, 0xcbbb9d5dc1059ed8
0x346a:	mov	qword ptr [rdi + 0x48], 0
0x3472:	mov	qword ptr [rdi + 0x40], 0
0x347a:	mov	qword ptr [rdi], rax
0x347d:	movabs	rax, 0x629a292a367cd507
0x3487:	mov	qword ptr [rdi + 0x50], 0
0x348f:	mov	qword ptr [rdi + 8], rax
0x3493:	movabs	rax, 0x9159015a3070dd17
0x349d:	mov	qword ptr [rdi + 0x10], rax
0x34a1:	movabs	rax, 0x152fecd8f70e5939
0x34ab:	mov	qword ptr [rdi + 0x18], rax
0x34af:	movabs	rax, 0x67332667ffc00b31
0x34b9:	mov	qword ptr [rdi + 0x20], rax
0x34bd:	movabs	rax, 0x8eb44a8768581511
0x34c7:	mov	qword ptr [rdi + 0x28], rax
0x34cb:	movabs	rax, 0xdb0c2e0d64f98fa7
0x34d5:	mov	qword ptr [rdi + 0x30], rax
0x34d9:	movabs	rax, 0x47b5481dbefa4fa4
0x34e3:	mov	qword ptr [rdi + 0x38], rax
0x34e7:	ret	


0x33d0:	movabs	rax, 0x6a09e667f3bcc908
0x33da:	mov	qword ptr [rdi + 0x48], 0
0x33e2:	mov	qword ptr [rdi + 0x40], 0
0x33ea:	mov	qword ptr [rdi], rax
0x33ed:	movabs	rax, 0xbb67ae8584caa73b
0x33f7:	mov	qword ptr [rdi + 0x50], 0
0x33ff:	mov	qword ptr [rdi + 8], rax
0x3403:	movabs	rax, 0x3c6ef372fe94f82b
0x340d:	mov	qword ptr [rdi + 0x10], rax
0x3411:	movabs	rax, 0xa54ff53a5f1d36f1
0x341b:	mov	qword ptr [rdi + 0x18], rax
0x341f:	movabs	rax, 0x510e527fade682d1
0x3429:	mov	qword ptr [rdi + 0x20], rax
0x342d:	movabs	rax, 0x9b05688c2b3e6c1f
0x3437:	mov	qword ptr [rdi + 0x28], rax
0x343b:	movabs	rax, 0x1f83d9abfb41bd6b
0x3445:	mov	qword ptr [rdi + 0x30], rax
0x3449:	movabs	rax, 0x5be0cd19137e2179
0x3453:	mov	qword ptr [rdi + 0x38], rax
0x3457:	ret	


0x3320:	push	rbp
0x3321:	push	rbx
0x3322:	sub	rsp, 8
0x3326:	mov	rdi, qword ptr [rip + 0x20ad7b]
0x332d:	call	0xa4b0


0x3310:	mov	byte ptr [rip + 0x20adf9], dil
0x3317:	ret	


0x3300:	mov	qword ptr [rip + 0x20ae11], rdi
0x3307:	ret	


0x2ea0:	push	r13
0x2ea2:	push	r12
0x2ea4:	mov	edx, 5
0x2ea9:	push	rbp
0x2eaa:	push	rbx
0x2eab:	mov	ebp, edi
0x2ead:	sub	rsp, 0x88
0x2eb4:	mov	rbx, qword ptr [rip + 0x20b265]
0x2ebb:	mov	rax, qword ptr fs:[0x28]
0x2ec4:	mov	qword ptr [rsp + 0x78], rax
0x2ec9:	xor	eax, eax
0x2ecb:	test	edi, edi
0x2ecd:	je	0x2efd


0x2d00:	push	r13
0x2d02:	push	r12
0x2d04:	mov	ecx, 2
0x2d09:	push	rbp
0x2d0a:	push	rbx
0x2d0b:	mov	rbp, rdi
0x2d0e:	lea	rdi, [rip + 0x860d]
0x2d15:	mov	r12, rsi
0x2d18:	mov	rsi, rbp
0x2d1b:	sub	rsp, 8
0x2d1f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2c30:	push	rbp
0x2c31:	push	rbx
0x2c32:	mov	rbx, rdi
0x2c35:	sub	rsp, 8
0x2c39:	test	sil, sil
0x2c3c:	je	0x2cd0


0x2bd0:	push	rbp
0x2bd1:	push	rbx
0x2bd2:	sub	rsp, 8
0x2bd6:	mov	rbp, qword ptr [rip + 0x20b51b]
0x2bdd:	test	rbp, rbp
0x2be0:	je	0x2c20


0x2b50:	xor	edx, edx
0x2b52:	test	rsi, rsi
0x2b55:	lea	rcx, [rdi + 1]
0x2b59:	lea	r8, [rsi - 1]
0x2b5d:	je	0x2bb7


0x2b40:	push	rbp
0x2b41:	mov	rbp, rsp
0x2b44:	pop	rbp
0x2b45:	jmp	0x2ab0


0x2b00:	cmp	byte ptr [rip + 0x20b5e1], 0
0x2b07:	jne	0x2b38


0x2ab0:	lea	rdi, [rip + 0x20b5e9]
0x2ab7:	lea	rsi, [rip + 0x20b5e2]
0x2abe:	push	rbp
0x2abf:	sub	rsi, rdi
0x2ac2:	mov	rbp, rsp
0x2ac5:	sar	rsi, 3
0x2ac9:	mov	rax, rsi
0x2acc:	shr	rax, 0x3f
0x2ad0:	add	rsi, rax
0x2ad3:	sar	rsi, 1
0x2ad6:	je	0x2af0


0x2a70:	lea	rdi, [rip + 0x20b629]
0x2a77:	push	rbp
0x2a78:	lea	rax, [rip + 0x20b621]
0x2a7f:	cmp	rax, rdi
0x2a82:	mov	rbp, rsp
0x2a85:	je	0x2aa0


0x2a40:	xor	ebp, ebp
0x2a42:	mov	r9, rdx
0x2a45:	pop	rsi
0x2a46:	mov	rdx, rsp
0x2a49:	and	rsp, 0xfffffffffffffff0
0x2a4d:	push	rax
0x2a4e:	push	rsp
0x2a4f:	lea	r8, [rip + 0x7bea]
0x2a56:	lea	rcx, [rip + 0x7b73]
0x2a5d:	lea	rdi, [rip - 0x1164]
0x2a64:	call	qword ptr [rip + 0x20b55e]


0x1900:	push	r15
0x1902:	push	r14
0x1904:	push	r13
0x1906:	push	r12
0x1908:	mov	r12d, edi
0x190b:	push	rbp
0x190c:	push	rbx
0x190d:	mov	rbx, rsi
0x1910:	mov	ebp, 0xffffffff
0x1915:	sub	rsp, 0x128
0x191c:	mov	rdi, qword ptr [rsi]
0x191f:	mov	rax, qword ptr fs:[0x28]
0x1928:	mov	qword ptr [rsp + 0x118], rax
0x1930:	xor	eax, eax
0x1932:	call	0x7a90


0x1580:	sub	rsp, 8
0x1584:	mov	rax, qword ptr [rip + 0x20ca45]
0x158b:	test	rax, rax
0x158e:	je	0x1592


0x1870:	jmp	qword ptr [rip + 0x20c70a]


0x17b0:	jmp	qword ptr [rip + 0x20c76a]


0x1800:	jmp	qword ptr [rip + 0x20c742]


0x1600:	jmp	qword ptr [rip + 0x20c842]


0x16b0:	jmp	qword ptr [rip + 0x20c7ea]


0xa3d0:	mov	rax, qword ptr [rdi + 0x20]
0xa3d4:	cmp	qword ptr [rdi + 0x28], rax
0xa3d8:	jne	0xa3ca


0xa3ca:	jmp	0x1840


0xa39a:	mov	rdi, rbx
0xa39d:	pop	rbx
0xa39e:	jmp	0x17a0


0xa389:	call	0x17c0


0xa352:	mov	rax, qword ptr [rsp + 0x10]
0xa357:	xor	esi, esi
0xa359:	mov	edx, dword ptr [rax + 0x10]
0xa35c:	xor	eax, eax
0xa35e:	call	0x1610


0xa151:	cmp	esi, 0x406
0xa157:	jne	0xa1a0


0x1780:	jmp	qword ptr [rip + 0x20c782]


0x1660:	jmp	qword ptr [rip + 0x20c812]


0x1680:	jmp	qword ptr [rip + 0x20c802]


0x9fe9:	call	0xa040


0x9fd2:	movzx	edx, dl
0x9fd5:	test	rdx, rdx
0x9fd8:	jne	0x9fe9


0x9f80:	test	rax, rax
0x9f83:	mov	edx, 0x80
0x9f88:	cmove	rax, rdx
0x9f8c:	test	rax, rax
0x9f8f:	jns	0x9f72


0x9f58:	movabs	rdx, 0x5555555555555553
0x9f62:	cmp	rax, rdx
0x9f65:	ja	0x9f91


0x9f00:	test	rcx, rcx
0x9f03:	je	0x9f28


0x9ecb:	xor	edx, edx
0x9ecd:	movabs	rax, 0x5555555555555554
0x9ed7:	div	r9
0x9eda:	cmp	rax, rcx
0x9edd:	jbe	0x9f1b


0x9eab:	sub	rsp, 8
0x9eaf:	call	0xa040


0x9ea1:	movzx	eax, al
0x9ea4:	test	rax, rax
0x9ea7:	jne	0x9eab


0x9e59:	test	rdi, rdi
0x9e5c:	jne	0x9e78


0x9e5e:	mov	rsi, rbx
0x9e61:	call	0x17e0


0x9e2b:	sub	rsp, 8
0x9e2f:	call	0xa040


0x9e21:	movzx	eax, al
0x9e24:	test	rax, rax
0x9e27:	jne	0x9e2b


0x1790:	jmp	qword ptr [rip + 0x20c77a]


0x9d06:	mov	eax, r10d
0x9d09:	mov	r11d, 1
0x9d0f:	add	r10d, 8
0x9d13:	add	rax, rbp
0x9d16:	mov	rax, qword ptr [rax]
0x9d19:	test	rax, rax
0x9d1c:	mov	qword ptr [r8 + r9*8], rax
0x9d20:	je	0x9d2c


0x9d5c:	mov	rax, rbx
0x9d5f:	add	rbx, 8
0x9d63:	jmp	0x9d16


0x9c38:	mov	r11d, eax
0x9c3b:	add	r11, qword ptr [r10 + 0x10]
0x9c3f:	add	eax, 8
0x9c42:	mov	dword ptr [r10], eax
0x9c45:	mov	rax, qword ptr [r11]
0x9c48:	test	rax, rax
0x9c4b:	mov	qword ptr [r8 + r9*8], rax
0x9c4f:	je	0x9c5b


0x9c7a:	mov	r11, qword ptr [r10 + 8]
0x9c7e:	lea	rax, [r11 + 8]
0x9c82:	mov	qword ptr [r10 + 8], rax
0x9c86:	jmp	0x9c45


0x9c0b:	jmp	0x97d0


0x9908:	mov	r8, rcx
0x990b:	mov	rcx, rdx
0x990e:	lea	rdx, [rip + 0x1eff]
0x9915:	mov	esi, 1
0x991a:	xor	eax, eax
0x991c:	call	0x18a0


0x97f0:	mov	r8, rdx
0x97f3:	lea	rdx, [rip + 0x200e]
0x97fa:	mov	r9, rcx
0x97fd:	xor	eax, eax
0x97ff:	mov	rcx, rsi
0x9802:	mov	esi, 1
0x9807:	call	0x18a0


0x96e7:	call	0x15c0


0x96b5:	test	rdx, rdx
0x96b8:	je	0x96e7


0x9654:	call	0x15c0


0x95ec:	mov	dword ptr [rsp], esi
0x95ef:	mov	rcx, rsp
0x95f2:	mov	rdx, -1
0x95f9:	mov	rsi, rax
0x95fc:	mov	qword ptr [rsp + 4], 0
0x9605:	mov	qword ptr [rsp + 0xc], 0x4000000
0x960e:	mov	qword ptr [rsp + 0x14], 0
0x9617:	mov	qword ptr [rsp + 0x1c], 0
0x9620:	mov	qword ptr [rsp + 0x24], 0
0x9629:	mov	qword ptr [rsp + 0x2c], 0
0x9632:	mov	dword ptr [rsp + 0x34], 0
0x963a:	call	0x8e60


0x94c0:	call	0x15c0


0x945f:	mov	dword ptr [rsp], esi
0x9462:	mov	rcx, rsp
0x9465:	mov	rsi, rax
0x9468:	mov	qword ptr [rsp + 4], 0
0x9471:	mov	qword ptr [rsp + 0xc], 0
0x947a:	mov	qword ptr [rsp + 0x14], 0
0x9483:	mov	qword ptr [rsp + 0x1c], 0
0x948c:	mov	qword ptr [rsp + 0x24], 0
0x9495:	mov	qword ptr [rsp + 0x2c], 0
0x949e:	mov	dword ptr [rsp + 0x34], 0
0x94a6:	call	0x8e60


0x9434:	call	0x15c0


0x93cc:	mov	dword ptr [rsp], esi
0x93cf:	mov	rcx, rsp
0x93d2:	mov	rdx, -1
0x93d9:	mov	rsi, rax
0x93dc:	mov	qword ptr [rsp + 4], 0
0x93e5:	mov	qword ptr [rsp + 0xc], 0
0x93ee:	mov	qword ptr [rsp + 0x14], 0
0x93f7:	mov	qword ptr [rsp + 0x1c], 0
0x9400:	mov	qword ptr [rsp + 0x24], 0
0x9409:	mov	qword ptr [rsp + 0x2c], 0
0x9412:	mov	dword ptr [rsp + 0x34], 0
0x941a:	call	0x8e60


0x92e1:	mov	rdi, qword ptr [r12 + 8]
0x92e6:	lea	rbx, [rip + 0x204e53]
0x92ed:	cmp	rdi, rbx
0x92f0:	je	0x9309


0x92b6:	sub	eax, 2
0x92b9:	lea	rbx, [r12 + 0x18]
0x92be:	shl	rax, 4
0x92c2:	lea	rbp, [r12 + rax + 0x28]
0x92c7:	nop	word ptr [rax + rax]
0x92d0:	mov	rdi, qword ptr [rbx]
0x92d3:	add	rbx, 0x10
0x92d7:	call	0x15b0


0x15d0:	jmp	qword ptr [rip + 0x20c85a]


0x9117:	sub	rsp, 8
0x911b:	call	0x15c0


0x9109:	test	rdx, rdx
0x910c:	je	0x9117


0x1670:	jmp	qword ptr [rip + 0x20c80a]


0x7b0d:	mov	rcx, qword ptr [rip + 0x2065cc]
0x7b14:	lea	rdi, [rip + 0x37c5]
0x7b1b:	mov	edx, 0x37
0x7b20:	mov	esi, 1
0x7b25:	call	0x1890


0x7a96:	mov	esi, 0x2f
0x7a9b:	mov	rbx, rdi
0x7a9e:	call	0x16e0


0x1850:	jmp	qword ptr [rip + 0x20c71a]


0x79e0:	ret	


0x79c5:	push	rbx
0x79c6:	mov	ebx, esi
0x79c8:	call	0x1780


0x1720:	jmp	qword ptr [rip + 0x20c7b2]


0x7384:	cmp	r12, 0x7f
0x7388:	jbe	0x749c


0x74b8:	mov	r14d, 0x100
0x74be:	lea	r15, [rdx + 0x58]
0x74c2:	sub	r14, rbp
0x74c5:	cmp	r14, rsi
0x74c8:	lea	rdi, [r15 + rbp]
0x74cc:	cmova	r14, rsi
0x74d0:	mov	rsi, rbx
0x74d3:	mov	rdx, r14
0x74d6:	call	0x1770


0x72ae:	mov	r8, rcx
0x72b1:	shl	rax, 3
0x72b5:	lea	r12, [rbx + 0x58]
0x72b9:	shr	r8, 0x3d
0x72bd:	shl	rcx, 3
0x72c1:	or	rax, r8
0x72c4:	bswap	rcx
0x72c7:	bswap	rax
0x72ca:	mov	qword ptr [rbx + rdi*8 + 0x58], rax
0x72cf:	mov	rax, rbp
0x72d2:	lea	rdi, [r12 + rdx]
0x72d6:	sub	rax, rdx
0x72d9:	mov	qword ptr [rbx + rsi*8 + 0x58], rcx
0x72de:	lea	rsi, [rip + 0x3f7b]
0x72e5:	lea	rdx, [rax - 0x10]
0x72e9:	call	0x1770


0x72a6:	add	rax, 1
0x72aa:	mov	qword ptr [rbx + 0x48], rax
0x72ae:	mov	r8, rcx
0x72b1:	shl	rax, 3
0x72b5:	lea	r12, [rbx + 0x58]
0x72b9:	shr	r8, 0x3d
0x72bd:	shl	rcx, 3
0x72c1:	or	rax, r8
0x72c4:	bswap	rcx
0x72c7:	bswap	rax
0x72ca:	mov	qword ptr [rbx + rdi*8 + 0x58], rax
0x72cf:	mov	rax, rbp
0x72d2:	lea	rdi, [r12 + rdx]
0x72d6:	sub	rax, rdx
0x72d9:	mov	qword ptr [rbx + rsi*8 + 0x58], rcx
0x72de:	lea	rsi, [rip + 0x3f7b]
0x72e5:	lea	rdx, [rax - 0x10]
0x72e9:	call	0x1770


0x35b9:	lea	rbx, [rsp + 0xf0]
0x35c1:	mov	qword ptr [rsp + 0xc0], r10
0x35c9:	mov	qword ptr [rsp + 0xb8], rdi
0x35d1:	mov	qword ptr [rsp + 0xb0], r12
0x35d9:	mov	qword ptr [rsp + 0xa8], r9
0x35e1:	mov	qword ptr [rsp + 0xa0], r8
0x35e9:	mov	qword ptr [rsp + 0x98], r13
0x35f1:	mov	qword ptr [rsp + 0x90], rbp
0x35f9:	mov	qword ptr [rsp + 0xd0], rax
0x3601:	mov	qword ptr [rsp + 0xe8], rbx
0x3609:	nop	dword ptr [rax]
0x3610:	mov	rsi, qword ptr [rsp + 0x88]
0x3618:	mov	r11, qword ptr [rsp + 0xe8]
0x3620:	xor	edx, edx
0x3622:	nop	word ptr [rax + rax]
0x3628:	mov	rcx, qword ptr [rsi + rdx]
0x362c:	bswap	rcx
0x362f:	mov	qword ptr [r11 + rdx], rcx
0x3633:	add	rdx, 8
0x3637:	cmp	rdx, 0x80
0x363e:	jne	0x3628


0x7219:	mov	rax, qword ptr [rsp + 0x178]
0x7221:	xor	rax, qword ptr fs:[0x28]
0x722a:	jne	0x723e


0x352d:	ret	


0x3518:	mov	rcx, qword ptr [rdi + rdx]
0x351c:	bswap	rcx
0x351f:	mov	qword ptr [rax + rdx], rcx
0x3523:	add	rdx, 8
0x3527:	cmp	rdx, 0x30
0x352b:	jne	0x3518


0x350d:	ret	


0x34f8:	mov	rcx, qword ptr [rdi + rdx]
0x34fc:	bswap	rcx
0x34ff:	mov	qword ptr [rax + rdx], rcx
0x3503:	add	rdx, 8
0x3507:	cmp	rdx, 0x40
0x350b:	jne	0x34f8


0x2efd:	lea	rsi, [rip + 0x797c]
0x2f04:	xor	edi, edi
0x2f06:	call	0x1660


0x2ecf:	lea	rsi, [rip + 0x7982]
0x2ed6:	xor	edi, edi
0x2ed8:	call	0x1660


0x2d1f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2d21:	mov	byte ptr [rdx], 0
0x2d24:	seta	al
0x2d27:	sbb	al, 0
0x2d29:	test	al, al
0x2d2b:	jne	0x2dc0


0x2cd0:	mov	rsi, qword ptr [rip + 0x20b3d1]
0x2cd7:	add	rsp, 8
0x2cdb:	pop	rbx
0x2cdc:	pop	rbp
0x2cdd:	jmp	0x1740


0x2c42:	movzx	esi, byte ptr [rdi]
0x2c45:	lea	rbp, [rip + 0x7a38]
0x2c4c:	test	sil, sil
0x2c4f:	jne	0x2c7a


0x2c20:	mov	rax, rdi
0x2c23:	cmp	byte ptr [rax], 0
0x2c26:	sete	al
0x2c29:	add	rsp, 8
0x2c2d:	pop	rbx
0x2c2e:	pop	rbp
0x2c2f:	ret	


0x2be2:	mov	rbx, rdi
0x2be5:	call	0x18e0


0x2bb7:	mov	rax, rdi
0x2bba:	ret	


0x2b5f:	movzx	eax, byte ptr [rdi + rdx]
0x2b63:	test	al, al
0x2b65:	je	0x2b90


0x2b09:	cmp	qword ptr [rip + 0x20b4cf], 0
0x2b11:	push	rbp
0x2b12:	mov	rbp, rsp
0x2b15:	je	0x2b23


0x2b38:	ret	


0x2af0:	pop	rbp
0x2af1:	ret	


0x2ad8:	mov	rax, qword ptr [rip + 0x20b4f9]
0x2adf:	test	rax, rax
0x2ae2:	je	0x2af0


0x2aa0:	pop	rbp
0x2aa1:	ret	


0x2a87:	mov	rax, qword ptr [rip + 0x20b532]
0x2a8e:	test	rax, rax
0x2a91:	je	0x2aa0




0x1592:	add	rsp, 8
0x1596:	ret	


0x1590:	call	rax












0xa3da:	cmp	qword ptr [rdi + 0x48], 0
0xa3df:	jne	0xa3ca


0x1840:	jmp	qword ptr [rip + 0x20c722]


0x17a0:	jmp	qword ptr [rip + 0x20c772]


0x17c0:	jmp	qword ptr [rip + 0x20c762]


0x1610:	jmp	qword ptr [rip + 0x20c83a]


0xa159:	mov	rax, qword ptr [rsp + 0x10]
0xa15e:	cmp	dword ptr [rip + 0x204113], 0
0xa165:	mov	dword ptr [rsp], 0x18
0xa16c:	mov	r12d, dword ptr [rax + 0x10]
0xa170:	mov	edx, r12d
0xa173:	js	0xa2a3


0xa1a0:	cmp	esi, 0xb
0xa1a3:	je	0xa1d0








0x9fda:	call	0x1750


0x9f91:	sub	rsp, 8
0x9f95:	call	0xa040


0x9f72:	mov	qword ptr [rsi], rax
0x9f75:	mov	rsi, rax
0x9f78:	jmp	0x9e50


0x9f67:	mov	rdx, rax
0x9f6a:	shr	rdx, 1
0x9f6d:	lea	rax, [rdx + rax + 1]
0x9f72:	mov	qword ptr [rsi], rax
0x9f75:	mov	rsi, rax
0x9f78:	jmp	0x9e50


0x9f28:	xor	edx, edx
0x9f2a:	mov	eax, 0x80
0x9f2f:	xor	r8d, r8d
0x9f32:	div	r9
0x9f35:	test	rax, rax
0x9f38:	sete	r8b
0x9f3c:	lea	rcx, [r8 + rax]
0x9f40:	jmp	0x9f05


0x9f05:	mov	rax, rcx
0x9f08:	mul	r9
0x9f0b:	seto	dl
0x9f0e:	test	rax, rax
0x9f11:	movzx	edx, dl
0x9f14:	js	0x9f1b


0x9f1b:	sub	rsp, 8
0x9f1f:	call	0xa040


0x9edf:	mov	rax, rcx
0x9ee2:	shr	rax, 1
0x9ee5:	lea	rcx, [rax + rcx + 1]
0x9eea:	mov	qword ptr [rsi], rcx
0x9eed:	imul	rcx, r9
0x9ef1:	mov	rsi, rcx
0x9ef4:	jmp	0x9e50


0x9ea9:	jmp	0x9e50


0x9e78:	call	0x15b0


0x17e0:	jmp	qword ptr [rip + 0x20c752]


0x9e29:	jmp	0x9df0




0x9d2c:	test	r11b, r11b
0x9d2f:	jne	0x9d55


0x9d22:	add	r9, 1
0x9d26:	cmp	r9, 0xa
0x9d2a:	jne	0x9d00


0x9d16:	mov	rax, qword ptr [rax]
0x9d19:	test	rax, rax
0x9d1c:	mov	qword ptr [r8 + r9*8], rax
0x9d20:	je	0x9d2c


0x9c5b:	call	0x97d0


0x9c51:	add	r9, 1
0x9c55:	cmp	r9, 0xa
0x9c59:	jne	0x9c30


0x9c45:	mov	rax, qword ptr [r11]
0x9c48:	test	rax, rax
0x9c4b:	mov	qword ptr [r8 + r9*8], rax
0x9c4f:	je	0x9c5b


0x9c00:	add	r9, 1
0x9c04:	cmp	qword ptr [r8 + r9*8], 0
0x9c09:	jne	0x9c00


0x18a0:	jmp	qword ptr [rip + 0x20c6f2]


0x15c0:	jmp	qword ptr [rip + 0x20c862]


0x96ba:	mov	qword ptr [rsp + 0x28], rsi
0x96bf:	mov	qword ptr [rsp + 0x30], rdx
0x96c4:	mov	rcx, rsp
0x96c7:	mov	rdx, r8
0x96ca:	mov	rsi, r9
0x96cd:	call	0x8e60


0x9309:	lea	rbx, [rip + 0x204d80]
0x9310:	cmp	r12, rbx
0x9313:	je	0x9324


0x92f2:	call	0x15b0


0x15b0:	jmp	qword ptr [rip + 0x20c86a]




0x910e:	mov	qword ptr [rdi + 0x28], rsi
0x9112:	mov	qword ptr [rdi + 0x30], rdx
0x9116:	ret	




0x1890:	jmp	qword ptr [rip + 0x20c6fa]


0x16e0:	jmp	qword ptr [rip + 0x20c7d2]






0x749c:	test	r12, r12
0x749f:	jne	0x7620


0x738e:	test	bl, 7
0x7391:	je	0x7480


0x1770:	jmp	qword ptr [rip + 0x20c78a]


0x3640:	mov	rdx, r9
0x3643:	mov	rcx, r9
0x3646:	mov	rsi, rax
0x3649:	ror	rcx, 0x12
0x364d:	ror	rdx, 0xe
0x3651:	rol	rsi, 0x1e
0x3655:	xor	rdx, rcx
0x3658:	mov	rcx, r9
0x365b:	mov	r15, qword ptr [rsp + 0xf8]
0x3663:	rol	rcx, 0x17
0x3667:	sub	qword ptr [rsp + 0x88], -0x80
0x3670:	xor	rcx, rdx
0x3673:	movabs	rdx, 0x428a2f98d728ae22
0x367d:	add	rdx, qword ptr [rsp + 0xf0]
0x3685:	add	r10, rdx
0x3688:	mov	rdx, r12
0x368b:	xor	rdx, rdi
0x368e:	add	r10, rcx
0x3691:	and	rdx, r9
0x3694:	xor	rdx, rdi
0x3697:	lea	rcx, [r10 + rdx]
0x369b:	mov	rdx, rax
0x369e:	mov	r10, rax
0x36a1:	ror	rdx, 0x1c
0x36a5:	and	r10, rbp
0x36a8:	xor	rsi, rdx
0x36ab:	mov	rdx, rax
0x36ae:	add	r8, rcx
0x36b1:	rol	rdx, 0x19
0x36b5:	mov	r11, r8
0x36b8:	xor	rsi, rdx
0x36bb:	mov	rdx, rax
0x36be:	ror	r11, 0x12
0x36c2:	or	rdx, rbp
0x36c5:	and	rdx, r13
0x36c8:	or	rdx, r10
0x36cb:	add	rdx, rsi
0x36ce:	movabs	rsi, 0x7137449123ef65cd
0x36d8:	add	rdx, rcx
0x36db:	mov	rcx, r9
0x36de:	add	rsi, r15
0x36e1:	xor	rcx, r12
0x36e4:	add	rsi, rdi
0x36e7:	mov	r10, rdx
0x36ea:	and	rcx, r8
0x36ed:	xor	rcx, r12
0x36f0:	add	rsi, rcx
0x36f3:	mov	rcx, r8
0x36f6:	ror	rcx, 0xe
0x36fa:	xor	r11, rcx
0x36fd:	mov	rcx, r8
0x3700:	and	r10, rax
0x3703:	rol	rcx, 0x17
0x3707:	xor	rcx, r11
0x370a:	mov	r11, rdx
0x370d:	add	rcx, rsi
0x3710:	mov	rsi, rdx
0x3713:	ror	r11, 0x1c
0x3717:	rol	rsi, 0x1e
0x371b:	lea	rdi, [rcx + r13]
0x371f:	xor	rsi, r11
0x3722:	mov	r11, rdx
0x3725:	rol	r11, 0x19
0x3729:	xor	rsi, r11
0x372c:	mov	r11, rdx
0x372f:	or	r11, rax
0x3732:	and	r11, rbp
0x3735:	or	r11, r10
0x3738:	mov	r10, r8
0x373b:	add	r11, rsi
0x373e:	xor	r10, r9
0x3741:	mov	rsi, rdi
0x3744:	add	r11, rcx
0x3747:	movabs	rcx, 0xb5c0fbcfec4d3b2f
0x3751:	add	rcx, qword ptr [rsp + 0x100]
0x3759:	and	r10, rdi
0x375c:	ror	rsi, 0x12
0x3760:	mov	r14, r11
0x3763:	xor	r10, r9
0x3766:	mov	rbx, rsi
0x3769:	rol	r14, 0x19
0x376d:	add	rcx, r12
0x3770:	add	rcx, r10
0x3773:	mov	r10, rdi
0x3776:	ror	r10, 0xe
0x377a:	xor	rbx, r10
0x377d:	mov	r10, rdi
0x3780:	rol	r10, 0x17
0x3784:	xor	r10, rbx
0x3787:	add	r10, rcx
0x378a:	mov	rcx, r11
0x378d:	ror	rcx, 0x1c
0x3791:	lea	rsi, [r10 + rbp]
0x3795:	mov	rbp, rdx
0x3798:	mov	rbx, rcx
0x379b:	mov	rcx, r11
0x379e:	rol	rcx, 0x1e
0x37a2:	xor	rcx, rbx
0x37a5:	xor	rcx, r14


0x3628:	mov	rcx, qword ptr [rsi + rdx]
0x362c:	bswap	rcx
0x362f:	mov	qword ptr [r11 + rdx], rcx
0x3633:	add	rdx, 8
0x3637:	cmp	rdx, 0x80
0x363e:	jne	0x3628


0x722c:	add	rsp, 0x188
0x7233:	pop	rbx
0x7234:	pop	rbp
0x7235:	pop	r12
0x7237:	pop	r13
0x7239:	pop	r14
0x723b:	pop	r15
0x723d:	ret	


0x723e:	call	0x1690


0x2d31:	mov	rbx, qword ptr [rip + 0x20b378]
0x2d38:	mov	esi, 2
0x2d3d:	mov	byte ptr [rip + 0x20b3c4], 1
0x2d44:	mov	rdi, rbx
0x2d47:	call	0x79c0


0x2dc0:	lea	rsi, [rip + 0x799b]
0x2dc7:	mov	rdi, rbp
0x2dca:	mov	r13, rdx
0x2dcd:	call	0x79f0


0x1740:	jmp	qword ptr [rip + 0x20c7a2]


0x2c51:	jmp	0x2cae


0x2c7a:	cmp	sil, 0xa
0x2c7e:	mov	rcx, qword ptr [rip + 0x20b423]
0x2c85:	je	0x2cb8


0x18e0:	jmp	qword ptr [rip + 0x20c6d2]


0x2b90:	xor	eax, eax
0x2b92:	ret	


0x2b67:	cmp	al, 0x5c
0x2b69:	jne	0x2b98


0x2b23:	call	0x2a70


0x2b17:	mov	rdi, qword ptr [rip + 0x20b4ea]
0x2b1e:	call	0x18f0


0x2ae4:	pop	rbp
0x2ae5:	jmp	rax


0x2a93:	pop	rbp
0x2a94:	jmp	rax


0xa3e1:	push	r12
0xa3e3:	push	rbp
0xa3e4:	mov	r12d, edx
0xa3e7:	push	rbx
0xa3e8:	mov	rbp, rsi
0xa3eb:	mov	rbx, rdi
0xa3ee:	call	0x1780










0xa2a3:	xor	esi, esi
0xa2a5:	xor	eax, eax
0xa2a7:	call	0x1610


0xa179:	xor	eax, eax
0xa17b:	mov	esi, 0x406
0xa180:	call	0x1610


0xa1d0:	mov	edi, ebp
0xa1d2:	xor	eax, eax
0xa1d4:	call	0x1610


0xa1a5:	jg	0xa200


0x1750:	jmp	qword ptr [rip + 0x20c79a]


0x9f16:	test	rdx, rdx
0x9f19:	je	0x9eea




0x9d31:	call	0x97d0


0x9d55:	mov	dword ptr [rsp + 8], r10d
0x9d5a:	jmp	0x9d31


0x9d00:	cmp	r10d, 0x2f
0x9d04:	ja	0x9d5c


0x9c30:	mov	eax, dword ptr [r10]
0x9c33:	cmp	eax, 0x2f
0x9c36:	ja	0x9c7a






0x9324:	pop	rbx
0x9325:	mov	dword ptr [rip + 0x204d49], 1
0x932f:	pop	rbp
0x9330:	pop	r12
0x9332:	ret	


0x9315:	mov	rdi, r12
0x9318:	call	0x15b0








0x74a5:	add	rsp, 8
0x74a9:	pop	rbx
0x74aa:	pop	rbp
0x74ab:	pop	r12
0x74ad:	pop	r13
0x74af:	pop	r14
0x74b1:	pop	r15
0x74b3:	ret	


0x7620:	lea	rbp, [r13 + 0x58]
0x7624:	jmp	0x742c


0x7480:	mov	rbp, r12
0x7483:	mov	rdi, rbx
0x7486:	mov	rdx, r13
0x7489:	and	rbp, 0xffffffffffffff80
0x748d:	and	r12d, 0x7f
0x7491:	mov	rsi, rbp
0x7494:	add	rbx, rbp
0x7497:	call	0x3530


0x7397:	cmp	r12, 0x80
0x739e:	lea	rbp, [r13 + 0x58]
0x73a2:	je	0x742c




0x37a8:	mov	r14, rdx
0x37ab:	or	r14, r11
0x37ae:	and	rbp, r11
0x37b1:	mov	rbx, r14
0x37b4:	and	rbx, rax
0x37b7:	or	rbx, rbp
0x37ba:	mov	rbp, r11
0x37bd:	add	rbx, rcx
0x37c0:	mov	rcx, r8
0x37c3:	add	rbx, r10
0x37c6:	movabs	r10, 0xe9b5dba58189dbbc
0x37d0:	add	r10, qword ptr [rsp + 0x108]
0x37d8:	xor	rcx, rdi
0x37db:	and	rbp, rbx
0x37de:	and	rcx, rsi
0x37e1:	xor	rcx, r8
0x37e4:	add	r9, r10
0x37e7:	mov	r10, rsi
0x37ea:	add	rcx, r9
0x37ed:	mov	r9, rsi
0x37f0:	ror	r10, 0x12
0x37f4:	ror	r9, 0xe
0x37f8:	xor	r10, r9
0x37fb:	mov	r9, rsi
0x37fe:	rol	r9, 0x17
0x3802:	xor	r9, r10
0x3805:	mov	r10, rbx
0x3808:	add	r9, rcx
0x380b:	ror	r10, 0x1c
0x380f:	lea	rcx, [r9 + rax]
0x3813:	mov	rax, rbx
0x3816:	rol	rax, 0x1e
0x381a:	xor	rax, r10
0x381d:	mov	r10, rbx
0x3820:	rol	r10, 0x19
0x3824:	xor	rax, r10
0x3827:	mov	r10, r11
0x382a:	or	r10, rbx
0x382d:	and	r10, rdx
0x3830:	or	r10, rbp
0x3833:	mov	rbp, rbx
0x3836:	add	r10, rax
0x3839:	mov	rax, rdi
0x383c:	xor	rax, rsi
0x383f:	add	r10, r9
0x3842:	movabs	r9, 0x3956c25bf348b538
0x384c:	and	rax, rcx
0x384f:	xor	rax, rdi
0x3852:	add	r9, qword ptr [rsp + 0x110]
0x385a:	and	rbp, r10
0x385d:	add	r8, r9
0x3860:	mov	r9, rcx
0x3863:	add	r8, rax
0x3866:	mov	rax, rcx
0x3869:	ror	r9, 0x12
0x386d:	ror	rax, 0xe
0x3871:	xor	r9, rax
0x3874:	mov	rax, rcx
0x3877:	rol	rax, 0x17
0x387b:	xor	rax, r9
0x387e:	mov	r9, r10
0x3881:	add	rax, r8
0x3884:	mov	r8, r10
0x3887:	ror	r9, 0x1c
0x388b:	rol	r8, 0x1e
0x388f:	add	rdx, rax
0x3892:	xor	r8, r9
0x3895:	mov	r9, r10
0x3898:	rol	r9, 0x19
0x389c:	xor	r8, r9
0x389f:	mov	r9, rbx
0x38a2:	or	r9, r10
0x38a5:	and	r9, r11
0x38a8:	or	r9, rbp
0x38ab:	mov	rbp, r10
0x38ae:	add	r9, r8
0x38b1:	mov	r8, rsi
0x38b4:	add	r9, rax
0x38b7:	movabs	rax, 0x59f111f1b605d019
0x38c1:	add	rax, qword ptr [rsp + 0x118]
0x38c9:	xor	r8, rcx
0x38cc:	and	r8, rdx
0x38cf:	xor	r8, rsi
0x38d2:	add	rdi, rax
0x38d5:	mov	rax, rdx
0x38d8:	add	r8, rdi
0x38db:	mov	rdi, rdx
0x38de:	ror	rax, 0x12
0x38e2:	ror	rdi, 0xe
0x38e6:	xor	rax, rdi
0x38e9:	mov	rdi, rdx
0x38ec:	rol	rdi, 0x17
0x38f0:	xor	rdi, rax
0x38f3:	mov	rax, r9
0x38f6:	add	rdi, r8
0x38f9:	mov	r8, r9
0x38fc:	ror	rax, 0x1c
0x3900:	rol	r8, 0x1e
0x3904:	and	rbp, r9


0x1690:	jmp	qword ptr [rip + 0x20c7fa]




0x2cae:	add	rsp, 8
0x2cb2:	pop	rbx
0x2cb3:	pop	rbp
0x2cb4:	ret	


0x2cb8:	mov	edx, 2
0x2cbd:	mov	esi, 1
0x2cc2:	mov	rdi, rbp
0x2cc5:	call	0x17d0


0x2c87:	cmp	sil, 0x5c
0x2c8b:	je	0x2c58




0x2b6b:	cmp	r8, rdx
0x2b6e:	je	0x2b90


0x2b98:	mov	r9, rcx
0x2b9b:	mov	byte ptr [rcx - 1], al
0x2b9e:	add	rdx, 1
0x2ba2:	add	rcx, 1
0x2ba6:	cmp	rsi, rdx
0x2ba9:	ja	0x2b5f


0x18f0:	jmp	qword ptr [rip + 0x20c6ea]


0xa1a7:	cmp	esi, 4
0xa1aa:	je	0xa280


0xa200:	cmp	esi, 0x407
0xa206:	jg	0xa250




0x9eea:	mov	qword ptr [rsi], rcx
0x9eed:	imul	rcx, r9
0x9ef1:	mov	rsi, rcx
0x9ef4:	jmp	0x9e50


0x742c:	mov	rdx, qword ptr [r13 + 0x50]
0x7430:	cmp	r12d, 8
0x7434:	lea	rsi, [rbp + rdx]
0x7439:	jae	0x7500


0x73a8:	lea	r15, [r12 - 0x81]
0x73b0:	shr	r15, 7
0x73b4:	lea	r14, [r15 + 1]
0x73b8:	shl	r14, 7
0x73bc:	add	r14, rbx
0x73bf:	nop	
0x73c0:	movdqu	xmm0, xmmword ptr [rbx]
0x73c4:	mov	rdx, r13
0x73c7:	mov	esi, 0x80
0x73cc:	mov	rdi, rbp
0x73cf:	sub	rbx, -0x80
0x73d3:	movups	xmmword ptr [rbp], xmm0
0x73d7:	movdqu	xmm0, xmmword ptr [rbx - 0x70]
0x73dc:	movups	xmmword ptr [rbp + 0x10], xmm0
0x73e0:	movdqu	xmm0, xmmword ptr [rbx - 0x60]
0x73e5:	movups	xmmword ptr [rbp + 0x20], xmm0
0x73e9:	movdqu	xmm0, xmmword ptr [rbx - 0x50]
0x73ee:	movups	xmmword ptr [rbp + 0x30], xmm0
0x73f2:	movdqu	xmm0, xmmword ptr [rbx - 0x40]
0x73f7:	movups	xmmword ptr [rbp + 0x40], xmm0
0x73fb:	movdqu	xmm0, xmmword ptr [rbx - 0x30]
0x7400:	movups	xmmword ptr [rbp + 0x50], xmm0
0x7404:	movdqu	xmm0, xmmword ptr [rbx - 0x20]
0x7409:	movups	xmmword ptr [rbp + 0x60], xmm0
0x740d:	movdqu	xmm0, xmmword ptr [rbx - 0x10]
0x7412:	movups	xmmword ptr [rbp + 0x70], xmm0
0x7416:	call	0x3530


0x3907:	add	r11, rdi
0x390a:	xor	r8, rax
0x390d:	mov	rax, r9
0x3910:	rol	rax, 0x19
0x3914:	xor	r8, rax
0x3917:	mov	rax, r10
0x391a:	or	rax, r9
0x391d:	and	rax, rbx
0x3920:	or	rax, rbp
0x3923:	mov	rbp, r9
0x3926:	add	rax, r8
0x3929:	movabs	r8, 0x923f82a4af194f9b
0x3933:	add	r8, qword ptr [rsp + 0x120]
0x393b:	add	rax, rdi
0x393e:	mov	rdi, rcx
0x3941:	xor	rdi, rdx
0x3944:	and	rdi, r11
0x3947:	add	rsi, r8
0x394a:	xor	rdi, rcx
0x394d:	mov	r8, r11
0x3950:	add	rdi, rsi
0x3953:	mov	rsi, r11
0x3956:	ror	r8, 0x12
0x395a:	ror	rsi, 0xe
0x395e:	xor	r8, rsi
0x3961:	mov	rsi, r11
0x3964:	rol	rsi, 0x17
0x3968:	xor	rsi, r8
0x396b:	mov	r8, rax
0x396e:	add	rsi, rdi
0x3971:	mov	rdi, rax
0x3974:	ror	r8, 0x1c
0x3978:	rol	rdi, 0x1e
0x397c:	add	rbx, rsi
0x397f:	xor	rdi, r8
0x3982:	mov	r8, rax
0x3985:	rol	r8, 0x19
0x3989:	xor	rdi, r8
0x398c:	mov	r8, r9
0x398f:	or	r8, rax
0x3992:	and	r8, r10
0x3995:	and	rbp, rax
0x3998:	or	r8, rbp
0x399b:	mov	rbp, rax
0x399e:	add	r8, rdi
0x39a1:	movabs	rdi, 0xab1c5ed5da6d8118
0x39ab:	add	rdi, qword ptr [rsp + 0x128]
0x39b3:	add	r8, rsi
0x39b6:	mov	rsi, rdx
0x39b9:	xor	rsi, r11
0x39bc:	and	rbp, r8
0x39bf:	and	rsi, rbx
0x39c2:	add	rcx, rdi
0x39c5:	xor	rsi, rdx
0x39c8:	mov	rdi, rbx
0x39cb:	add	rsi, rcx
0x39ce:	mov	rcx, rbx
0x39d1:	ror	rdi, 0x12
0x39d5:	ror	rcx, 0xe
0x39d9:	xor	rdi, rcx
0x39dc:	mov	rcx, rbx
0x39df:	rol	rcx, 0x17
0x39e3:	xor	rcx, rdi
0x39e6:	mov	rdi, r8
0x39e9:	add	rcx, rsi
0x39ec:	mov	rsi, r8
0x39ef:	ror	rdi, 0x1c
0x39f3:	rol	rsi, 0x1e
0x39f7:	add	r10, rcx
0x39fa:	xor	rsi, rdi
0x39fd:	mov	rdi, r8
0x3a00:	rol	rdi, 0x19
0x3a04:	xor	rsi, rdi
0x3a07:	mov	rdi, rax
0x3a0a:	or	rdi, r8
0x3a0d:	and	rdi, r9
0x3a10:	or	rdi, rbp
0x3a13:	mov	rbp, r8
0x3a16:	add	rdi, rsi
0x3a19:	movabs	rsi, 0xd807aa98a3030242
0x3a23:	add	rdi, rcx
0x3a26:	mov	rcx, r11
0x3a29:	xor	rcx, rbx
0x3a2c:	and	rcx, r10
0x3a2f:	xor	rcx, r11
0x3a32:	add	rsi, qword ptr [rsp + 0x130]
0x3a3a:	and	rbp, rdi
0x3a3d:	add	rdx, rsi
0x3a40:	mov	rsi, r10
0x3a43:	add	rcx, rdx
0x3a46:	mov	rdx, r10
0x3a49:	ror	rsi, 0x12
0x3a4d:	ror	rdx, 0xe
0x3a51:	xor	rsi, rdx
0x3a54:	mov	rdx, r10
0x3a57:	rol	rdx, 0x17
0x3a5b:	xor	rdx, rsi
0x3a5e:	mov	rsi, rdi
0x3a61:	add	rdx, rcx




0x17d0:	jmp	qword ptr [rip + 0x20c75a]


0x2c58:	lea	rdi, [rip + 0x7a28]
0x2c5f:	mov	edx, 2
0x2c64:	mov	esi, 1
0x2c69:	call	0x17d0


0x2c8d:	mov	rax, qword ptr [rcx + 0x28]
0x2c91:	cmp	rax, qword ptr [rcx + 0x30]
0x2c95:	jae	0x2ce8


0x2b70:	add	rdx, 1
0x2b74:	movzx	eax, byte ptr [rdi + rdx]
0x2b78:	cmp	al, 0x5c
0x2b7a:	je	0x2bc0


0x2bab:	add	rsi, rdi
0x2bae:	cmp	r9, rsi
0x2bb1:	jae	0x2bb7


0xa280:	mov	eax, dword ptr [rsp]
0xa283:	cmp	eax, 0x2f
0xa286:	ja	0xa374


0xa1b0:	jg	0xa270


0xa208:	cmp	esi, 0x406
0xa20e:	jge	0xa280


0xa250:	cmp	esi, 0x409
0xa256:	je	0xa280


0x743f:	test	r12b, 4
0x7443:	jne	0x7629


0x7500:	mov	rax, qword ptr [rbx]
0x7503:	lea	rdi, [rsi + 8]
0x7507:	and	rdi, 0xfffffffffffffff8
0x750b:	mov	qword ptr [rsi], rax
0x750e:	mov	eax, r12d
0x7511:	mov	rcx, qword ptr [rbx + rax - 8]
0x7516:	mov	qword ptr [rsi + rax - 8], rcx
0x751b:	mov	rcx, rsi
0x751e:	mov	rsi, rbx
0x7521:	sub	rcx, rdi
0x7524:	sub	rsi, rcx
0x7527:	add	ecx, r12d
0x752a:	add	r12, rdx
0x752d:	shr	ecx, 3
0x7530:	cmp	r12, 0x7f
0x7534:	rep movsq	qword ptr [rdi], qword ptr [rsi]


0x3a64:	mov	rcx, rdi
0x3a67:	ror	rsi, 0x1c
0x3a6b:	rol	rcx, 0x1e
0x3a6f:	add	r9, rdx
0x3a72:	xor	rcx, rsi
0x3a75:	mov	rsi, rdi
0x3a78:	rol	rsi, 0x19
0x3a7c:	xor	rcx, rsi
0x3a7f:	mov	rsi, r8
0x3a82:	or	rsi, rdi
0x3a85:	and	rsi, rax
0x3a88:	or	rsi, rbp
0x3a8b:	mov	rbp, rdi
0x3a8e:	add	rsi, rcx
0x3a91:	movabs	rcx, 0x12835b0145706fbe
0x3a9b:	add	rcx, qword ptr [rsp + 0x138]
0x3aa3:	add	rsi, rdx
0x3aa6:	mov	rdx, rbx
0x3aa9:	xor	rdx, r10
0x3aac:	and	rdx, r9
0x3aaf:	xor	rdx, rbx
0x3ab2:	add	r11, rcx
0x3ab5:	mov	rcx, r9
0x3ab8:	add	r11, rdx
0x3abb:	mov	rdx, r9
0x3abe:	ror	rcx, 0x12
0x3ac2:	ror	rdx, 0xe
0x3ac6:	xor	rcx, rdx
0x3ac9:	mov	rdx, r9
0x3acc:	rol	rdx, 0x17
0x3ad0:	xor	rdx, rcx
0x3ad3:	mov	rcx, rsi
0x3ad6:	add	rdx, r11
0x3ad9:	mov	r11, rsi
0x3adc:	ror	rcx, 0x1c
0x3ae0:	rol	r11, 0x1e
0x3ae4:	and	rbp, rsi
0x3ae7:	add	rax, rdx
0x3aea:	xor	r11, rcx
0x3aed:	mov	rcx, rsi
0x3af0:	rol	rcx, 0x19
0x3af4:	xor	r11, rcx
0x3af7:	mov	rcx, rdi
0x3afa:	or	rcx, rsi
0x3afd:	and	rcx, r8
0x3b00:	or	rcx, rbp
0x3b03:	mov	rbp, rsi
0x3b06:	add	rcx, r11
0x3b09:	mov	r11, r10
0x3b0c:	add	rcx, rdx
0x3b0f:	movabs	rdx, 0x243185be4ee4b28c
0x3b19:	add	rdx, qword ptr [rsp + 0x140]
0x3b21:	xor	r11, r9
0x3b24:	mov	r14, rcx
0x3b27:	and	r11, rax
0x3b2a:	rol	r14, 0x1e
0x3b2e:	xor	r11, r10
0x3b31:	add	rbx, rdx
0x3b34:	mov	rdx, rax
0x3b37:	add	rbx, r11
0x3b3a:	mov	r11, rax
0x3b3d:	ror	rdx, 0x12
0x3b41:	ror	r11, 0xe
0x3b45:	xor	rdx, r11
0x3b48:	mov	r11, rax
0x3b4b:	rol	r11, 0x17
0x3b4f:	xor	r11, rdx
0x3b52:	mov	rdx, rcx
0x3b55:	add	r11, rbx
0x3b58:	ror	rdx, 0x1c
0x3b5c:	mov	rbx, r14
0x3b5f:	xor	rbx, rdx
0x3b62:	mov	rdx, rcx
0x3b65:	add	r8, r11
0x3b68:	rol	rdx, 0x19
0x3b6c:	mov	r13, r8
0x3b6f:	mov	r14, rcx
0x3b72:	xor	rbx, rdx
0x3b75:	mov	rdx, rsi
0x3b78:	or	rdx, rcx
0x3b7b:	and	rdx, rdi
0x3b7e:	and	rbp, rcx
0x3b81:	ror	r13, 0x12
0x3b85:	or	rdx, rbp
0x3b88:	add	rdx, rbx
0x3b8b:	movabs	rbx, 0x550c7dc3d5ffb4e2
0x3b95:	add	rbx, qword ptr [rsp + 0x148]
0x3b9d:	add	rdx, r11
0x3ba0:	mov	r11, r9
0x3ba3:	xor	r11, rax
0x3ba6:	and	r14, rdx
0x3ba9:	and	r11, r8
0x3bac:	add	r10, rbx
0x3baf:	xor	r11, r9
0x3bb2:	lea	r11, [r11 + r10]
0x3bb6:	mov	r10, r8
0x3bb9:	ror	r10, 0xe
0x3bbd:	xor	r13, r10
0x3bc0:	mov	r10, r8




0x2c97:	lea	rdx, [rax + 1]
0x2c9b:	add	rbx, 1
0x2c9f:	mov	qword ptr [rcx + 0x28], rdx
0x2ca3:	mov	byte ptr [rax], sil
0x2ca6:	movzx	esi, byte ptr [rbx]
0x2ca9:	test	sil, sil
0x2cac:	jne	0x2c7a


0x2ce8:	mov	rdi, rcx
0x2ceb:	call	0x16d0


0x2bc0:	mov	r9, rcx
0x2bc3:	mov	byte ptr [rcx - 1], 0x5c
0x2bc7:	jmp	0x2b9e


0x2b7c:	cmp	al, 0x6e
0x2b7e:	jne	0x2b90


0x2bb3:	mov	byte ptr [r9], 0
0x2bb7:	mov	rax, rdi
0x2bba:	ret	


0xa28c:	add	rax, qword ptr [rsp + 0x10]
0xa291:	mov	edx, dword ptr [rax]
0xa293:	mov	edi, ebp
0xa295:	xor	eax, eax
0xa297:	call	0x1610


0xa374:	mov	rax, qword ptr [rsp + 8]
0xa379:	jmp	0xa291


0xa1b6:	cmp	esi, 2
0xa1b9:	je	0xa280


0xa270:	cmp	esi, 9
0xa273:	je	0xa1d0


0xa210:	cmp	esi, 0x401
0xa216:	je	0xa1d0


0xa258:	jl	0xa1d0


0x7449:	test	r12d, r12d
0x744c:	je	0x745d


0x7629:	mov	eax, dword ptr [rbx]
0x762b:	mov	dword ptr [rsi], eax
0x762d:	mov	eax, r12d
0x7630:	mov	ecx, dword ptr [rbx + rax - 4]
0x7634:	mov	dword ptr [rsi + rax - 4], ecx
0x7638:	jmp	0x745d


0x7537:	jbe	0x746a


0x7534:	rep movsq	qword ptr [rdi], qword ptr [rsi]


0x3bc3:	rol	r10, 0x17
0x3bc7:	xor	r10, r13
0x3bca:	mov	r13, rdx
0x3bcd:	add	r10, r11
0x3bd0:	mov	r11, rdx
0x3bd3:	ror	r13, 0x1c
0x3bd7:	rol	r11, 0x1e
0x3bdb:	add	rdi, r10
0x3bde:	xor	r11, r13
0x3be1:	mov	r13, rdx
0x3be4:	rol	r13, 0x19
0x3be8:	xor	r11, r13
0x3beb:	mov	r13, rcx
0x3bee:	or	r13, rdx
0x3bf1:	and	r13, rsi
0x3bf4:	or	r13, r14
0x3bf7:	mov	r14, rdi
0x3bfa:	add	r13, r11
0x3bfd:	movabs	r11, 0x72be5d74f27b896f
0x3c07:	add	r11, qword ptr [rsp + 0x150]
0x3c0f:	add	r13, r10
0x3c12:	mov	r10, rax
0x3c15:	xor	r10, r8
0x3c18:	and	r10, rdi
0x3c1b:	xor	r10, rax
0x3c1e:	add	r9, r11
0x3c21:	ror	r14, 0x12
0x3c25:	lea	r10, [r10 + r9]
0x3c29:	mov	r9, rdi
0x3c2c:	mov	r11, rdx
0x3c2f:	ror	r9, 0xe
0x3c33:	and	r11, r13
0x3c36:	xor	r14, r9
0x3c39:	mov	r9, rdi
0x3c3c:	rol	r9, 0x17
0x3c40:	xor	r9, r14
0x3c43:	mov	r14, r13
0x3c46:	add	r9, r10
0x3c49:	mov	r10, r13
0x3c4c:	ror	r14, 0x1c
0x3c50:	rol	r10, 0x1e
0x3c54:	add	rsi, r9
0x3c57:	xor	r10, r14
0x3c5a:	mov	r14, r13
0x3c5d:	mov	r12, rsi
0x3c60:	rol	r14, 0x19
0x3c64:	ror	r12, 0x12
0x3c68:	xor	r10, r14
0x3c6b:	mov	r14, rdx
0x3c6e:	or	r14, r13
0x3c71:	and	r14, rcx
0x3c74:	or	r14, r11
0x3c77:	mov	r11, qword ptr [rsp + 0x168]
0x3c7f:	add	r14, r10
0x3c82:	movabs	r10, 0x80deb1fe3b1696b1
0x3c8c:	add	r10, qword ptr [rsp + 0x158]
0x3c94:	add	r14, r9
0x3c97:	mov	r9, r8
0x3c9a:	xor	r9, rdi
0x3c9d:	and	r9, rsi
0x3ca0:	add	rax, r10
0x3ca3:	xor	r9, r8
0x3ca6:	mov	r10, r13
0x3ca9:	lea	r9, [r9 + rax]
0x3cad:	mov	rax, rsi
0x3cb0:	ror	rax, 0xe
0x3cb4:	xor	r12, rax
0x3cb7:	mov	rax, rsi
0x3cba:	rol	rax, 0x17
0x3cbe:	xor	rax, r12
0x3cc1:	mov	r12, r14
0x3cc4:	add	rax, r9
0x3cc7:	mov	r9, r14
0x3cca:	ror	r12, 0x1c
0x3cce:	add	rcx, rax
0x3cd1:	rol	r9, 0x1e
0x3cd5:	and	r10, r14
0x3cd8:	xor	r9, r12
0x3cdb:	mov	r12, r14
0x3cde:	mov	rbp, rcx
0x3ce1:	rol	r12, 0x19
0x3ce5:	ror	rbp, 0x12
0x3ce9:	xor	r9, r12
0x3cec:	mov	r12, r13
0x3cef:	or	r12, r14
0x3cf2:	and	r12, rdx
0x3cf5:	or	r12, r10
0x3cf8:	mov	r10, r15
0x3cfb:	add	r12, r9
0x3cfe:	movabs	r9, 0x9bdc06a725c71235
0x3d08:	add	r9, qword ptr [rsp + 0x160]
0x3d10:	add	r12, rax
0x3d13:	mov	rax, rdi
0x3d16:	xor	rax, rsi
0x3d19:	and	rax, rcx
0x3d1c:	xor	rax, rdi
0x3d1f:	add	r8, r9
0x3d22:	mov	r9, r14
0x3d25:	add	r8, rax


0x16d0:	jmp	qword ptr [rip + 0x20c7da]


0x2b9e:	add	rdx, 1
0x2ba2:	add	rcx, 1
0x2ba6:	cmp	rsi, rdx
0x2ba9:	ja	0x2b5f


0x2b80:	mov	r9, rcx
0x2b83:	mov	byte ptr [rcx - 1], 0xa
0x2b87:	jmp	0x2b9e


0xa291:	mov	edx, dword ptr [rax]
0xa293:	mov	edi, ebp
0xa295:	xor	eax, eax
0xa297:	call	0x1610


0xa1bf:	jg	0xa1d0


0xa279:	jg	0xa280


0xa218:	cmp	esi, 0x402
0xa21e:	je	0xa280


0xa25e:	cmp	esi, 0x40a
0xa264:	jne	0xa228


0x745d:	add	r12, rdx
0x7460:	cmp	r12, 0x7f
0x7464:	ja	0x753d


0x744e:	movzx	eax, byte ptr [rbx]
0x7451:	test	r12b, 2
0x7455:	mov	byte ptr [rsi], al
0x7457:	jne	0x763d


0x746a:	mov	qword ptr [r13 + 0x50], r12
0x746e:	add	rsp, 8
0x7472:	pop	rbx
0x7473:	pop	rbp
0x7474:	pop	r12
0x7476:	pop	r13
0x7478:	pop	r14
0x747a:	pop	r15
0x747c:	ret	


0x753d:	mov	rdx, r13
0x7540:	mov	rdi, rbp
0x7543:	mov	esi, 0x80
0x7548:	call	0x3530


0x3d28:	mov	rax, rcx
0x3d2b:	and	r9, r12
0x3d2e:	ror	rax, 0xe
0x3d32:	xor	rbp, rax
0x3d35:	mov	rax, rcx
0x3d38:	rol	rax, 0x17
0x3d3c:	xor	rax, rbp
0x3d3f:	mov	rbp, r12
0x3d42:	add	rax, r8
0x3d45:	mov	r8, r12
0x3d48:	ror	rbp, 0x1c
0x3d4c:	rol	r8, 0x1e
0x3d50:	add	rdx, rax
0x3d53:	xor	r8, rbp
0x3d56:	mov	rbp, r12
0x3d59:	rol	rbp, 0x19
0x3d5d:	xor	r8, rbp
0x3d60:	mov	rbp, r14
0x3d63:	or	rbp, r12
0x3d66:	and	rbp, r13
0x3d69:	or	rbp, r9
0x3d6c:	mov	r9, r12
0x3d6f:	add	rbp, r8
0x3d72:	movabs	r8, 0xc19bf174cf692694
0x3d7c:	add	r8, qword ptr [rsp + 0x168]
0x3d84:	add	rbp, rax
0x3d87:	mov	rax, rsi
0x3d8a:	xor	rax, rcx
0x3d8d:	and	r9, rbp
0x3d90:	and	rax, rdx
0x3d93:	xor	rax, rsi
0x3d96:	add	rdi, r8
0x3d99:	mov	r8, rdx
0x3d9c:	add	rdi, rax
0x3d9f:	mov	rax, rdx
0x3da2:	ror	r8, 0x12
0x3da6:	ror	rax, 0xe
0x3daa:	xor	r8, rax
0x3dad:	mov	rax, rdx
0x3db0:	rol	rax, 0x17
0x3db4:	xor	rax, r8
0x3db7:	mov	r8, rbp
0x3dba:	add	rax, rdi
0x3dbd:	mov	rdi, rbp
0x3dc0:	ror	r8, 0x1c
0x3dc4:	rol	rdi, 0x1e
0x3dc8:	add	r13, rax
0x3dcb:	xor	rdi, r8
0x3dce:	mov	r8, rbp
0x3dd1:	rol	r8, 0x19
0x3dd5:	xor	rdi, r8
0x3dd8:	mov	r8, r12
0x3ddb:	or	r8, rbp
0x3dde:	and	r8, r14
0x3de1:	or	r8, r9
0x3de4:	mov	r9, rbp
0x3de7:	add	r8, rdi
0x3dea:	mov	rdi, qword ptr [rsp + 0x160]
0x3df2:	add	r8, rax
0x3df5:	mov	rax, qword ptr [rsp + 0x160]
0x3dfd:	shr	rdi, 6
0x3e01:	ror	rax, 0x13
0x3e05:	mov	rbx, rax
0x3e08:	mov	rax, qword ptr [rsp + 0x160]
0x3e10:	rol	rax, 3
0x3e14:	xor	rax, rbx
0x3e17:	mov	rbx, rdi
0x3e1a:	mov	rdi, qword ptr [rsp + 0xf0]
0x3e22:	add	rdi, qword ptr [rsp + 0x138]
0x3e2a:	xor	rbx, rax
0x3e2d:	lea	rax, [rbx + rdi]
0x3e31:	mov	rdi, r15
0x3e34:	ror	rdi, 1
0x3e37:	ror	r10, 8
0x3e3b:	and	r9, r8
0x3e3e:	mov	rbx, r10
0x3e41:	ror	r11, 0x13
0x3e45:	mov	r10, qword ptr [rsp + 0x108]
0x3e4d:	xor	rbx, rdi
0x3e50:	mov	rdi, r15
0x3e53:	shr	rdi, 7
0x3e57:	xor	rbx, rdi
0x3e5a:	movabs	rdi, 0xe49b69c19ef14ad2
0x3e64:	add	rbx, rax
0x3e67:	mov	rax, rcx
0x3e6a:	xor	rax, rdx
0x3e6d:	add	rdi, rbx
0x3e70:	and	rax, r13
0x3e73:	add	rsi, rdi
0x3e76:	mov	rdi, r13
0x3e79:	xor	rax, rcx
0x3e7c:	ror	rdi, 0x12
0x3e80:	add	rsi, rax
0x3e83:	mov	rax, r13
0x3e86:	ror	rax, 0xe
0x3e8a:	xor	rdi, rax
0x3e8d:	mov	rax, r13
0x3e90:	rol	rax, 0x17
0x3e94:	xor	rax, rdi




0xa1c1:	cmp	esi, 1
0xa1c4:	jne	0xa228


0xa27b:	cmp	esi, 8
0xa27e:	jne	0xa228


0xa220:	cmp	esi, 0x400
0xa226:	je	0xa280


0xa266:	jmp	0xa1d0


0xa228:	mov	eax, dword ptr [rsp]
0xa22b:	cmp	eax, 0x2f
0xa22e:	ja	0xa36a


0x763d:	mov	eax, r12d
0x7640:	movzx	ecx, word ptr [rbx + rax - 2]
0x7645:	mov	word ptr [rsi + rax - 2], cx
0x764a:	jmp	0x745d


0x3e97:	mov	rdi, r8
0x3e9a:	add	rax, rsi
0x3e9d:	mov	rsi, r8
0x3ea0:	ror	rdi, 0x1c
0x3ea4:	rol	rsi, 0x1e
0x3ea8:	add	r14, rax
0x3eab:	xor	rsi, rdi
0x3eae:	mov	rdi, r8
0x3eb1:	rol	rdi, 0x19
0x3eb5:	xor	rsi, rdi
0x3eb8:	mov	rdi, rbp
0x3ebb:	or	rdi, r8
0x3ebe:	and	rdi, r12
0x3ec1:	or	rdi, r9
0x3ec4:	mov	r9, r8
0x3ec7:	add	rdi, rsi
0x3eca:	mov	rsi, qword ptr [rsp + 0x140]
0x3ed2:	add	rdi, rax
0x3ed5:	mov	rax, qword ptr [rsp + 0x168]
0x3edd:	rol	rax, 3
0x3ee1:	xor	rax, r11
0x3ee4:	mov	r11, qword ptr [rsp + 0x168]
0x3eec:	add	rsi, r15
0x3eef:	and	r9, rdi
0x3ef2:	shr	r11, 6
0x3ef6:	xor	r11, rax
0x3ef9:	lea	rax, [r11 + rsi]
0x3efd:	mov	rsi, qword ptr [rsp + 0x100]
0x3f05:	mov	r11, qword ptr [rsp + 0x100]
0x3f0d:	ror	rsi, 1
0x3f10:	ror	r11, 8
0x3f14:	xor	r11, rsi
0x3f17:	mov	rsi, qword ptr [rsp + 0x100]
0x3f1f:	shr	rsi, 7
0x3f23:	xor	r11, rsi
0x3f26:	movabs	rsi, 0xefbe4786384f25e3
0x3f30:	add	r11, rax
0x3f33:	mov	rax, rdx
0x3f36:	xor	rax, r13
0x3f39:	add	rsi, r11
0x3f3c:	and	rax, r14
0x3f3f:	add	rcx, rsi
0x3f42:	mov	rsi, r14
0x3f45:	xor	rax, rdx
0x3f48:	ror	rsi, 0x12
0x3f4c:	add	rcx, rax
0x3f4f:	mov	rax, r14
0x3f52:	ror	rax, 0xe
0x3f56:	xor	rsi, rax
0x3f59:	mov	rax, r14
0x3f5c:	rol	rax, 0x17
0x3f60:	xor	rax, rsi
0x3f63:	mov	rsi, rdi
0x3f66:	add	rax, rcx
0x3f69:	mov	rcx, rdi
0x3f6c:	ror	rsi, 0x1c
0x3f70:	rol	rcx, 0x1e
0x3f74:	add	r12, rax
0x3f77:	xor	rcx, rsi
0x3f7a:	mov	rsi, rdi
0x3f7d:	rol	rsi, 0x19
0x3f81:	xor	rcx, rsi
0x3f84:	mov	rsi, r8
0x3f87:	or	rsi, rdi
0x3f8a:	and	rsi, rbp
0x3f8d:	or	rsi, r9
0x3f90:	mov	r9, rdi
0x3f93:	add	rsi, rcx
0x3f96:	ror	r10, 1
0x3f99:	add	rsi, rax
0x3f9c:	mov	rax, qword ptr [rsp + 0x108]
0x3fa4:	mov	r15, rsi
0x3fa7:	ror	rax, 8
0x3fab:	xor	rax, r10
0x3fae:	mov	r10, qword ptr [rsp + 0x108]
0x3fb6:	mov	rcx, qword ptr [rsp + 0x100]
0x3fbe:	add	rcx, qword ptr [rsp + 0x148]
0x3fc6:	shr	r10, 7
0x3fca:	xor	r10, rax
0x3fcd:	lea	rax, [r10 + rcx]
0x3fd1:	mov	rcx, rbx
0x3fd4:	mov	r10, rbx
0x3fd7:	ror	rcx, 0x13
0x3fdb:	rol	r10, 3
0x3fdf:	xor	r10, rcx
0x3fe2:	mov	rcx, rbx
0x3fe5:	shr	rcx, 6
0x3fe9:	xor	r10, rcx
0x3fec:	movabs	rcx, 0xfc19dc68b8cd5b5
0x3ff6:	add	r10, rax
0x3ff9:	mov	rax, r13
0x3ffc:	xor	rax, r14
0x3fff:	add	rcx, r10
0x4002:	and	rax, r12
0x4005:	add	rdx, rcx
0x4008:	mov	rcx, r12
0x400b:	xor	rax, r13
0x400e:	ror	rcx, 0x12
0x4012:	add	rdx, rax


0xa234:	add	rax, qword ptr [rsp + 0x10]
0xa239:	mov	rdx, qword ptr [rax]
0xa23c:	mov	edi, ebp
0xa23e:	xor	eax, eax
0xa240:	call	0x1610


0xa36a:	mov	rax, qword ptr [rsp + 8]
0xa36f:	jmp	0xa239


0x4015:	mov	rax, r12
0x4018:	ror	rax, 0xe
0x401c:	xor	rcx, rax
0x401f:	mov	rax, r12
0x4022:	rol	rax, 0x17
0x4026:	xor	rax, rcx
0x4029:	mov	rcx, rsi
0x402c:	add	rax, rdx
0x402f:	mov	rdx, rsi
0x4032:	ror	rcx, 0x1c
0x4036:	rol	rdx, 0x1e
0x403a:	add	rbp, rax
0x403d:	xor	rdx, rcx
0x4040:	mov	rcx, rsi
0x4043:	rol	rcx, 0x19
0x4047:	xor	rdx, rcx
0x404a:	mov	rcx, rdi
0x404d:	or	rcx, rsi
0x4050:	and	r9, rsi
0x4053:	and	rcx, r8
0x4056:	or	rcx, r9
0x4059:	mov	r9, qword ptr [rsp + 0x110]
0x4061:	add	rcx, rdx
0x4064:	mov	rdx, qword ptr [rsp + 0x108]
0x406c:	add	rdx, qword ptr [rsp + 0x150]
0x4074:	add	rcx, rax
0x4077:	mov	rax, qword ptr [rsp + 0x110]
0x407f:	ror	r9, 1
0x4082:	ror	rax, 8
0x4086:	xor	rax, r9
0x4089:	mov	r9, qword ptr [rsp + 0x110]
0x4091:	shr	r9, 7
0x4095:	xor	r9, rax
0x4098:	lea	rax, [r9 + rdx]
0x409c:	mov	rdx, r11
0x409f:	mov	r9, r11
0x40a2:	ror	rdx, 0x13
0x40a6:	rol	r9, 3
0x40aa:	xor	r9, rdx
0x40ad:	mov	rdx, r11
0x40b0:	shr	rdx, 6
0x40b4:	xor	r9, rdx
0x40b7:	mov	rdx, r14
0x40ba:	add	r9, rax
0x40bd:	xor	rdx, r12
0x40c0:	movabs	rax, 0x240ca1cc77ac9c65
0x40ca:	add	rax, r9
0x40cd:	and	rdx, rbp
0x40d0:	xor	rdx, r14
0x40d3:	add	r13, rax
0x40d6:	mov	rax, rbp
0x40d9:	add	r13, rdx
0x40dc:	mov	rdx, rbp
0x40df:	ror	rax, 0x12
0x40e3:	ror	rdx, 0xe
0x40e7:	xor	rax, rdx
0x40ea:	mov	rdx, rbp
0x40ed:	rol	rdx, 0x17
0x40f1:	xor	rdx, rax
0x40f4:	mov	rax, rcx
0x40f7:	add	rdx, r13
0x40fa:	mov	r13, rcx
0x40fd:	ror	rax, 0x1c
0x4101:	add	r8, rdx
0x4104:	rol	r13, 0x1e
0x4108:	and	r15, rcx
0x410b:	xor	r13, rax
0x410e:	mov	rax, rcx
0x4111:	rol	rax, 0x19
0x4115:	xor	r13, rax
0x4118:	mov	rax, rsi
0x411b:	or	rax, rcx
0x411e:	and	rax, rdi
0x4121:	or	rax, r15
0x4124:	mov	r15, r10
0x4127:	add	rax, r13
0x412a:	mov	r13, qword ptr [rsp + 0x118]
0x4132:	ror	r15, 0x13
0x4136:	add	rax, rdx
0x4139:	mov	rdx, qword ptr [rsp + 0x118]
0x4141:	ror	r13, 8
0x4145:	ror	rdx, 1
0x4148:	xor	rdx, r13
0x414b:	mov	r13, qword ptr [rsp + 0x118]
0x4153:	shr	r13, 7
0x4157:	xor	r13, rdx
0x415a:	mov	rdx, qword ptr [rsp + 0x110]
0x4162:	add	rdx, qword ptr [rsp + 0x158]
0x416a:	add	r13, rdx
0x416d:	mov	rdx, r10
0x4170:	rol	rdx, 3
0x4174:	xor	rdx, r15
0x4177:	mov	r15, r10
0x417a:	shr	r15, 6
0x417e:	xor	rdx, r15
0x4181:	lea	r15, [r13 + rdx]
0x4186:	mov	r13, r12
0x4189:	movabs	rdx, 0x2de92c6f592b0275
0x4193:	xor	r13, rbp


0xa239:	mov	rdx, qword ptr [rax]
0xa23c:	mov	edi, ebp
0xa23e:	xor	eax, eax
0xa240:	call	0x1610


0x4196:	add	rdx, r15
0x4199:	and	r13, r8
0x419c:	mov	qword ptr [rsp + 0x40], r15
0x41a1:	xor	r13, r12
0x41a4:	add	r14, rdx
0x41a7:	mov	rdx, r8
0x41aa:	add	r14, r13
0x41ad:	mov	r13, r8
0x41b0:	ror	rdx, 0x12
0x41b4:	ror	r13, 0xe
0x41b8:	mov	r15, rcx
0x41bb:	xor	rdx, r13
0x41be:	mov	r13, r8
0x41c1:	rol	r13, 0x17
0x41c5:	xor	r13, rdx
0x41c8:	mov	rdx, rax
0x41cb:	and	r15, rax
0x41ce:	add	r13, r14
0x41d1:	mov	r14, rax
0x41d4:	ror	rdx, 0x1c
0x41d8:	rol	r14, 0x1e
0x41dc:	add	rdi, r13
0x41df:	xor	r14, rdx
0x41e2:	mov	rdx, rax
0x41e5:	rol	rdx, 0x19
0x41e9:	xor	r14, rdx
0x41ec:	mov	rdx, rcx
0x41ef:	or	rdx, rax
0x41f2:	and	rdx, rsi
0x41f5:	or	rdx, r15
0x41f8:	add	rdx, r14
0x41fb:	mov	r14, qword ptr [rsp + 0x120]
0x4203:	add	rdx, r13
0x4206:	mov	r13, qword ptr [rsp + 0x120]
0x420e:	ror	r14, 8
0x4212:	ror	r13, 1
0x4215:	xor	r13, r14
0x4218:	mov	r14, qword ptr [rsp + 0x120]
0x4220:	shr	r14, 7
0x4224:	xor	r14, r13
0x4227:	mov	r13, qword ptr [rsp + 0x118]
0x422f:	add	r13, qword ptr [rsp + 0x160]
0x4237:	add	r14, r13
0x423a:	mov	r13, r9
0x423d:	ror	r13, 0x13
0x4241:	mov	r15, r13
0x4244:	mov	r13, r9
0x4247:	rol	r13, 3
0x424b:	xor	r13, r15
0x424e:	mov	r15, r9
0x4251:	shr	r15, 6
0x4255:	xor	r13, r15
0x4258:	mov	r15, rax
0x425b:	add	r14, r13
0x425e:	mov	r13, rbp
0x4261:	mov	qword ptr [rsp + 0x28], r14
0x4266:	movabs	r14, 0x4a7484aa6ea6e483
0x4270:	add	r14, qword ptr [rsp + 0x28]
0x4275:	xor	r13, r8
0x4278:	and	r13, rdi
0x427b:	xor	r13, rbp
0x427e:	add	r12, r14
0x4281:	mov	r14, rdi
0x4284:	ror	r14, 0xe
0x4288:	lea	r13, [r13 + r12]
0x428d:	and	r15, rdx
0x4290:	mov	r12, r14
0x4293:	mov	r14, rdi
0x4296:	ror	r14, 0x12
0x429a:	xor	r14, r12
0x429d:	mov	r12, rdi
0x42a0:	rol	r12, 0x17
0x42a4:	xor	r12, r14
0x42a7:	mov	r14, rdx
0x42aa:	add	r12, r13
0x42ad:	mov	r13, rdx
0x42b0:	ror	r14, 0x1c
0x42b4:	rol	r13, 0x1e
0x42b8:	add	rsi, r12
0x42bb:	xor	r13, r14
0x42be:	mov	r14, rdx
0x42c1:	rol	r14, 0x19
0x42c5:	xor	r13, r14
0x42c8:	mov	r14, rax
0x42cb:	or	r14, rdx
0x42ce:	and	r14, rcx
0x42d1:	or	r14, r15
0x42d4:	add	r14, r13
0x42d7:	mov	r13, qword ptr [rsp + 0x128]
0x42df:	add	r14, r12
0x42e2:	ror	r13, 1
0x42e5:	mov	r12, r13
0x42e8:	mov	r13, qword ptr [rsp + 0x128]
0x42f0:	ror	r13, 8
0x42f4:	xor	r12, r13
0x42f7:	mov	r13, qword ptr [rsp + 0x128]
0x42ff:	shr	r13, 7
0x4303:	xor	r13, r12
0x4306:	mov	r12, qword ptr [rsp + 0x120]


0x430e:	add	r12, qword ptr [rsp + 0x168]
0x4316:	add	r13, r12
0x4319:	mov	r12, qword ptr [rsp + 0x40]
0x431e:	mov	r15, r12
0x4321:	rol	r12, 3
0x4325:	ror	r15, 0x13
0x4329:	xor	r12, r15
0x432c:	mov	r15, qword ptr [rsp + 0x40]
0x4331:	shr	r15, 6
0x4335:	xor	r12, r15
0x4338:	lea	r15, [r13 + r12]
0x433d:	mov	r13, r8
0x4340:	xor	r13, rdi
0x4343:	mov	r12, r13
0x4346:	mov	qword ptr [rsp + 0x30], r15
0x434b:	movabs	r13, 0x5cb0a9dcbd41fbd4
0x4355:	and	r12, rsi
0x4358:	mov	r15, r12
0x435b:	xor	r15, r8
0x435e:	add	r13, qword ptr [rsp + 0x30]
0x4363:	add	rbp, r13
0x4366:	mov	r13, rsi
0x4369:	lea	r12, [r15 + rbp]
0x436d:	mov	rbp, rsi
0x4370:	ror	r13, 0x12
0x4374:	ror	rbp, 0xe
0x4378:	mov	r15, r14
0x437b:	xor	r13, rbp
0x437e:	mov	rbp, rsi
0x4381:	rol	r15, 0x1e
0x4385:	rol	rbp, 0x17
0x4389:	xor	rbp, r13
0x438c:	mov	r13, r14
0x438f:	add	rbp, r12
0x4392:	ror	r13, 0x1c
0x4396:	mov	r12, r15
0x4399:	xor	r12, r13
0x439c:	mov	r13, r14
0x439f:	mov	r15, rdx
0x43a2:	rol	r13, 0x19
0x43a6:	and	r15, r14
0x43a9:	add	rcx, rbp
0x43ac:	xor	r12, r13
0x43af:	mov	r13, rdx
0x43b2:	or	r13, r14
0x43b5:	and	r13, rax
0x43b8:	or	r13, r15
0x43bb:	mov	r15, qword ptr [rsp + 0x130]
0x43c3:	add	r13, r12
0x43c6:	add	r13, rbp
0x43c9:	mov	rbp, qword ptr [rsp + 0x130]
0x43d1:	ror	r15, 1
0x43d4:	ror	rbp, 8
0x43d8:	xor	rbp, r15
0x43db:	mov	r15, qword ptr [rsp + 0x130]
0x43e3:	mov	r12, qword ptr [rsp + 0x28]
0x43e8:	shr	r15, 7
0x43ec:	xor	rbp, r15
0x43ef:	mov	r15, r12
0x43f2:	rol	r12, 3
0x43f6:	ror	r15, 0x13
0x43fa:	add	rbp, qword ptr [rsp + 0x128]
0x4402:	xor	r12, r15
0x4405:	mov	r15, qword ptr [rsp + 0x28]
0x440a:	shr	r15, 6
0x440e:	add	rbp, rbx
0x4411:	xor	r12, r15
0x4414:	add	rbp, r12
0x4417:	movabs	r12, 0x76f988da831153b5
0x4421:	mov	qword ptr [rsp], rbp
0x4425:	mov	rbp, rdi
0x4428:	add	r12, qword ptr [rsp]
0x442c:	xor	rbp, rsi
0x442f:	and	rbp, rcx
0x4432:	mov	r15, rbp
0x4435:	xor	r15, rdi
0x4438:	add	r8, r12
0x443b:	lea	rbp, [r15 + r8]
0x443f:	mov	r15, rcx
0x4442:	mov	r8, rcx
0x4445:	ror	r15, 0x12
0x4449:	ror	r8, 0xe
0x444d:	mov	r12, r15
0x4450:	mov	r15, r13
0x4453:	xor	r12, r8
0x4456:	mov	r8, rcx
0x4459:	ror	r15, 0x1c
0x445d:	rol	r8, 0x17
0x4461:	xor	r8, r12
0x4464:	add	r8, rbp
0x4467:	mov	rbp, r13
0x446a:	rol	rbp, 0x1e
0x446e:	add	rax, r8
0x4471:	xor	rbp, r15
0x4474:	mov	r15, r13
0x4477:	rol	r15, 0x19
0x447b:	xor	rbp, r15
0x447e:	mov	r15, r14
0x4481:	or	r15, r13


0x4484:	mov	r12, r15
0x4487:	mov	r15, r14
0x448a:	and	r15, r13
0x448d:	and	r12, rdx
0x4490:	or	r12, r15
0x4493:	add	r12, rbp
0x4496:	add	r12, r8
0x4499:	mov	r8, qword ptr [rsp + 0x138]
0x44a1:	ror	r8, 1
0x44a4:	mov	rbp, r8
0x44a7:	mov	r8, qword ptr [rsp + 0x138]
0x44af:	ror	r8, 8
0x44b3:	xor	r8, rbp
0x44b6:	mov	rbp, qword ptr [rsp + 0x138]
0x44be:	shr	rbp, 7
0x44c2:	xor	r8, rbp
0x44c5:	mov	rbp, qword ptr [rsp + 0x30]
0x44ca:	add	r8, qword ptr [rsp + 0x130]
0x44d2:	mov	r15, rbp
0x44d5:	add	r8, r11
0x44d8:	ror	r15, 0x13
0x44dc:	rol	rbp, 3
0x44e0:	xor	rbp, r15
0x44e3:	mov	r15, qword ptr [rsp + 0x30]
0x44e8:	shr	r15, 6
0x44ec:	xor	rbp, r15
0x44ef:	mov	r15, r13
0x44f2:	add	r8, rbp
0x44f5:	movabs	rbp, 0x983e5152ee66dfab
0x44ff:	and	r15, r12
0x4502:	mov	qword ptr [rsp + 0x38], r8
0x4507:	add	rbp, qword ptr [rsp + 0x38]
0x450c:	mov	r8, rsi
0x450f:	xor	r8, rcx
0x4512:	and	r8, rax
0x4515:	xor	r8, rsi
0x4518:	add	rdi, rbp
0x451b:	mov	rbp, rax
0x451e:	lea	r8, [r8 + rdi]
0x4522:	mov	rdi, rax
0x4525:	ror	rbp, 0x12
0x4529:	ror	rdi, 0xe
0x452d:	xor	rbp, rdi
0x4530:	mov	rdi, rax
0x4533:	rol	rdi, 0x17
0x4537:	xor	rdi, rbp
0x453a:	mov	rbp, r12
0x453d:	add	rdi, r8
0x4540:	mov	r8, r12
0x4543:	ror	rbp, 0x1c
0x4547:	rol	r8, 0x1e
0x454b:	add	rdx, rdi
0x454e:	xor	r8, rbp
0x4551:	mov	rbp, r12
0x4554:	rol	rbp, 0x19
0x4558:	xor	r8, rbp
0x455b:	mov	rbp, r13
0x455e:	or	rbp, r12
0x4561:	and	rbp, r14
0x4564:	or	rbp, r15
0x4567:	add	rbp, r8
0x456a:	add	rbp, rdi
0x456d:	mov	rdi, qword ptr [rsp + 0x140]
0x4575:	ror	rdi, 1
0x4578:	mov	r8, rdi
0x457b:	mov	rdi, qword ptr [rsp + 0x140]
0x4583:	ror	rdi, 8
0x4587:	xor	rdi, r8
0x458a:	mov	r8, qword ptr [rsp + 0x140]
0x4592:	shr	r8, 7
0x4596:	xor	rdi, r8
0x4599:	mov	r8, qword ptr [rsp]
0x459d:	add	rdi, qword ptr [rsp + 0x138]
0x45a5:	mov	r15, r8
0x45a8:	rol	r8, 3
0x45ac:	ror	r15, 0x13
0x45b0:	add	rdi, r10
0x45b3:	xor	r8, r15
0x45b6:	mov	r15, qword ptr [rsp]
0x45ba:	shr	r15, 6
0x45be:	xor	r8, r15
0x45c1:	mov	r15, r12
0x45c4:	add	rdi, r8
0x45c7:	movabs	r8, 0xa831c66d2db43210
0x45d1:	and	r15, rbp
0x45d4:	mov	qword ptr [rsp + 8], rdi
0x45d9:	add	r8, qword ptr [rsp + 8]
0x45de:	mov	rdi, rcx
0x45e1:	xor	rdi, rax
0x45e4:	and	rdi, rdx
0x45e7:	xor	rdi, rcx
0x45ea:	add	rsi, r8
0x45ed:	mov	r8, rdx
0x45f0:	lea	rdi, [rdi + rsi]
0x45f4:	mov	rsi, rdx
0x45f7:	ror	r8, 0x12
0x45fb:	ror	rsi, 0xe
0x45ff:	xor	r8, rsi
0x4602:	mov	rsi, rdx


0x4605:	rol	rsi, 0x17
0x4609:	xor	rsi, r8
0x460c:	mov	r8, rbp
0x460f:	add	rsi, rdi
0x4612:	mov	rdi, rbp
0x4615:	ror	r8, 0x1c
0x4619:	rol	rdi, 0x1e
0x461d:	add	r14, rsi
0x4620:	xor	rdi, r8
0x4623:	mov	r8, rbp
0x4626:	rol	r8, 0x19
0x462a:	xor	rdi, r8
0x462d:	mov	r8, r12
0x4630:	or	r8, rbp
0x4633:	and	r8, r13
0x4636:	or	r8, r15
0x4639:	add	r8, rdi
0x463c:	add	r8, rsi
0x463f:	mov	rsi, qword ptr [rsp + 0x148]
0x4647:	ror	rsi, 1
0x464a:	mov	rdi, rsi
0x464d:	mov	rsi, qword ptr [rsp + 0x148]
0x4655:	ror	rsi, 8
0x4659:	xor	rsi, rdi
0x465c:	mov	rdi, qword ptr [rsp + 0x148]
0x4664:	shr	rdi, 7
0x4668:	xor	rsi, rdi
0x466b:	mov	rdi, qword ptr [rsp + 0x38]
0x4670:	add	rsi, qword ptr [rsp + 0x140]
0x4678:	mov	r15, rdi
0x467b:	rol	rdi, 3
0x467f:	ror	r15, 0x13
0x4683:	add	rsi, r9
0x4686:	xor	rdi, r15
0x4689:	mov	r15, qword ptr [rsp + 0x38]
0x468e:	shr	r15, 6
0x4692:	xor	rdi, r15
0x4695:	mov	r15, rbp
0x4698:	add	rsi, rdi
0x469b:	movabs	rdi, 0xb00327c898fb213f
0x46a5:	mov	qword ptr [rsp + 0x10], rsi
0x46aa:	add	rdi, qword ptr [rsp + 0x10]
0x46af:	mov	rsi, rax
0x46b2:	xor	rsi, rdx
0x46b5:	and	rsi, r14
0x46b8:	xor	rsi, rax
0x46bb:	add	rcx, rdi
0x46be:	mov	rdi, r14
0x46c1:	lea	rsi, [rsi + rcx]
0x46c5:	mov	rcx, r14
0x46c8:	ror	rdi, 0x12
0x46cc:	ror	rcx, 0xe
0x46d0:	xor	rdi, rcx
0x46d3:	mov	rcx, r14
0x46d6:	rol	rcx, 0x17
0x46da:	xor	rcx, rdi
0x46dd:	mov	rdi, r8
0x46e0:	add	rcx, rsi
0x46e3:	mov	rsi, r8
0x46e6:	ror	rdi, 0x1c
0x46ea:	rol	rsi, 0x1e
0x46ee:	add	r13, rcx
0x46f1:	xor	rsi, rdi
0x46f4:	mov	rdi, r8
0x46f7:	rol	rdi, 0x19
0x46fb:	xor	rsi, rdi
0x46fe:	mov	rdi, rbp
0x4701:	or	rdi, r8
0x4704:	and	rdi, r12
0x4707:	and	r15, r8
0x470a:	or	rdi, r15
0x470d:	add	rdi, rsi
0x4710:	add	rdi, rcx
0x4713:	mov	rcx, qword ptr [rsp + 0x150]
0x471b:	ror	rcx, 1
0x471e:	mov	rsi, rcx
0x4721:	mov	rcx, qword ptr [rsp + 0x150]
0x4729:	ror	rcx, 8
0x472d:	xor	rcx, rsi
0x4730:	mov	rsi, qword ptr [rsp + 0x150]
0x4738:	shr	rsi, 7
0x473c:	xor	rcx, rsi
0x473f:	mov	rsi, qword ptr [rsp + 8]
0x4744:	add	rcx, qword ptr [rsp + 0x148]
0x474c:	add	rcx, qword ptr [rsp + 0x40]
0x4751:	mov	r15, rsi
0x4754:	rol	rsi, 3
0x4758:	ror	r15, 0x13
0x475c:	xor	rsi, r15
0x475f:	mov	r15, qword ptr [rsp + 8]
0x4764:	shr	r15, 6
0x4768:	xor	rsi, r15
0x476b:	movabs	r15, 0xbf597fc7beef0ee4
0x4775:	add	rcx, rsi
0x4778:	mov	rsi, rcx
0x477b:	mov	rcx, rdx
0x477e:	xor	rcx, r14
0x4781:	add	r15, rsi
0x4784:	mov	qword ptr [rsp + 0x48], rsi


0x4789:	and	rcx, r13
0x478c:	add	rax, r15
0x478f:	mov	r15, rdi
0x4792:	xor	rcx, rdx
0x4795:	rol	r15, 0x1e
0x4799:	lea	rsi, [rcx + rax]
0x479d:	mov	rax, r13
0x47a0:	ror	rax, 0xe
0x47a4:	mov	rcx, rax
0x47a7:	mov	rax, r13
0x47aa:	ror	rax, 0x12
0x47ae:	xor	rax, rcx
0x47b1:	mov	rcx, r13
0x47b4:	rol	rcx, 0x17
0x47b8:	xor	rcx, rax
0x47bb:	mov	rax, rdi
0x47be:	add	rcx, rsi
0x47c1:	ror	rax, 0x1c
0x47c5:	mov	rsi, r15
0x47c8:	add	r12, rcx
0x47cb:	xor	rsi, rax
0x47ce:	mov	rax, rdi
0x47d1:	rol	rax, 0x19
0x47d5:	mov	r15, r8
0x47d8:	xor	rsi, rax
0x47db:	mov	rax, r8
0x47de:	and	r15, rdi
0x47e1:	or	rax, rdi
0x47e4:	and	rax, rbp
0x47e7:	or	rax, r15
0x47ea:	mov	r15, qword ptr [rsp + 0x158]
0x47f2:	add	rax, rsi
0x47f5:	add	rax, rcx
0x47f8:	mov	rcx, qword ptr [rsp + 0x158]
0x4800:	shr	r15, 7
0x4804:	ror	rcx, 1
0x4807:	mov	rsi, rcx
0x480a:	mov	rcx, qword ptr [rsp + 0x158]
0x4812:	ror	rcx, 8
0x4816:	xor	rcx, rsi
0x4819:	mov	rsi, qword ptr [rsp + 0x10]
0x481e:	xor	rcx, r15
0x4821:	add	rcx, qword ptr [rsp + 0x150]
0x4829:	add	rcx, qword ptr [rsp + 0x28]
0x482e:	mov	r15, rsi
0x4831:	rol	rsi, 3
0x4835:	ror	r15, 0x13
0x4839:	xor	rsi, r15
0x483c:	mov	r15, qword ptr [rsp + 0x10]
0x4841:	shr	r15, 6
0x4845:	xor	rsi, r15
0x4848:	mov	r15, rdi
0x484b:	add	rcx, rsi
0x484e:	movabs	rsi, 0xc6e00bf33da88fc2
0x4858:	mov	qword ptr [rsp + 0x18], rcx
0x485d:	add	rsi, qword ptr [rsp + 0x18]
0x4862:	mov	rcx, r14
0x4865:	xor	rcx, r13
0x4868:	and	rcx, r12
0x486b:	xor	rcx, r14
0x486e:	add	rdx, rsi
0x4871:	mov	rsi, r12
0x4874:	lea	rcx, [rcx + rdx]
0x4878:	mov	rdx, r12
0x487b:	ror	rsi, 0x12
0x487f:	ror	rdx, 0xe
0x4883:	xor	rsi, rdx
0x4886:	mov	rdx, r12
0x4889:	rol	rdx, 0x17
0x488d:	xor	rdx, rsi
0x4890:	add	rdx, rcx
0x4893:	mov	rcx, rax
0x4896:	and	r15, rax
0x4899:	ror	rcx, 0x1c
0x489d:	add	rbp, rdx
0x48a0:	mov	rsi, rcx
0x48a3:	mov	rcx, rax
0x48a6:	rol	rcx, 0x1e
0x48aa:	xor	rcx, rsi
0x48ad:	mov	rsi, rax
0x48b0:	rol	rsi, 0x19
0x48b4:	xor	rcx, rsi
0x48b7:	mov	rsi, rdi
0x48ba:	or	rsi, rax
0x48bd:	and	rsi, r8
0x48c0:	or	rsi, r15
0x48c3:	add	rsi, rcx
0x48c6:	add	rsi, rdx
0x48c9:	mov	rdx, qword ptr [rsp + 0x160]
0x48d1:	ror	rdx, 1
0x48d4:	mov	rcx, rdx
0x48d7:	mov	rdx, qword ptr [rsp + 0x160]
0x48df:	ror	rdx, 8
0x48e3:	xor	rdx, rcx
0x48e6:	mov	rcx, qword ptr [rsp + 0x160]
0x48ee:	shr	rcx, 7
0x48f2:	xor	rdx, rcx
0x48f5:	mov	rcx, qword ptr [rsp + 0x48]
0x48fa:	add	rdx, qword ptr [rsp + 0x158]


0x4902:	add	rdx, qword ptr [rsp + 0x30]
0x4907:	mov	r15, rcx
0x490a:	rol	rcx, 3
0x490e:	ror	r15, 0x13
0x4912:	xor	rcx, r15
0x4915:	mov	r15, qword ptr [rsp + 0x48]
0x491a:	shr	r15, 6
0x491e:	xor	rcx, r15
0x4921:	add	rdx, rcx
0x4924:	movabs	rcx, 0xd5a79147930aa725
0x492e:	mov	r15, rdx
0x4931:	mov	rdx, r13
0x4934:	xor	rdx, r12
0x4937:	add	rcx, r15
0x493a:	mov	qword ptr [rsp + 0x20], r15
0x493f:	and	rdx, rbp
0x4942:	add	r14, rcx
0x4945:	mov	rcx, rbp
0x4948:	xor	rdx, r13
0x494b:	mov	r15, rax
0x494e:	add	r14, rdx
0x4951:	mov	rdx, rbp
0x4954:	ror	rdx, 0xe
0x4958:	ror	rcx, 0x12
0x495c:	and	r15, rsi
0x495f:	xor	rcx, rdx
0x4962:	mov	rdx, rbp
0x4965:	rol	rdx, 0x17
0x4969:	xor	rdx, rcx
0x496c:	add	rdx, r14
0x496f:	mov	r14, rsi
0x4972:	ror	r14, 0x1c
0x4976:	add	r8, rdx
0x4979:	mov	rcx, r14
0x497c:	mov	r14, rsi
0x497f:	rol	r14, 0x1e
0x4983:	xor	r14, rcx
0x4986:	mov	rcx, rsi
0x4989:	rol	rcx, 0x19
0x498d:	xor	r14, rcx
0x4990:	mov	rcx, rax
0x4993:	or	rcx, rsi
0x4996:	and	rcx, rdi
0x4999:	or	rcx, r15
0x499c:	add	rcx, r14
0x499f:	add	rcx, rdx
0x49a2:	mov	rdx, qword ptr [rsp + 0x168]
0x49aa:	ror	rdx, 1
0x49ad:	mov	r14, rdx
0x49b0:	mov	rdx, qword ptr [rsp + 0x168]
0x49b8:	ror	rdx, 8
0x49bc:	xor	rdx, r14
0x49bf:	mov	r14, qword ptr [rsp + 0x168]
0x49c7:	shr	r14, 7
0x49cb:	xor	rdx, r14
0x49ce:	mov	r14, qword ptr [rsp + 0x18]
0x49d3:	add	rdx, qword ptr [rsp + 0x160]
0x49db:	add	rdx, qword ptr [rsp]
0x49df:	mov	r15, r14
0x49e2:	rol	r14, 3
0x49e6:	ror	r15, 0x13
0x49ea:	xor	r14, r15
0x49ed:	mov	r15, qword ptr [rsp + 0x18]
0x49f2:	shr	r15, 6
0x49f6:	xor	r14, r15
0x49f9:	add	rdx, r14
0x49fc:	mov	r15, rdx
0x49ff:	mov	rdx, r12
0x4a02:	xor	rdx, rbp
0x4a05:	mov	qword ptr [rsp + 0x58], r15
0x4a0a:	mov	r14, rdx
0x4a0d:	movabs	rdx, 0x6ca6351e003826f
0x4a17:	and	r14, r8
0x4a1a:	add	rdx, r15
0x4a1d:	mov	r15, rsi
0x4a20:	add	r13, rdx
0x4a23:	mov	rdx, r8
0x4a26:	xor	r14, r12
0x4a29:	ror	rdx, 0xe
0x4a2d:	add	r13, r14
0x4a30:	and	r15, rcx
0x4a33:	mov	r14, rdx
0x4a36:	mov	rdx, r8
0x4a39:	ror	rdx, 0x12
0x4a3d:	xor	rdx, r14
0x4a40:	mov	r14, r8
0x4a43:	rol	r14, 0x17
0x4a47:	xor	r14, rdx
0x4a4a:	mov	rdx, rcx
0x4a4d:	add	r14, r13
0x4a50:	ror	rdx, 0x1c
0x4a54:	lea	r13, [rdi + r14]
0x4a58:	mov	rdi, rcx
0x4a5b:	rol	rdi, 0x1e
0x4a5f:	xor	rdi, rdx
0x4a62:	mov	rdx, rcx
0x4a65:	rol	rdx, 0x19
0x4a69:	xor	rdi, rdx
0x4a6c:	mov	rdx, rsi


0x4a6f:	or	rdx, rcx
0x4a72:	and	rdx, rax
0x4a75:	or	rdx, r15
0x4a78:	add	rdx, rdi
0x4a7b:	mov	rdi, rbx
0x4a7e:	ror	rdi, 1
0x4a81:	add	rdx, r14
0x4a84:	mov	r14, rdi
0x4a87:	mov	rdi, rbx
0x4a8a:	ror	rdi, 8
0x4a8e:	xor	rdi, r14
0x4a91:	mov	r14, rbx
0x4a94:	shr	r14, 7
0x4a98:	xor	rdi, r14
0x4a9b:	add	rdi, qword ptr [rsp + 0x168]
0x4aa3:	add	rdi, qword ptr [rsp + 0x38]
0x4aa8:	mov	r14, qword ptr [rsp + 0x20]
0x4aad:	mov	r15, r14
0x4ab0:	rol	r14, 3
0x4ab4:	ror	r15, 0x13
0x4ab8:	xor	r14, r15
0x4abb:	mov	r15, qword ptr [rsp + 0x20]
0x4ac0:	shr	r15, 6
0x4ac4:	xor	r14, r15
0x4ac7:	mov	r15, rcx
0x4aca:	add	rdi, r14
0x4acd:	movabs	r14, 0x142929670a0e6e70
0x4ad7:	and	r15, rdx
0x4ada:	mov	qword ptr [rsp + 0x50], rdi
0x4adf:	add	r14, qword ptr [rsp + 0x50]
0x4ae4:	mov	rdi, rbp
0x4ae7:	xor	rdi, r8
0x4aea:	and	rdi, r13
0x4aed:	xor	rdi, rbp
0x4af0:	add	r12, r14
0x4af3:	lea	rdi, [rdi + r12]
0x4af7:	mov	r12, r13
0x4afa:	ror	r12, 0xe
0x4afe:	mov	r14, r12
0x4b01:	mov	r12, r13
0x4b04:	ror	r12, 0x12
0x4b08:	xor	r12, r14
0x4b0b:	mov	r14, r13
0x4b0e:	rol	r14, 0x17
0x4b12:	xor	r12, r14
0x4b15:	add	r12, rdi
0x4b18:	lea	rdi, [rax + r12]
0x4b1c:	mov	rax, rdx
0x4b1f:	ror	rax, 0x1c
0x4b23:	mov	r14, rax
0x4b26:	mov	rax, rdx
0x4b29:	rol	rax, 0x1e
0x4b2d:	xor	rax, r14
0x4b30:	mov	r14, rdx
0x4b33:	rol	r14, 0x19
0x4b37:	xor	rax, r14
0x4b3a:	mov	r14, rcx
0x4b3d:	or	r14, rdx
0x4b40:	and	r14, rsi
0x4b43:	or	r14, r15
0x4b46:	mov	r15, qword ptr [rsp + 0x58]
0x4b4b:	add	r14, rax
0x4b4e:	mov	rax, r11
0x4b51:	ror	rax, 1
0x4b54:	add	r12, r14
0x4b57:	mov	r14, rax
0x4b5a:	mov	rax, r11
0x4b5d:	ror	rax, 8
0x4b61:	xor	rax, r14
0x4b64:	mov	r14, r11
0x4b67:	shr	r14, 7
0x4b6b:	xor	rax, r14
0x4b6e:	mov	r14, r15
0x4b71:	add	rbx, rax
0x4b74:	mov	rax, r15
0x4b77:	add	rbx, qword ptr [rsp + 8]
0x4b7c:	ror	r14, 0x13
0x4b80:	rol	rax, 3
0x4b84:	xor	rax, r14
0x4b87:	mov	r14, r15
0x4b8a:	shr	r14, 6
0x4b8e:	xor	rax, r14
0x4b91:	mov	r14, rdx
0x4b94:	lea	r15, [rbx + rax]
0x4b98:	mov	rax, r8
0x4b9b:	movabs	rbx, 0x27b70a8546d22ffc
0x4ba5:	xor	rax, r13
0x4ba8:	and	r14, r12
0x4bab:	add	rbx, r15
0x4bae:	and	rax, rdi
0x4bb1:	xor	rax, r8
0x4bb4:	add	rbp, rbx
0x4bb7:	mov	rbx, rdi
0x4bba:	add	rbp, rax
0x4bbd:	mov	rax, rdi
0x4bc0:	ror	rbx, 0xe
0x4bc4:	ror	rax, 0x12
0x4bc8:	xor	rax, rbx
0x4bcb:	mov	rbx, rdi


0x4bce:	rol	rbx, 0x17
0x4bd2:	xor	rax, rbx
0x4bd5:	mov	rbx, r12
0x4bd8:	add	rax, rbp
0x4bdb:	mov	rbp, r12
0x4bde:	rol	rbx, 0x1e
0x4be2:	ror	rbp, 0x1c
0x4be6:	add	rsi, rax
0x4be9:	xor	rbx, rbp
0x4bec:	mov	rbp, r12
0x4bef:	rol	rbp, 0x19
0x4bf3:	xor	rbx, rbp
0x4bf6:	mov	rbp, rdx
0x4bf9:	or	rbp, r12
0x4bfc:	and	rbp, rcx
0x4bff:	or	rbp, r14
0x4c02:	mov	r14, qword ptr [rsp + 0x50]
0x4c07:	add	rbx, rbp
0x4c0a:	mov	rbp, r10
0x4c0d:	add	rbx, rax
0x4c10:	mov	rax, r10
0x4c13:	ror	rbp, 1
0x4c16:	ror	rax, 8
0x4c1a:	xor	rax, rbp
0x4c1d:	mov	rbp, r10
0x4c20:	shr	rbp, 7
0x4c24:	xor	rax, rbp
0x4c27:	mov	rbp, r14
0x4c2a:	add	r11, rax
0x4c2d:	mov	rax, r14
0x4c30:	add	r11, qword ptr [rsp + 0x10]
0x4c35:	ror	rbp, 0x13
0x4c39:	rol	rax, 3
0x4c3d:	xor	rax, rbp
0x4c40:	mov	rbp, r14
0x4c43:	shr	rbp, 6
0x4c47:	xor	rax, rbp
0x4c4a:	mov	rbp, r12
0x4c4d:	lea	r14, [r11 + rax]
0x4c51:	mov	rax, r13
0x4c54:	movabs	r11, 0x2e1b21385c26c926
0x4c5e:	xor	rax, rdi
0x4c61:	and	rbp, rbx
0x4c64:	add	r11, r14
0x4c67:	and	rax, rsi
0x4c6a:	xor	rax, r13
0x4c6d:	add	r8, r11
0x4c70:	mov	r11, rsi
0x4c73:	add	r8, rax
0x4c76:	mov	rax, rsi
0x4c79:	ror	r11, 0xe
0x4c7d:	ror	rax, 0x12
0x4c81:	xor	rax, r11
0x4c84:	mov	r11, rsi
0x4c87:	rol	r11, 0x17
0x4c8b:	xor	rax, r11
0x4c8e:	mov	r11, rbx
0x4c91:	add	rax, r8
0x4c94:	mov	r8, rbx
0x4c97:	ror	r11, 0x1c
0x4c9b:	rol	r8, 0x1e
0x4c9f:	add	rcx, rax
0x4ca2:	xor	r8, r11
0x4ca5:	mov	r11, rbx
0x4ca8:	rol	r11, 0x19
0x4cac:	xor	r8, r11
0x4caf:	mov	r11, r12
0x4cb2:	or	r11, rbx
0x4cb5:	and	r11, rdx
0x4cb8:	or	r11, rbp
0x4cbb:	add	r8, r11
0x4cbe:	mov	r11, r9
0x4cc1:	add	r8, rax
0x4cc4:	mov	rax, r9
0x4cc7:	ror	r11, 1
0x4cca:	ror	rax, 8
0x4cce:	mov	rbp, r8
0x4cd1:	xor	rax, r11
0x4cd4:	mov	r11, r9
0x4cd7:	rol	rbp, 0x19
0x4cdb:	shr	r11, 7
0x4cdf:	xor	rax, r11
0x4ce2:	mov	r11, r15
0x4ce5:	add	r10, rax
0x4ce8:	mov	rax, r15
0x4ceb:	add	r10, qword ptr [rsp + 0x48]
0x4cf0:	ror	r11, 0x13
0x4cf4:	rol	rax, 3
0x4cf8:	xor	rax, r11
0x4cfb:	mov	r11, r15
0x4cfe:	shr	r11, 6
0x4d02:	xor	rax, r11
0x4d05:	add	r10, rax
0x4d08:	mov	rax, rdi
0x4d0b:	mov	r11, r10
0x4d0e:	xor	rax, rsi
0x4d11:	movabs	r10, 0x4d2c6dfc5ac42aed
0x4d1b:	add	r10, r11
0x4d1e:	and	rax, rcx


0x4d21:	mov	qword ptr [rsp + 0x60], r11
0x4d26:	xor	rax, rdi
0x4d29:	add	r13, r10
0x4d2c:	mov	r10, rcx
0x4d2f:	add	r13, rax
0x4d32:	mov	rax, rcx
0x4d35:	ror	r10, 0xe
0x4d39:	ror	rax, 0x12
0x4d3d:	xor	rax, r10
0x4d40:	mov	r10, rcx
0x4d43:	rol	r10, 0x17
0x4d47:	xor	rax, r10
0x4d4a:	mov	r10, r8
0x4d4d:	ror	r10, 0x1c
0x4d51:	add	rax, r13
0x4d54:	mov	r13, qword ptr [rsp + 0x40]
0x4d59:	mov	r11, r10
0x4d5c:	mov	r10, r8
0x4d5f:	add	rdx, rax
0x4d62:	rol	r10, 0x1e
0x4d66:	xor	r10, r11
0x4d69:	xor	r10, rbp
0x4d6c:	mov	rbp, rbx
0x4d6f:	or	rbp, r8
0x4d72:	mov	r11, rbp
0x4d75:	mov	rbp, rbx
0x4d78:	and	rbp, r8
0x4d7b:	and	r11, r12
0x4d7e:	or	r11, rbp
0x4d81:	mov	rbp, r14
0x4d84:	add	r10, r11
0x4d87:	mov	r11, r13
0x4d8a:	shr	rbp, 6
0x4d8e:	add	r10, rax
0x4d91:	mov	rax, r13
0x4d94:	ror	r11, 1
0x4d97:	ror	rax, 8
0x4d9b:	xor	rax, r11
0x4d9e:	mov	r11, r13
0x4da1:	shr	r11, 7
0x4da5:	xor	rax, r11
0x4da8:	add	r9, rax
0x4dab:	mov	rax, r14
0x4dae:	add	r9, qword ptr [rsp + 0x18]
0x4db3:	ror	rax, 0x13
0x4db7:	mov	r11, rax
0x4dba:	mov	rax, r14
0x4dbd:	rol	rax, 3
0x4dc1:	xor	rax, r11
0x4dc4:	xor	rax, rbp
0x4dc7:	add	r9, rax
0x4dca:	mov	rbp, r9
0x4dcd:	mov	r9, rsi
0x4dd0:	xor	r9, rcx
0x4dd3:	mov	qword ptr [rsp + 0x40], rbp
0x4dd8:	mov	rax, r9
0x4ddb:	movabs	r9, 0x53380d139d95b3df
0x4de5:	add	r9, rbp
0x4de8:	and	rax, rdx
0x4deb:	mov	rbp, r8
0x4dee:	xor	rax, rsi
0x4df1:	add	rdi, r9
0x4df4:	mov	r9, rdx
0x4df7:	add	rdi, rax
0x4dfa:	mov	rax, rdx
0x4dfd:	ror	r9, 0xe
0x4e01:	ror	rax, 0x12
0x4e05:	xor	rax, r9
0x4e08:	mov	r9, rdx
0x4e0b:	rol	r9, 0x17
0x4e0f:	xor	rax, r9
0x4e12:	add	rax, rdi
0x4e15:	mov	rdi, r10
0x4e18:	ror	rdi, 0x1c
0x4e1c:	lea	r9, [r12 + rax]
0x4e20:	mov	r12, qword ptr [rsp + 0x28]
0x4e25:	mov	r11, rdi
0x4e28:	mov	rdi, r10
0x4e2b:	rol	rdi, 0x1e
0x4e2f:	and	rbp, r10
0x4e32:	xor	rdi, r11
0x4e35:	mov	r11, r10
0x4e38:	rol	r11, 0x19
0x4e3c:	xor	rdi, r11
0x4e3f:	mov	r11, r8
0x4e42:	or	r11, r10
0x4e45:	and	r11, rbx
0x4e48:	or	r11, rbp
0x4e4b:	add	rdi, r11
0x4e4e:	mov	r11, r12
0x4e51:	add	rdi, rax
0x4e54:	mov	rax, r12
0x4e57:	ror	r11, 1
0x4e5a:	ror	rax, 8
0x4e5e:	xor	rax, r11
0x4e61:	mov	r11, r12
0x4e64:	shr	r11, 7
0x4e68:	xor	rax, r11
0x4e6b:	add	rax, r13


0x4e6e:	mov	r13, qword ptr [rsp + 0x60]
0x4e73:	add	rax, qword ptr [rsp + 0x20]
0x4e78:	mov	rbp, r13
0x4e7b:	mov	r11, r13
0x4e7e:	ror	rbp, 0x13
0x4e82:	rol	r11, 3
0x4e86:	xor	r11, rbp
0x4e89:	mov	rbp, r13
0x4e8c:	shr	rbp, 6
0x4e90:	xor	r11, rbp
0x4e93:	mov	rbp, r10
0x4e96:	add	rax, r11
0x4e99:	movabs	r11, 0x650a73548baf63de
0x4ea3:	mov	r13, rax
0x4ea6:	mov	rax, rcx
0x4ea9:	xor	rax, rdx
0x4eac:	add	r11, r13
0x4eaf:	mov	qword ptr [rsp + 0x28], r13
0x4eb4:	and	rax, r9
0x4eb7:	add	rsi, r11
0x4eba:	mov	r11, r9
0x4ebd:	xor	rax, rcx
0x4ec0:	ror	r11, 0xe
0x4ec4:	mov	r13, qword ptr [rsp + 0x30]
0x4ec9:	add	rsi, rax
0x4ecc:	mov	rax, r9
0x4ecf:	ror	rax, 0x12
0x4ed3:	xor	rax, r11
0x4ed6:	mov	r11, r9
0x4ed9:	rol	r11, 0x17
0x4edd:	and	rbp, rdi
0x4ee0:	xor	rax, r11
0x4ee3:	mov	r11, rdi
0x4ee6:	add	rax, rsi
0x4ee9:	mov	rsi, rdi
0x4eec:	ror	r11, 0x1c
0x4ef0:	rol	rsi, 0x1e
0x4ef4:	add	rbx, rax
0x4ef7:	xor	rsi, r11
0x4efa:	mov	r11, rdi
0x4efd:	rol	r11, 0x19
0x4f01:	xor	rsi, r11
0x4f04:	mov	r11, r10
0x4f07:	or	r11, rdi
0x4f0a:	and	r11, r8
0x4f0d:	or	r11, rbp
0x4f10:	add	rsi, r11
0x4f13:	mov	r11, r13
0x4f16:	add	rsi, rax
0x4f19:	mov	rax, r13
0x4f1c:	ror	r11, 1
0x4f1f:	ror	rax, 8
0x4f23:	xor	rax, r11
0x4f26:	mov	r11, r13
0x4f29:	shr	r11, 7
0x4f2d:	xor	rax, r11
0x4f30:	add	rax, r12
0x4f33:	mov	r12, qword ptr [rsp + 0x40]
0x4f38:	add	rax, qword ptr [rsp + 0x58]
0x4f3d:	mov	r11, r12
0x4f40:	ror	r11, 0x13
0x4f44:	mov	rbp, r11
0x4f47:	mov	r11, r12
0x4f4a:	shr	r12, 6
0x4f4e:	rol	r11, 3
0x4f52:	xor	r11, rbp
0x4f55:	mov	rbp, rdi
0x4f58:	xor	r11, r12
0x4f5b:	add	rax, r11
0x4f5e:	movabs	r11, 0x766a0abb3c77b2a8
0x4f68:	mov	r12, rax
0x4f6b:	mov	rax, rdx
0x4f6e:	xor	rax, r9
0x4f71:	add	r11, r12
0x4f74:	mov	qword ptr [rsp + 0x30], r12
0x4f79:	and	rax, rbx
0x4f7c:	xor	rax, rdx
0x4f7f:	add	rcx, r11
0x4f82:	mov	r11, rbx
0x4f85:	add	rcx, rax
0x4f88:	mov	rax, rbx
0x4f8b:	ror	r11, 0xe
0x4f8f:	ror	rax, 0x12
0x4f93:	and	rbp, rsi
0x4f96:	xor	rax, r11
0x4f99:	mov	r11, rbx
0x4f9c:	rol	r11, 0x17
0x4fa0:	xor	rax, r11
0x4fa3:	add	rax, rcx
0x4fa6:	mov	rcx, rsi
0x4fa9:	ror	rcx, 0x1c
0x4fad:	lea	r11, [r8 + rax]
0x4fb1:	mov	r8, rcx
0x4fb4:	mov	rcx, rsi
0x4fb7:	rol	rcx, 0x1e
0x4fbb:	xor	rcx, r8
0x4fbe:	mov	r8, rsi
0x4fc1:	rol	r8, 0x19
0x4fc5:	xor	rcx, r8


0x4fc8:	mov	r8, rdi
0x4fcb:	or	r8, rsi
0x4fce:	and	r8, r10
0x4fd1:	or	r8, rbp
0x4fd4:	mov	rbp, qword ptr [rsp + 0x28]
0x4fd9:	add	rcx, r8
0x4fdc:	mov	r8, qword ptr [rsp]
0x4fe0:	add	rcx, rax
0x4fe3:	mov	r12, r8
0x4fe6:	mov	rax, r8
0x4fe9:	ror	rax, 1
0x4fec:	ror	r12, 8
0x4ff0:	xor	r12, rax
0x4ff3:	mov	rax, r8
0x4ff6:	mov	r8, rbp
0x4ff9:	shr	rax, 7
0x4ffd:	ror	r8, 0x13
0x5001:	xor	r12, rax
0x5004:	mov	rax, rbp
0x5007:	add	r12, r13
0x500a:	rol	rax, 3
0x500e:	add	r12, qword ptr [rsp + 0x50]
0x5013:	xor	rax, r8
0x5016:	mov	r8, rbp
0x5019:	mov	rbp, rsi
0x501c:	shr	r8, 6
0x5020:	xor	rax, r8
0x5023:	movabs	r8, 0x81c2c92e47edaee6
0x502d:	lea	r13, [r12 + rax]
0x5031:	mov	rax, r9
0x5034:	xor	rax, rbx
0x5037:	and	rax, r11
0x503a:	add	r8, r13
0x503d:	mov	qword ptr [rsp + 0x68], r13
0x5042:	xor	rax, r9
0x5045:	add	rdx, r8
0x5048:	mov	r8, r11
0x504b:	add	rdx, rax
0x504e:	mov	rax, r11
0x5051:	ror	r8, 0xe
0x5055:	ror	rax, 0x12
0x5059:	mov	r13, qword ptr [rsp + 0x38]
0x505e:	and	rbp, rcx
0x5061:	xor	rax, r8
0x5064:	mov	r8, r11
0x5067:	rol	r8, 0x17
0x506b:	xor	rax, r8
0x506e:	mov	r12, r13
0x5071:	add	rax, rdx
0x5074:	mov	rdx, rcx
0x5077:	ror	r12, 8
0x507b:	ror	rdx, 0x1c
0x507f:	add	r10, rax
0x5082:	mov	r8, rdx
0x5085:	mov	rdx, rcx
0x5088:	rol	rdx, 0x1e
0x508c:	xor	rdx, r8
0x508f:	mov	r8, rcx
0x5092:	rol	r8, 0x19
0x5096:	xor	rdx, r8
0x5099:	mov	r8, rsi
0x509c:	or	r8, rcx
0x509f:	and	r8, rdi
0x50a2:	or	r8, rbp
0x50a5:	mov	rbp, r13
0x50a8:	ror	rbp, 1
0x50ab:	add	rdx, r8
0x50ae:	xor	r12, rbp
0x50b1:	mov	rbp, r13
0x50b4:	add	rdx, rax
0x50b7:	shr	rbp, 7
0x50bb:	xor	r12, rbp
0x50be:	mov	rbp, qword ptr [rsp + 0x30]
0x50c3:	add	r12, qword ptr [rsp]
0x50c7:	mov	r8, rbp
0x50ca:	mov	rax, rbp
0x50cd:	ror	r8, 0x13
0x50d1:	rol	rax, 3
0x50d5:	add	r12, r15
0x50d8:	xor	rax, r8
0x50db:	mov	r8, rbp
0x50de:	shr	r8, 6
0x50e2:	xor	rax, r8
0x50e5:	add	rax, r12
0x50e8:	movabs	r12, 0x92722c851482353b
0x50f2:	mov	r8, rax
0x50f5:	mov	rax, rbx
0x50f8:	xor	rax, r11
0x50fb:	add	r12, r8
0x50fe:	mov	qword ptr [rsp + 0x38], r8
0x5103:	and	rax, r10
0x5106:	add	r9, r12
0x5109:	mov	r12, r10
0x510c:	xor	rax, rbx
0x510f:	rol	r12, 0x17
0x5113:	add	r9, rax
0x5116:	mov	rax, r10
0x5119:	ror	rax, 0xe
0x511d:	mov	r8, rax


0x5120:	mov	rax, r10
0x5123:	ror	rax, 0x12
0x5127:	xor	rax, r8
0x512a:	xor	rax, r12
0x512d:	mov	r12, rdx
0x5130:	add	rax, r9
0x5133:	rol	r12, 0x1e
0x5137:	lea	r9, [rdi + rax]
0x513b:	mov	rdi, rdx
0x513e:	mov	r8, r12
0x5141:	ror	rdi, 0x1c
0x5145:	mov	r12, rcx
0x5148:	xor	r8, rdi
0x514b:	mov	rdi, rdx
0x514e:	and	r12, rdx
0x5151:	rol	rdi, 0x19
0x5155:	xor	r8, rdi
0x5158:	mov	rdi, rcx
0x515b:	or	rdi, rdx
0x515e:	and	rdi, rsi
0x5161:	or	rdi, r12
0x5164:	add	rdi, r8
0x5167:	lea	r12, [rdi + rax]
0x516b:	mov	rdi, qword ptr [rsp + 8]
0x5170:	mov	rax, rdi
0x5173:	mov	rbp, rdi
0x5176:	ror	rax, 1
0x5179:	ror	rbp, 8
0x517d:	xor	rbp, rax
0x5180:	mov	rax, rdi
0x5183:	shr	rax, 7
0x5187:	xor	rbp, rax
0x518a:	add	rbp, r13
0x518d:	mov	r13, qword ptr [rsp + 0x68]
0x5192:	add	rbp, r14
0x5195:	mov	rdi, r13
0x5198:	mov	rax, r13
0x519b:	ror	rdi, 0x13
0x519f:	rol	rax, 3
0x51a3:	xor	rax, rdi
0x51a6:	mov	rdi, r13
0x51a9:	shr	rdi, 6
0x51ad:	xor	rax, rdi
0x51b0:	movabs	rdi, 0xa2bfe8a14cf10364
0x51ba:	lea	r13, [rbp + rax]
0x51bf:	mov	rax, r11
0x51c2:	xor	rax, r10
0x51c5:	add	rdi, r13
0x51c8:	and	rax, r9
0x51cb:	mov	qword ptr [rsp], r13
0x51cf:	xor	rax, r11
0x51d2:	add	rbx, rdi
0x51d5:	mov	rdi, r9
0x51d8:	add	rbx, rax
0x51db:	mov	rax, r9
0x51de:	ror	rdi, 0xe
0x51e2:	ror	rax, 0x12
0x51e6:	mov	r13, rdx
0x51e9:	xor	rax, rdi
0x51ec:	mov	rdi, r9
0x51ef:	and	r13, r12
0x51f2:	rol	rdi, 0x17
0x51f6:	xor	rax, rdi
0x51f9:	mov	rdi, r12
0x51fc:	add	rax, rbx
0x51ff:	rol	rdi, 0x1e
0x5203:	lea	rbx, [rsi + rax]
0x5207:	mov	rsi, r12
0x520a:	ror	rsi, 0x1c
0x520e:	xor	rdi, rsi
0x5211:	mov	rsi, r12
0x5214:	rol	rsi, 0x19
0x5218:	xor	rdi, rsi
0x521b:	mov	rsi, rdx
0x521e:	or	rsi, r12
0x5221:	and	rsi, rcx
0x5224:	or	rsi, r13
0x5227:	add	rsi, rdi
0x522a:	mov	rdi, qword ptr [rsp + 0x38]
0x522f:	lea	rbp, [rsi + rax]
0x5233:	mov	rsi, qword ptr [rsp + 0x10]
0x5238:	mov	r8, rsi
0x523b:	mov	r13, rsi
0x523e:	ror	r8, 1
0x5241:	shr	r13, 7
0x5245:	mov	rax, r8
0x5248:	mov	r8, rsi
0x524b:	mov	rsi, rdi
0x524e:	ror	r8, 8
0x5252:	xor	r8, rax
0x5255:	mov	rax, rdi
0x5258:	xor	r8, r13
0x525b:	add	r8, qword ptr [rsp + 8]
0x5260:	ror	rsi, 0x13
0x5264:	add	r8, qword ptr [rsp + 0x60]
0x5269:	rol	rax, 3
0x526d:	xor	rax, rsi
0x5270:	mov	rsi, rdi
0x5273:	shr	rsi, 6


0x5277:	xor	rax, rsi
0x527a:	movabs	rsi, 0xa81a664bbc423001
0x5284:	add	rax, r8
0x5287:	mov	rdi, rax
0x528a:	mov	rax, r10
0x528d:	add	rsi, rdi
0x5290:	xor	rax, r9
0x5293:	mov	qword ptr [rsp + 0x70], rdi
0x5298:	and	rax, rbx
0x529b:	lea	r8, [rsi + r11]
0x529f:	mov	rdi, r12
0x52a2:	xor	rax, r10
0x52a5:	and	rdi, rbp
0x52a8:	add	r8, rax
0x52ab:	mov	rax, rbx
0x52ae:	ror	rax, 0xe
0x52b2:	mov	rsi, rax
0x52b5:	mov	rax, rbx
0x52b8:	ror	rax, 0x12
0x52bc:	xor	rax, rsi
0x52bf:	mov	rsi, rbx
0x52c2:	rol	rsi, 0x17
0x52c6:	xor	rax, rsi
0x52c9:	mov	rsi, rbp
0x52cc:	add	rax, r8
0x52cf:	rol	rsi, 0x1e
0x52d3:	mov	r8, qword ptr [rsp + 0x48]
0x52d8:	lea	r11, [rcx + rax]
0x52dc:	mov	rcx, rbp
0x52df:	ror	rcx, 0x1c
0x52e3:	xor	rsi, rcx
0x52e6:	mov	rcx, rbp
0x52e9:	rol	rcx, 0x19
0x52ed:	xor	rsi, rcx
0x52f0:	mov	rcx, r12
0x52f3:	or	rcx, rbp
0x52f6:	and	rcx, rdx
0x52f9:	or	rcx, rdi
0x52fc:	mov	rdi, r8
0x52ff:	add	rcx, rsi
0x5302:	ror	rdi, 8
0x5306:	mov	rsi, qword ptr [rsp]
0x530a:	lea	r13, [rcx + rax]
0x530e:	mov	rax, r8
0x5311:	ror	rax, 1
0x5314:	xor	rdi, rax
0x5317:	mov	rax, r8
0x531a:	mov	rcx, rsi
0x531d:	shr	rax, 7
0x5321:	ror	rcx, 0x13
0x5325:	xor	rdi, rax
0x5328:	mov	rax, rsi
0x532b:	add	rdi, qword ptr [rsp + 0x10]
0x5330:	add	rdi, qword ptr [rsp + 0x40]
0x5335:	rol	rax, 3
0x5339:	xor	rax, rcx
0x533c:	mov	rcx, rsi
0x533f:	shr	rcx, 6
0x5343:	xor	rax, rcx
0x5346:	movabs	rcx, 0xc24b8b70d0f89791
0x5350:	add	rax, rdi
0x5353:	mov	rdi, qword ptr [rsp + 0x18]
0x5358:	mov	rsi, rax
0x535b:	mov	rax, r9
0x535e:	xor	rax, rbx
0x5361:	add	rcx, rsi
0x5364:	mov	qword ptr [rsp + 0x10], rsi
0x5369:	and	rax, r11
0x536c:	add	r10, rcx
0x536f:	xor	rax, r9
0x5372:	add	r10, rax
0x5375:	mov	rax, r11
0x5378:	ror	rax, 0xe
0x537c:	mov	rcx, rax
0x537f:	mov	rax, r11
0x5382:	ror	rax, 0x12
0x5386:	xor	rax, rcx
0x5389:	mov	rcx, r11
0x538c:	rol	rcx, 0x17
0x5390:	xor	rax, rcx
0x5393:	add	rax, r10
0x5396:	mov	r10, r13
0x5399:	ror	r10, 0x1c
0x539d:	add	rdx, rax
0x53a0:	mov	rsi, r10
0x53a3:	mov	r10, r13
0x53a6:	rol	r10, 0x1e
0x53aa:	mov	rcx, r10
0x53ad:	mov	r10, r13
0x53b0:	xor	rcx, rsi
0x53b3:	rol	r10, 0x19
0x53b7:	xor	rcx, r10
0x53ba:	mov	r10, rbp
0x53bd:	or	r10, r13
0x53c0:	mov	rsi, r10
0x53c3:	mov	r10, rbp
0x53c6:	and	r10, r13
0x53c9:	and	rsi, r12
0x53cc:	or	rsi, r10


0x53cf:	add	rsi, rcx
0x53d2:	lea	r10, [rsi + rax]
0x53d6:	mov	rax, rdi
0x53d9:	mov	rsi, rdi
0x53dc:	ror	rax, 1
0x53df:	ror	rsi, 8
0x53e3:	xor	rsi, rax
0x53e6:	mov	rax, rdi
0x53e9:	shr	rax, 7
0x53ed:	xor	rsi, rax
0x53f0:	add	rsi, r8
0x53f3:	mov	r8, qword ptr [rsp + 0x70]
0x53f8:	add	rsi, qword ptr [rsp + 0x28]
0x53fd:	mov	rcx, r8
0x5400:	mov	rax, r8
0x5403:	ror	rcx, 0x13
0x5407:	rol	rax, 3
0x540b:	xor	rax, rcx
0x540e:	mov	rcx, r8
0x5411:	shr	rcx, 6
0x5415:	xor	rax, rcx
0x5418:	movabs	rcx, 0xc76c51a30654be30
0x5422:	add	rax, rsi
0x5425:	mov	r8, rax
0x5428:	mov	rax, rbx
0x542b:	add	rcx, r8
0x542e:	xor	rax, r11
0x5431:	mov	qword ptr [rsp + 0x48], r8
0x5436:	lea	rdi, [rcx + r9]
0x543a:	mov	r9, rdx
0x543d:	and	rax, rdx
0x5440:	ror	r9, 0xe
0x5444:	xor	rax, rbx
0x5447:	mov	rcx, r9
0x544a:	mov	r9, rdx
0x544d:	add	rdi, rax
0x5450:	ror	r9, 0x12
0x5454:	mov	rax, r9
0x5457:	mov	r9, rdx
0x545a:	xor	rax, rcx
0x545d:	rol	r9, 0x17
0x5461:	xor	rax, r9
0x5464:	mov	r9, r10
0x5467:	ror	r9, 0x1c
0x546b:	add	rax, rdi
0x546e:	mov	rcx, r9
0x5471:	mov	r9, r10
0x5474:	add	r12, rax
0x5477:	rol	r9, 0x1e
0x547b:	mov	rsi, r9
0x547e:	mov	r9, r10
0x5481:	xor	rsi, rcx
0x5484:	rol	r9, 0x19
0x5488:	xor	rsi, r9
0x548b:	mov	r9, r13
0x548e:	or	r9, r10
0x5491:	mov	rcx, r9
0x5494:	mov	r9, r13
0x5497:	and	r9, r10
0x549a:	and	rcx, rbp
0x549d:	or	rcx, r9
0x54a0:	add	rcx, rsi
0x54a3:	lea	r8, [rcx + rax]
0x54a7:	mov	rcx, qword ptr [rsp + 0x20]
0x54ac:	mov	rsi, rcx
0x54af:	mov	r9, rcx
0x54b2:	ror	rsi, 1
0x54b5:	shr	r9, 7
0x54b9:	mov	rax, rsi
0x54bc:	mov	rsi, rcx
0x54bf:	ror	rsi, 8
0x54c3:	xor	rsi, rax
0x54c6:	xor	rsi, r9
0x54c9:	mov	r9, qword ptr [rsp + 0x10]
0x54ce:	add	rsi, qword ptr [rsp + 0x18]
0x54d3:	add	rsi, qword ptr [rsp + 0x30]
0x54d8:	mov	rax, r9
0x54db:	ror	rax, 0x13
0x54df:	mov	rcx, rax
0x54e2:	mov	rax, r9
0x54e5:	shr	r9, 6
0x54e9:	rol	rax, 3
0x54ed:	xor	rax, rcx
0x54f0:	movabs	rcx, 0xd192e819d6ef5218
0x54fa:	xor	rax, r9
0x54fd:	mov	r9, r10
0x5500:	lea	rdi, [rsi + rax]
0x5504:	mov	rax, r11
0x5507:	xor	rax, rdx
0x550a:	add	rcx, rdi
0x550d:	and	rax, r12
0x5510:	mov	qword ptr [rsp + 0x78], rdi
0x5515:	lea	rsi, [rcx + rbx]
0x5519:	xor	rax, r11
0x551c:	mov	rbx, qword ptr [rsp + 0x58]
0x5521:	add	rsi, rax
0x5524:	mov	rax, r12
0x5527:	ror	rax, 0xe
0x552b:	mov	rdi, rbx


0x552e:	mov	rcx, rax
0x5531:	mov	rax, r12
0x5534:	ror	rax, 0x12
0x5538:	xor	rax, rcx
0x553b:	mov	rcx, r12
0x553e:	rol	rcx, 0x17
0x5542:	xor	rax, rcx
0x5545:	mov	rcx, r8
0x5548:	add	rax, rsi
0x554b:	mov	rsi, r8
0x554e:	rol	rcx, 0x1e
0x5552:	ror	rsi, 0x1c
0x5556:	add	rbp, rax
0x5559:	xor	rcx, rsi
0x555c:	mov	rsi, r8
0x555f:	rol	rsi, 0x19
0x5563:	and	r9, r8
0x5566:	ror	rdi, 8
0x556a:	xor	rcx, rsi
0x556d:	mov	rsi, r10
0x5570:	or	rsi, r8
0x5573:	and	rsi, r13
0x5576:	or	rsi, r9
0x5579:	add	rsi, rcx
0x557c:	mov	rcx, rdi
0x557f:	mov	rdi, qword ptr [rsp + 0x48]
0x5584:	lea	r9, [rsi + rax]
0x5588:	mov	rax, rbx
0x558b:	ror	rax, 1
0x558e:	xor	rcx, rax
0x5591:	mov	rax, rbx
0x5594:	mov	rsi, rdi
0x5597:	shr	rax, 7
0x559b:	ror	rsi, 0x13
0x559f:	xor	rcx, rax
0x55a2:	mov	rax, rdi
0x55a5:	add	rcx, qword ptr [rsp + 0x20]
0x55aa:	add	rcx, qword ptr [rsp + 0x68]
0x55af:	rol	rax, 3
0x55b3:	xor	rax, rsi
0x55b6:	mov	rsi, rdi
0x55b9:	shr	rsi, 6
0x55bd:	xor	rax, rsi
0x55c0:	add	rax, rcx
0x55c3:	movabs	rcx, 0xd69906245565a910
0x55cd:	mov	rsi, rax
0x55d0:	mov	rax, rdx
0x55d3:	xor	rax, r12
0x55d6:	add	rcx, rsi
0x55d9:	mov	qword ptr [rsp + 0x58], rsi
0x55de:	and	rax, rbp
0x55e1:	add	rcx, r11
0x55e4:	mov	r11, rbp
0x55e7:	xor	rax, rdx
0x55ea:	rol	r11, 0x17
0x55ee:	add	rcx, rax
0x55f1:	mov	rax, rbp
0x55f4:	ror	rax, 0xe
0x55f8:	mov	rsi, rax
0x55fb:	mov	rax, rbp
0x55fe:	ror	rax, 0x12
0x5602:	xor	rax, rsi
0x5605:	xor	rax, r11
0x5608:	mov	r11, r9
0x560b:	add	rax, rcx
0x560e:	mov	rcx, r9
0x5611:	add	r13, rax
0x5614:	rol	r11, 0x1e
0x5618:	ror	rcx, 0x1c
0x561c:	mov	rdi, r11
0x561f:	mov	r11, r8
0x5622:	xor	rdi, rcx
0x5625:	mov	rcx, r9
0x5628:	and	r11, r9
0x562b:	rol	rcx, 0x19
0x562f:	xor	rdi, rcx
0x5632:	mov	rcx, r8
0x5635:	or	rcx, r9
0x5638:	and	rcx, r10
0x563b:	or	rcx, r11
0x563e:	mov	r11, qword ptr [rsp + 0x50]
0x5643:	add	rdi, rcx
0x5646:	add	rdi, rax
0x5649:	mov	rcx, r11
0x564c:	mov	rax, r11
0x564f:	ror	rcx, 1
0x5652:	ror	rax, 8
0x5656:	xor	rax, rcx
0x5659:	mov	rcx, r11
0x565c:	shr	rcx, 7
0x5660:	xor	rax, rcx
0x5663:	add	rax, rbx
0x5666:	mov	rbx, qword ptr [rsp + 0x78]
0x566b:	add	rax, qword ptr [rsp + 0x38]
0x5670:	mov	rsi, rbx
0x5673:	mov	rcx, rbx
0x5676:	shr	rbx, 6
0x567a:	ror	rsi, 0x13
0x567e:	rol	rcx, 3


0x5682:	xor	rcx, rsi
0x5685:	mov	rsi, r9
0x5688:	xor	rcx, rbx
0x568b:	add	rax, rcx
0x568e:	movabs	rcx, 0xf40e35855771202a
0x5698:	mov	rbx, rax
0x569b:	mov	rax, r12
0x569e:	xor	rax, rbp
0x56a1:	add	rcx, rbx
0x56a4:	mov	qword ptr [rsp + 0xc8], rbx
0x56ac:	and	rax, r13
0x56af:	add	rdx, rcx
0x56b2:	xor	rax, r12
0x56b5:	add	rdx, rax
0x56b8:	mov	rax, r13
0x56bb:	ror	rax, 0xe
0x56bf:	mov	rcx, rax
0x56c2:	mov	rax, r13
0x56c5:	ror	rax, 0x12
0x56c9:	and	rsi, rdi
0x56cc:	xor	rax, rcx
0x56cf:	mov	rcx, r13
0x56d2:	rol	rcx, 0x17
0x56d6:	xor	rax, rcx
0x56d9:	add	rax, rdx
0x56dc:	mov	rdx, rdi
0x56df:	ror	rdx, 0x1c
0x56e3:	add	r10, rax
0x56e6:	mov	rcx, rdx
0x56e9:	mov	rdx, rdi
0x56ec:	rol	rdx, 0x1e
0x56f0:	xor	rdx, rcx
0x56f3:	mov	rcx, rdi
0x56f6:	rol	rcx, 0x19
0x56fa:	xor	rdx, rcx
0x56fd:	mov	rcx, r9
0x5700:	or	rcx, rdi
0x5703:	and	rcx, r8
0x5706:	or	rcx, rsi
0x5709:	add	rdx, rcx
0x570c:	add	rdx, rax
0x570f:	mov	rax, r15
0x5712:	ror	rax, 1
0x5715:	mov	rcx, rax
0x5718:	mov	rax, r15
0x571b:	ror	rax, 8
0x571f:	xor	rax, rcx
0x5722:	mov	rcx, r15
0x5725:	shr	rcx, 7
0x5729:	xor	rax, rcx
0x572c:	add	rax, r11
0x572f:	mov	r11, qword ptr [rsp + 0x58]
0x5734:	add	rax, qword ptr [rsp]
0x5738:	mov	rcx, r11
0x573b:	ror	rcx, 0x13
0x573f:	mov	rsi, rcx
0x5742:	mov	rcx, r11
0x5745:	shr	r11, 6
0x5749:	rol	rcx, 3
0x574d:	xor	rcx, rsi
0x5750:	xor	rcx, r11
0x5753:	add	rax, rcx
0x5756:	movabs	rcx, 0x106aa07032bbd1b8
0x5760:	mov	r11, rax
0x5763:	mov	rax, rbp
0x5766:	xor	rax, r13
0x5769:	mov	qword ptr [rsp + 0x50], r11
0x576e:	and	rax, r10
0x5771:	xor	rax, rbp
0x5774:	add	rcx, r11
0x5777:	mov	r11, rdi
0x577a:	add	r12, rcx
0x577d:	mov	rcx, r10
0x5780:	and	r11, rdx
0x5783:	add	r12, rax
0x5786:	mov	rax, r10
0x5789:	ror	rcx, 0xe
0x578d:	ror	rax, 0x12
0x5791:	xor	rax, rcx
0x5794:	mov	rcx, r10
0x5797:	rol	rcx, 0x17
0x579b:	xor	rax, rcx
0x579e:	mov	rcx, rdx
0x57a1:	ror	rcx, 0x1c
0x57a5:	add	rax, r12
0x57a8:	mov	rsi, rcx
0x57ab:	mov	rcx, rdx
0x57ae:	add	r8, rax
0x57b1:	rol	rcx, 0x1e
0x57b5:	xor	rcx, rsi
0x57b8:	mov	rsi, rdx
0x57bb:	rol	rsi, 0x19
0x57bf:	xor	rcx, rsi
0x57c2:	mov	rsi, rdi
0x57c5:	or	rsi, rdx
0x57c8:	and	rsi, r9
0x57cb:	or	rsi, r11
0x57ce:	mov	r11, rbx
0x57d1:	add	rcx, rsi


0x57d4:	ror	r11, 0x13
0x57d8:	add	rcx, rax
0x57db:	mov	rax, r14
0x57de:	ror	rax, 1
0x57e1:	mov	rsi, rax
0x57e4:	mov	rax, r14
0x57e7:	ror	rax, 8
0x57eb:	xor	rax, rsi
0x57ee:	mov	rsi, r14
0x57f1:	shr	rsi, 7
0x57f5:	xor	rax, rsi
0x57f8:	mov	rsi, rbx
0x57fb:	add	rax, r15
0x57fe:	rol	rsi, 3
0x5802:	add	rax, qword ptr [rsp + 0x70]
0x5807:	xor	rsi, r11
0x580a:	mov	r11, rbx
0x580d:	mov	r12, qword ptr [rsp + 0x60]
0x5812:	shr	r11, 6
0x5816:	xor	rsi, r11
0x5819:	lea	r15, [rax + rsi]
0x581d:	mov	rax, r13
0x5820:	movabs	rsi, 0x19a4c116b8d2d0c8
0x582a:	xor	rax, r10
0x582d:	add	rsi, r15
0x5830:	and	rax, r8
0x5833:	xor	rax, r13
0x5836:	add	rbp, rsi
0x5839:	add	rbp, rax
0x583c:	mov	rax, r8
0x583f:	ror	rax, 0xe
0x5843:	mov	rsi, rax
0x5846:	mov	rax, r8
0x5849:	ror	rax, 0x12
0x584d:	xor	rax, rsi
0x5850:	mov	rsi, r8
0x5853:	rol	rsi, 0x17
0x5857:	xor	rax, rsi
0x585a:	mov	rsi, rcx
0x585d:	ror	rsi, 0x1c
0x5861:	add	rax, rbp
0x5864:	mov	rbp, rcx
0x5867:	mov	r11, rsi
0x586a:	mov	rsi, rcx
0x586d:	rol	rbp, 0x19
0x5871:	rol	rsi, 0x1e
0x5875:	add	r9, rax
0x5878:	xor	rsi, r11
0x587b:	xor	rsi, rbp
0x587e:	mov	rbp, rdx
0x5881:	or	rbp, rcx
0x5884:	mov	r11, rbp
0x5887:	mov	rbp, rdx
0x588a:	and	rbp, rcx
0x588d:	and	r11, rdi
0x5890:	or	r11, rbp
0x5893:	mov	rbp, qword ptr [rsp + 0x50]
0x5898:	add	rsi, r11
0x589b:	mov	r11, r12
0x589e:	add	rsi, rax
0x58a1:	mov	rax, r12
0x58a4:	ror	r11, 1
0x58a7:	ror	rax, 8
0x58ab:	mov	rbx, rbp
0x58ae:	xor	rax, r11
0x58b1:	mov	r11, r12
0x58b4:	shr	r11, 7
0x58b8:	xor	rax, r11
0x58bb:	mov	r11, rbp
0x58be:	add	rax, r14
0x58c1:	add	rax, qword ptr [rsp + 0x10]
0x58c6:	ror	rbx, 0x13
0x58ca:	rol	r11, 3
0x58ce:	mov	r14, qword ptr [rsp + 0x40]
0x58d3:	xor	r11, rbx
0x58d6:	mov	rbx, rbp
0x58d9:	shr	rbx, 6
0x58dd:	xor	r11, rbx
0x58e0:	add	rax, r11
0x58e3:	movabs	r11, 0x1e376c085141ab53
0x58ed:	mov	rbx, rax
0x58f0:	mov	rax, r10
0x58f3:	xor	rax, r8
0x58f6:	add	r11, rbx
0x58f9:	mov	qword ptr [rsp + 0x60], rbx
0x58fe:	and	rax, r9
0x5901:	add	r13, r11
0x5904:	xor	rax, r10
0x5907:	add	r13, rax
0x590a:	mov	rax, r9
0x590d:	ror	rax, 0xe
0x5911:	mov	r11, rax
0x5914:	mov	rax, r9
0x5917:	ror	rax, 0x12
0x591b:	xor	rax, r11
0x591e:	mov	r11, r9
0x5921:	rol	r11, 0x17
0x5925:	xor	rax, r11
0x5928:	mov	r11, rsi


0x592b:	add	rax, r13
0x592e:	mov	r13, rsi
0x5931:	rol	r11, 0x1e
0x5935:	ror	r13, 0x1c
0x5939:	add	rdi, rax
0x593c:	xor	r11, r13
0x593f:	mov	r13, rsi
0x5942:	rol	r13, 0x19
0x5946:	xor	r11, r13
0x5949:	mov	r13, rcx
0x594c:	or	r13, rsi
0x594f:	mov	rbx, r13
0x5952:	mov	r13, rcx
0x5955:	and	r13, rsi
0x5958:	and	rbx, rdx
0x595b:	or	rbx, r13
0x595e:	mov	r13, r15
0x5961:	add	rbx, r11
0x5964:	mov	r11, r14
0x5967:	add	rbx, rax
0x596a:	mov	rax, r14
0x596d:	ror	r11, 1
0x5970:	ror	rax, 8
0x5974:	ror	r13, 0x13
0x5978:	xor	rax, r11
0x597b:	mov	r11, r14
0x597e:	mov	rbp, r13
0x5981:	shr	r11, 7
0x5985:	mov	r13, r15
0x5988:	xor	rax, r11
0x598b:	rol	r13, 3
0x598f:	add	rax, r12
0x5992:	add	rax, qword ptr [rsp + 0x48]
0x5997:	mov	r11, r13
0x599a:	mov	r13, r15
0x599d:	xor	r11, rbp
0x59a0:	mov	rbp, rsi
0x59a3:	shr	r13, 6
0x59a7:	mov	r12, qword ptr [rsp + 0x28]
0x59ac:	xor	r11, r13
0x59af:	add	rax, r11
0x59b2:	movabs	r11, 0x2748774cdf8eeb99
0x59bc:	mov	r13, rax
0x59bf:	mov	rax, r8
0x59c2:	xor	rax, r9
0x59c5:	add	r11, r13
0x59c8:	mov	qword ptr [rsp + 0x40], r13
0x59cd:	and	rax, rdi
0x59d0:	add	r10, r11
0x59d3:	mov	r13, qword ptr [rsp + 0x60]
0x59d8:	xor	rax, r8
0x59db:	add	r10, rax
0x59de:	mov	rax, rdi
0x59e1:	ror	rax, 0xe
0x59e5:	mov	r11, rax
0x59e8:	mov	rax, rdi
0x59eb:	ror	rax, 0x12
0x59ef:	xor	rax, r11
0x59f2:	mov	r11, rdi
0x59f5:	rol	r11, 0x17
0x59f9:	xor	rax, r11
0x59fc:	add	rax, r10
0x59ff:	mov	r10, rbx
0x5a02:	ror	r10, 0x1c
0x5a06:	add	rdx, rax
0x5a09:	mov	r11, r10
0x5a0c:	mov	r10, rbx
0x5a0f:	rol	r10, 0x1e
0x5a13:	xor	r10, r11
0x5a16:	mov	r11, rbx
0x5a19:	rol	r11, 0x19
0x5a1d:	xor	r10, r11
0x5a20:	mov	r11, rsi
0x5a23:	or	r11, rbx
0x5a26:	and	r11, rcx
0x5a29:	and	rbp, rbx
0x5a2c:	or	r11, rbp
0x5a2f:	mov	rbp, r13
0x5a32:	add	r10, r11
0x5a35:	mov	r11, r12
0x5a38:	ror	rbp, 0x13
0x5a3c:	add	r10, rax
0x5a3f:	mov	rax, r12
0x5a42:	ror	r11, 1
0x5a45:	ror	rax, 8
0x5a49:	xor	rax, r11
0x5a4c:	mov	r11, r12
0x5a4f:	shr	r11, 7
0x5a53:	xor	rax, r11
0x5a56:	mov	r11, r13
0x5a59:	add	rax, r14
0x5a5c:	rol	r11, 3
0x5a60:	add	rax, qword ptr [rsp + 0x78]
0x5a65:	xor	r11, rbp
0x5a68:	mov	rbp, r13
0x5a6b:	mov	r14, qword ptr [rsp + 0x30]
0x5a70:	shr	rbp, 6
0x5a74:	xor	r11, rbp
0x5a77:	mov	rbp, rbx


0x5a7a:	add	rax, r11
0x5a7d:	movabs	r11, 0x34b0bcb5e19b48a8
0x5a87:	mov	r13, rax
0x5a8a:	mov	rax, r9
0x5a8d:	xor	rax, rdi
0x5a90:	add	r11, r13
0x5a93:	and	rax, rdx
0x5a96:	add	r8, r11
0x5a99:	xor	rax, r9
0x5a9c:	add	r8, rax
0x5a9f:	mov	rax, rdx
0x5aa2:	ror	rax, 0xe
0x5aa6:	mov	r11, rax
0x5aa9:	mov	rax, rdx
0x5aac:	ror	rax, 0x12
0x5ab0:	xor	rax, r11
0x5ab3:	mov	r11, rdx
0x5ab6:	rol	r11, 0x17
0x5aba:	xor	rax, r11
0x5abd:	add	rax, r8
0x5ac0:	mov	r8, r10
0x5ac3:	ror	r8, 0x1c
0x5ac7:	add	rcx, rax
0x5aca:	mov	r11, r8
0x5acd:	mov	r8, r10
0x5ad0:	rol	r8, 0x1e
0x5ad4:	xor	r8, r11
0x5ad7:	mov	r11, r10
0x5ada:	and	rbp, r10
0x5add:	rol	r11, 0x19
0x5ae1:	xor	r8, r11
0x5ae4:	mov	r11, rbx
0x5ae7:	or	r11, r10
0x5aea:	and	r11, rsi
0x5aed:	or	r11, rbp
0x5af0:	add	r8, r11
0x5af3:	mov	r11, r14
0x5af6:	add	r8, rax
0x5af9:	mov	rax, r14
0x5afc:	ror	r11, 8
0x5b00:	ror	rax, 1
0x5b03:	xor	r11, rax
0x5b06:	mov	rax, r14
0x5b09:	shr	rax, 7
0x5b0d:	xor	r11, rax
0x5b10:	mov	rax, qword ptr [rsp + 0x40]
0x5b15:	add	r11, r12
0x5b18:	add	r11, qword ptr [rsp + 0x58]
0x5b1d:	mov	r12, rax
0x5b20:	ror	r12, 0x13
0x5b24:	mov	rbp, r12
0x5b27:	mov	r12, rax
0x5b2a:	rol	rax, 3
0x5b2e:	xor	rax, rbp
0x5b31:	shr	r12, 6
0x5b35:	mov	rbp, r10
0x5b38:	xor	rax, r12
0x5b3b:	add	rax, r11
0x5b3e:	movabs	r11, 0x391c0cb3c5c95a63
0x5b48:	mov	r12, rax
0x5b4b:	mov	rax, rdi
0x5b4e:	xor	rax, rdx
0x5b51:	add	r11, r12
0x5b54:	mov	qword ptr [rsp + 0x80], r12
0x5b5c:	and	rax, rcx
0x5b5f:	add	r9, r11
0x5b62:	mov	r12, qword ptr [rsp + 0x68]
0x5b67:	xor	rax, rdi
0x5b6a:	add	r9, rax
0x5b6d:	mov	rax, rcx
0x5b70:	ror	rax, 0xe
0x5b74:	mov	r11, rax
0x5b77:	mov	rax, rcx
0x5b7a:	ror	rax, 0x12
0x5b7e:	xor	rax, r11
0x5b81:	mov	r11, rcx
0x5b84:	rol	r11, 0x17
0x5b88:	xor	rax, r11
0x5b8b:	and	rbp, r8
0x5b8e:	add	rax, r9
0x5b91:	mov	r9, r8
0x5b94:	ror	r9, 0x1c
0x5b98:	add	rsi, rax
0x5b9b:	mov	r11, r9
0x5b9e:	mov	r9, r8
0x5ba1:	rol	r9, 0x1e
0x5ba5:	xor	r9, r11
0x5ba8:	mov	r11, r8
0x5bab:	rol	r11, 0x19
0x5baf:	xor	r9, r11
0x5bb2:	mov	r11, r10
0x5bb5:	or	r11, r8
0x5bb8:	and	r11, rbx
0x5bbb:	or	r11, rbp
0x5bbe:	add	r9, r11
0x5bc1:	mov	r11, r12
0x5bc4:	add	r9, rax
0x5bc7:	mov	rax, r12
0x5bca:	ror	r11, 8


0x5bce:	ror	rax, 1
0x5bd1:	xor	r11, rax
0x5bd4:	mov	rax, r12
0x5bd7:	shr	rax, 7
0x5bdb:	xor	r11, rax
0x5bde:	mov	rax, r13
0x5be1:	ror	r13, 0x13
0x5be5:	add	r11, r14
0x5be8:	add	r11, qword ptr [rsp + 0xc8]
0x5bf0:	mov	rbp, r13
0x5bf3:	mov	r13, rax
0x5bf6:	rol	rax, 3
0x5bfa:	mov	r14, qword ptr [rsp + 0x38]
0x5bff:	xor	rax, rbp
0x5c02:	mov	qword ptr [rsp + 0x68], r13
0x5c07:	shr	r13, 6
0x5c0b:	xor	rax, r13
0x5c0e:	mov	rbp, r8
0x5c11:	add	rax, r11
0x5c14:	movabs	r11, 0x4ed8aa4ae3418acb
0x5c1e:	mov	r13, rax
0x5c21:	mov	rax, rdx
0x5c24:	xor	rax, rcx
0x5c27:	add	r11, r13
0x5c2a:	and	rax, rsi
0x5c2d:	add	rdi, r11
0x5c30:	xor	rax, rdx
0x5c33:	add	rdi, rax
0x5c36:	mov	rax, rsi
0x5c39:	and	rbp, r9
0x5c3c:	ror	rax, 0xe
0x5c40:	mov	r11, rax
0x5c43:	mov	rax, rsi
0x5c46:	ror	rax, 0x12
0x5c4a:	xor	rax, r11
0x5c4d:	mov	r11, rsi
0x5c50:	rol	r11, 0x17
0x5c54:	xor	rax, r11
0x5c57:	add	rax, rdi
0x5c5a:	mov	rdi, r9
0x5c5d:	ror	rdi, 0x1c
0x5c61:	add	rbx, rax
0x5c64:	mov	r11, rdi
0x5c67:	mov	rdi, r9
0x5c6a:	rol	rdi, 0x1e
0x5c6e:	xor	rdi, r11
0x5c71:	mov	r11, r9
0x5c74:	rol	r11, 0x19
0x5c78:	xor	rdi, r11
0x5c7b:	mov	r11, r8
0x5c7e:	or	r11, r9
0x5c81:	and	r11, r10
0x5c84:	or	r11, rbp
0x5c87:	add	rdi, r11
0x5c8a:	mov	r11, r14
0x5c8d:	add	rdi, rax
0x5c90:	mov	rax, r14
0x5c93:	ror	r11, 1
0x5c96:	ror	rax, 8
0x5c9a:	xor	rax, r11
0x5c9d:	mov	r11, r14
0x5ca0:	shr	r11, 7
0x5ca4:	xor	rax, r11
0x5ca7:	mov	r11, qword ptr [rsp + 0x80]
0x5caf:	add	rax, r12
0x5cb2:	add	rax, qword ptr [rsp + 0x50]
0x5cb7:	mov	r12, r11
0x5cba:	ror	r12, 0x13
0x5cbe:	mov	rbp, r12
0x5cc1:	mov	r12, r11
0x5cc4:	rol	r11, 3
0x5cc8:	xor	r11, rbp
0x5ccb:	shr	r12, 6
0x5ccf:	xor	r11, r12
0x5cd2:	mov	r12, r9
0x5cd5:	add	rax, r11
0x5cd8:	movabs	r11, 0x5b9cca4f7763e373
0x5ce2:	mov	rbp, rax
0x5ce5:	mov	rax, rcx
0x5ce8:	xor	rax, rsi
0x5ceb:	add	r11, rbp
0x5cee:	and	r12, rdi
0x5cf1:	and	rax, rbx
0x5cf4:	add	rdx, r11
0x5cf7:	mov	r11, rbx
0x5cfa:	xor	rax, rcx
0x5cfd:	ror	r11, 0xe
0x5d01:	mov	qword ptr [rsp + 8], rbp
0x5d06:	add	rdx, rax
0x5d09:	mov	rax, rbx
0x5d0c:	mov	rbp, qword ptr [rsp]
0x5d10:	ror	rax, 0x12
0x5d14:	xor	rax, r11
0x5d17:	mov	r11, rbx
0x5d1a:	rol	r11, 0x17
0x5d1e:	xor	rax, r11
0x5d21:	add	rax, rdx
0x5d24:	mov	rdx, rdi
0x5d27:	ror	rdx, 0x1c


0x5d2b:	add	r10, rax
0x5d2e:	mov	r11, rdx
0x5d31:	mov	rdx, rdi
0x5d34:	rol	rdx, 0x1e
0x5d38:	xor	rdx, r11
0x5d3b:	mov	r11, rdi
0x5d3e:	rol	r11, 0x19
0x5d42:	xor	rdx, r11
0x5d45:	mov	r11, r9
0x5d48:	or	r11, rdi
0x5d4b:	and	r11, r8
0x5d4e:	or	r11, r12
0x5d51:	add	rdx, r11
0x5d54:	mov	r11, rbp
0x5d57:	add	rdx, rax
0x5d5a:	mov	rax, rbp
0x5d5d:	ror	r11, 1
0x5d60:	ror	rax, 8
0x5d64:	xor	rax, r11
0x5d67:	mov	r11, rbp
0x5d6a:	mov	rbp, qword ptr [rsp + 8]
0x5d6f:	shr	r11, 7
0x5d73:	xor	rax, r11
0x5d76:	mov	r11, r13
0x5d79:	add	rax, r14
0x5d7c:	ror	r11, 0x13
0x5d80:	mov	r14, r13
0x5d83:	add	rax, r15
0x5d86:	rol	r13, 3
0x5d8a:	mov	qword ptr [rsp + 0x38], r14
0x5d8f:	xor	r13, r11
0x5d92:	mov	r11, r14
0x5d95:	mov	r14, rdi
0x5d98:	shr	r11, 6
0x5d9c:	and	r14, rdx
0x5d9f:	xor	r13, r11
0x5da2:	movabs	r11, 0x682e6ff3d6b2b8a3
0x5dac:	add	rax, r13
0x5daf:	mov	r13, rax
0x5db2:	mov	rax, rsi
0x5db5:	xor	rax, rbx
0x5db8:	add	r11, r13
0x5dbb:	and	rax, r10
0x5dbe:	add	rcx, r11
0x5dc1:	xor	rax, rsi
0x5dc4:	add	rcx, rax
0x5dc7:	mov	rax, r10
0x5dca:	ror	rax, 0xe
0x5dce:	mov	r11, rax
0x5dd1:	mov	rax, r10
0x5dd4:	ror	rax, 0x12
0x5dd8:	xor	rax, r11
0x5ddb:	mov	r11, r10
0x5dde:	rol	r11, 0x17
0x5de2:	xor	rax, r11
0x5de5:	add	rax, rcx
0x5de8:	mov	rcx, rdx
0x5deb:	ror	rcx, 0x1c
0x5def:	add	r8, rax
0x5df2:	mov	r11, rcx
0x5df5:	mov	rcx, rdx
0x5df8:	rol	rcx, 0x1e
0x5dfc:	xor	rcx, r11
0x5dff:	mov	r11, rdx
0x5e02:	rol	r11, 0x19
0x5e06:	xor	rcx, r11
0x5e09:	mov	r11, rdi
0x5e0c:	or	r11, rdx
0x5e0f:	and	r11, r9
0x5e12:	or	r11, r14
0x5e15:	mov	r14, qword ptr [rsp + 0x70]
0x5e1a:	mov	qword ptr [rsp + 0x70], r13
0x5e1f:	add	r11, rcx
0x5e22:	lea	r12, [r11 + rax]
0x5e26:	mov	r11, rbp
0x5e29:	mov	rcx, r14
0x5e2c:	mov	rax, r14
0x5e2f:	ror	rcx, 1
0x5e32:	ror	rax, 8
0x5e36:	xor	rax, rcx
0x5e39:	mov	rcx, r14
0x5e3c:	shr	rcx, 7
0x5e40:	xor	rax, rcx
0x5e43:	add	rax, qword ptr [rsp]
0x5e47:	mov	rcx, qword ptr [rsp + 0x60]
0x5e4c:	ror	r11, 0x13
0x5e50:	add	rcx, rax
0x5e53:	mov	rax, rbp
0x5e56:	rol	rax, 3
0x5e5a:	xor	rax, r11
0x5e5d:	mov	r11, rbp
0x5e60:	mov	rbp, qword ptr [rsp + 0x10]
0x5e65:	shr	r11, 6
0x5e69:	xor	rax, r11
0x5e6c:	add	rax, rcx
0x5e6f:	movabs	rcx, 0x748f82ee5defb2fc
0x5e79:	mov	r11, rax
0x5e7c:	mov	rax, rbx
0x5e7f:	xor	rax, r10


0x5e82:	add	rcx, r11
0x5e85:	mov	qword ptr [rsp], r11
0x5e89:	and	rax, r8
0x5e8c:	add	rsi, rcx
0x5e8f:	mov	rcx, r8
0x5e92:	xor	rax, rbx
0x5e95:	ror	rcx, 0x12
0x5e99:	mov	r11, rdx
0x5e9c:	add	rsi, rax
0x5e9f:	mov	rax, r8
0x5ea2:	and	r11, r12
0x5ea5:	ror	rax, 0xe
0x5ea9:	xor	rcx, rax
0x5eac:	mov	rax, r8
0x5eaf:	rol	rax, 0x17
0x5eb3:	xor	rax, rcx
0x5eb6:	add	rax, rsi
0x5eb9:	mov	rsi, r12
0x5ebc:	ror	rsi, 0x1c
0x5ec0:	add	r9, rax
0x5ec3:	mov	rcx, rsi
0x5ec6:	mov	rsi, r12
0x5ec9:	rol	rsi, 0x1e
0x5ecd:	xor	rsi, rcx
0x5ed0:	mov	rcx, r12
0x5ed3:	rol	rcx, 0x19
0x5ed7:	xor	rsi, rcx
0x5eda:	mov	rcx, rdx
0x5edd:	or	rcx, r12
0x5ee0:	and	rcx, rdi
0x5ee3:	or	rcx, r11
0x5ee6:	mov	r11, r13
0x5ee9:	add	rcx, rsi
0x5eec:	mov	rsi, rbp
0x5eef:	add	rcx, rax
0x5ef2:	mov	rax, rbp
0x5ef5:	ror	rsi, 1
0x5ef8:	ror	rax, 8
0x5efc:	ror	r11, 0x13
0x5f00:	xor	rax, rsi
0x5f03:	mov	rsi, rbp
0x5f06:	shr	rsi, 7
0x5f0a:	xor	rax, rsi
0x5f0d:	mov	rsi, qword ptr [rsp + 0x40]
0x5f12:	add	rax, r14
0x5f15:	mov	r14, rcx
0x5f18:	rol	r14, 0x19
0x5f1c:	add	rsi, rax
0x5f1f:	mov	rax, r13
0x5f22:	rol	rax, 3
0x5f26:	xor	rax, r11
0x5f29:	mov	r11, r13
0x5f2c:	shr	r11, 6
0x5f30:	xor	rax, r11
0x5f33:	add	rsi, rax
0x5f36:	mov	r13, rsi
0x5f39:	mov	rsi, r10
0x5f3c:	xor	rsi, r8
0x5f3f:	mov	qword ptr [rsp + 0x10], r13
0x5f44:	mov	rax, rsi
0x5f47:	movabs	rsi, 0x78a5636f43172f60
0x5f51:	add	rsi, r13
0x5f54:	and	rax, r9
0x5f57:	add	rbx, rsi
0x5f5a:	mov	rsi, r9
0x5f5d:	xor	rax, r10
0x5f60:	ror	rsi, 0xe
0x5f64:	add	rbx, rax
0x5f67:	mov	rax, rsi
0x5f6a:	mov	rsi, r9
0x5f6d:	ror	rsi, 0x12
0x5f71:	mov	r11, rsi
0x5f74:	mov	rsi, r9
0x5f77:	rol	rsi, 0x17
0x5f7b:	xor	r11, rax
0x5f7e:	mov	rax, rsi
0x5f81:	mov	rsi, rcx
0x5f84:	ror	rsi, 0x1c
0x5f88:	xor	rax, r11
0x5f8b:	mov	r11, rsi
0x5f8e:	mov	rsi, rcx
0x5f91:	add	rax, rbx
0x5f94:	rol	rsi, 0x1e
0x5f98:	add	rdi, rax
0x5f9b:	mov	rbx, r12
0x5f9e:	xor	rsi, r11
0x5fa1:	xor	rsi, r14
0x5fa4:	mov	r14, r12
0x5fa7:	or	r14, rcx
0x5faa:	and	rbx, rcx
0x5fad:	mov	r11, r14
0x5fb0:	mov	r14, qword ptr [rsp + 0x48]
0x5fb5:	mov	r13, qword ptr [rsp + 0x78]
0x5fba:	and	r11, rdx
0x5fbd:	or	r11, rbx
0x5fc0:	add	r11, rsi
0x5fc3:	mov	rsi, r14
0x5fc6:	add	r11, rax
0x5fc9:	mov	rax, r14


0x5fcc:	ror	rsi, 1
0x5fcf:	ror	rax, 8
0x5fd3:	xor	rax, rsi
0x5fd6:	mov	rsi, r14
0x5fd9:	shr	rsi, 7
0x5fdd:	xor	rax, rsi
0x5fe0:	mov	rsi, qword ptr [rsp + 0x68]
0x5fe5:	add	rax, rbp
0x5fe8:	mov	rbp, qword ptr [rsp]
0x5fec:	add	rsi, rax
0x5fef:	mov	rbx, rbp
0x5ff2:	mov	rax, rbp
0x5ff5:	ror	rbx, 0x13
0x5ff9:	rol	rax, 3
0x5ffd:	xor	rax, rbx
0x6000:	mov	rbx, rbp
0x6003:	mov	rbp, rcx
0x6006:	shr	rbx, 6
0x600a:	xor	rax, rbx
0x600d:	movabs	rbx, 0x84c87814a1f0ab72
0x6017:	add	rsi, rax
0x601a:	mov	rax, r8
0x601d:	xor	rax, r9
0x6020:	add	rbx, rsi
0x6023:	mov	qword ptr [rsp + 0x18], rsi
0x6028:	and	rax, rdi
0x602b:	add	r10, rbx
0x602e:	xor	rax, r8
0x6031:	lea	rsi, [rax + r10]
0x6035:	mov	r10, rdi
0x6038:	ror	r10, 0xe
0x603c:	mov	rax, r10
0x603f:	mov	r10, rdi
0x6042:	ror	r10, 0x12
0x6046:	xor	r10, rax
0x6049:	mov	rax, rdi
0x604c:	rol	rax, 0x17
0x6050:	xor	rax, r10
0x6053:	mov	r10, r11
0x6056:	add	rax, rsi
0x6059:	mov	rsi, r11
0x605c:	ror	r10, 0x1c
0x6060:	add	rdx, rax
0x6063:	rol	rsi, 0x1e
0x6067:	and	rbp, r11
0x606a:	xor	rsi, r10
0x606d:	mov	r10, r11
0x6070:	rol	r10, 0x19
0x6074:	xor	rsi, r10
0x6077:	mov	r10, rcx
0x607a:	or	r10, r11
0x607d:	and	r10, r12
0x6080:	or	r10, rbp
0x6083:	add	r10, rsi
0x6086:	mov	rsi, r13
0x6089:	add	r10, rax
0x608c:	mov	rax, r13
0x608f:	ror	rsi, 1
0x6092:	ror	rax, 8
0x6096:	xor	rax, rsi
0x6099:	mov	rsi, r13
0x609c:	shr	rsi, 7
0x60a0:	xor	rax, rsi
0x60a3:	mov	rsi, qword ptr [rsp + 0x80]
0x60ab:	add	rax, r14
0x60ae:	mov	r14, qword ptr [rsp + 0x10]
0x60b3:	add	rsi, rax
0x60b6:	mov	rbx, r14
0x60b9:	mov	rax, r14
0x60bc:	ror	rbx, 0x13
0x60c0:	rol	rax, 3
0x60c4:	xor	rax, rbx
0x60c7:	mov	rbx, r14
0x60ca:	mov	r14, qword ptr [rsp + 0x58]
0x60cf:	shr	rbx, 6
0x60d3:	xor	rax, rbx
0x60d6:	add	rax, rsi
0x60d9:	mov	rbp, rax
0x60dc:	mov	rax, r9
0x60df:	xor	rax, rdi
0x60e2:	mov	qword ptr [rsp + 0x20], rbp
0x60e7:	mov	rsi, rax
0x60ea:	movabs	rax, 0x8cc702081a6439ec
0x60f4:	add	rax, rbp
0x60f7:	and	rsi, rdx
0x60fa:	add	r8, rax
0x60fd:	mov	rax, rdx
0x6100:	xor	rsi, r9
0x6103:	ror	rax, 0xe
0x6107:	add	r8, rsi
0x610a:	mov	rsi, rax
0x610d:	mov	rax, rdx
0x6110:	ror	rax, 0x12
0x6114:	mov	rbx, rax
0x6117:	mov	rax, rdx
0x611a:	xor	rbx, rsi
0x611d:	rol	rax, 0x17
0x6121:	mov	rsi, rax
0x6124:	mov	rax, r10


0x6127:	ror	rax, 0x1c
0x612b:	xor	rsi, rbx
0x612e:	mov	rbx, rax
0x6131:	mov	rax, r10
0x6134:	add	rsi, r8
0x6137:	rol	rax, 0x1e
0x613b:	lea	r8, [r12 + rsi]
0x613f:	mov	r12, r11
0x6142:	mov	rbp, rax
0x6145:	mov	rax, r10
0x6148:	and	r12, r10
0x614b:	xor	rbp, rbx
0x614e:	rol	rax, 0x19
0x6152:	xor	rbp, rax
0x6155:	mov	rax, r11
0x6158:	or	rax, r10
0x615b:	and	rax, rcx
0x615e:	or	rax, r12
0x6161:	mov	r12, qword ptr [rsp + 0x50]
0x6166:	add	rax, rbp
0x6169:	lea	rbx, [rax + rsi]
0x616d:	mov	rsi, r14
0x6170:	mov	rax, r14
0x6173:	ror	rsi, 1
0x6176:	ror	rax, 8
0x617a:	xor	rax, rsi
0x617d:	mov	rsi, r14
0x6180:	shr	rsi, 7
0x6184:	xor	rax, rsi
0x6187:	add	rax, r13
0x618a:	mov	r13, qword ptr [rsp + 0x18]
0x618f:	add	rax, qword ptr [rsp + 0x38]
0x6194:	mov	rsi, r13
0x6197:	ror	rsi, 0x13
0x619b:	mov	rbp, rsi
0x619e:	mov	rsi, r13
0x61a1:	shr	r13, 6
0x61a5:	rol	rsi, 3
0x61a9:	xor	rsi, rbp
0x61ac:	mov	rbp, qword ptr [rsp + 0xc8]
0x61b4:	xor	rsi, r13
0x61b7:	add	rax, rsi
0x61ba:	movabs	rsi, 0x90befffa23631e28
0x61c4:	mov	r13, rax
0x61c7:	mov	rax, rdi
0x61ca:	xor	rax, rdx
0x61cd:	add	rsi, r13
0x61d0:	mov	qword ptr [rsp + 0x48], r13
0x61d5:	and	rax, r8
0x61d8:	add	r9, rsi
0x61db:	mov	rsi, r8
0x61de:	xor	rax, rdi
0x61e1:	add	r9, rax
0x61e4:	mov	rax, r8
0x61e7:	ror	rax, 0xe
0x61eb:	ror	rsi, 0x12
0x61ef:	mov	r13, rsi
0x61f2:	xor	r13, rax
0x61f5:	mov	rax, r8
0x61f8:	rol	rax, 0x17
0x61fc:	xor	rax, r13
0x61ff:	add	rax, r9
0x6202:	mov	r9, rbx
0x6205:	ror	r9, 0x1c
0x6209:	add	rcx, rax
0x620c:	mov	r13, r9
0x620f:	mov	r9, rbx
0x6212:	rol	r9, 0x1e
0x6216:	mov	rsi, r9
0x6219:	mov	r9, rbx
0x621c:	xor	rsi, r13
0x621f:	rol	r9, 0x19
0x6223:	xor	rsi, r9
0x6226:	mov	r9, r10
0x6229:	or	r9, rbx
0x622c:	mov	r13, r9
0x622f:	mov	r9, r10
0x6232:	and	r9, rbx
0x6235:	and	r13, r11
0x6238:	or	r13, r9
0x623b:	add	r13, rsi
0x623e:	mov	rsi, rbp
0x6241:	add	r13, rax
0x6244:	mov	rax, rbp
0x6247:	ror	rsi, 1
0x624a:	ror	rax, 8
0x624e:	xor	rax, rsi
0x6251:	mov	rsi, rbp
0x6254:	shr	rsi, 7
0x6258:	xor	rax, rsi
0x625b:	add	rax, r14
0x625e:	mov	r14, qword ptr [rsp + 0x20]
0x6263:	add	rax, qword ptr [rsp + 8]
0x6268:	mov	r9, r14
0x626b:	mov	rsi, r14
0x626e:	ror	r9, 0x13
0x6272:	rol	rsi, 3
0x6276:	xor	rsi, r9
0x6279:	mov	r9, r14


0x627c:	shr	r9, 6
0x6280:	xor	rsi, r9
0x6283:	add	rax, rsi
0x6286:	movabs	rsi, 0xa4506cebde82bde9
0x6290:	mov	r9, rax
0x6293:	mov	rax, rdx
0x6296:	xor	rax, r8
0x6299:	mov	qword ptr [rsp + 0x28], r9
0x629e:	and	rax, rcx
0x62a1:	add	rsi, r9
0x62a4:	xor	rax, rdx
0x62a7:	add	rdi, rsi
0x62aa:	mov	rsi, rcx
0x62ad:	add	rdi, rax
0x62b0:	ror	rsi, 0x12
0x62b4:	mov	rax, rcx
0x62b7:	ror	rax, 0xe
0x62bb:	mov	r14, rsi
0x62be:	xor	r14, rax
0x62c1:	mov	rax, rcx
0x62c4:	rol	rax, 0x17
0x62c8:	xor	rax, r14
0x62cb:	add	rax, rdi
0x62ce:	mov	rdi, r13
0x62d1:	ror	rdi, 0x1c
0x62d5:	add	r11, rax
0x62d8:	mov	r14, rdi
0x62db:	mov	rdi, r13
0x62de:	rol	rdi, 0x1e
0x62e2:	mov	rsi, rdi
0x62e5:	mov	rdi, r13
0x62e8:	xor	rsi, r14
0x62eb:	rol	rdi, 0x19
0x62ef:	xor	rsi, rdi
0x62f2:	mov	rdi, rbx
0x62f5:	or	rdi, r13
0x62f8:	mov	r14, rdi
0x62fb:	mov	rdi, rbx
0x62fe:	and	rdi, r13
0x6301:	and	r14, r10
0x6304:	or	r14, rdi
0x6307:	add	r14, rsi
0x630a:	mov	rsi, r12
0x630d:	add	r14, rax
0x6310:	mov	rax, r12
0x6313:	ror	rsi, 1
0x6316:	ror	rax, 8
0x631a:	xor	rax, rsi
0x631d:	mov	rsi, r12
0x6320:	shr	rsi, 7
0x6324:	xor	rax, rsi
0x6327:	add	rax, rbp
0x632a:	mov	rbp, qword ptr [rsp + 0x48]
0x632f:	add	rax, qword ptr [rsp + 0x70]
0x6334:	mov	rdi, rbp
0x6337:	mov	rsi, rbp
0x633a:	ror	rdi, 0x13
0x633e:	rol	rsi, 3
0x6342:	xor	rsi, rdi
0x6345:	mov	rdi, rbp
0x6348:	shr	rdi, 6
0x634c:	xor	rsi, rdi
0x634f:	movabs	rdi, 0xbef9a3f7b2c67915
0x6359:	add	rax, rsi
0x635c:	mov	rbp, rax
0x635f:	mov	rax, r8
0x6362:	xor	rax, rcx
0x6365:	add	rdi, rbp
0x6368:	mov	qword ptr [rsp + 0x50], rbp
0x636d:	and	rax, r11
0x6370:	add	rdx, rdi
0x6373:	mov	rdi, r14
0x6376:	xor	rax, r8
0x6379:	rol	rdi, 0x1e
0x637d:	lea	rsi, [rax + rdx]
0x6381:	mov	rax, r11
0x6384:	mov	rdx, r11
0x6387:	ror	rax, 0xe
0x638b:	ror	rdx, 0x12
0x638f:	xor	rdx, rax
0x6392:	mov	rax, r11
0x6395:	rol	rax, 0x17
0x6399:	xor	rax, rdx
0x639c:	mov	rdx, r14
0x639f:	ror	rdx, 0x1c
0x63a3:	add	rax, rsi
0x63a6:	xor	rdi, rdx
0x63a9:	mov	rdx, r14
0x63ac:	lea	rsi, [r10 + rax]
0x63b0:	rol	rdx, 0x19
0x63b4:	mov	r10, r13
0x63b7:	xor	rdi, rdx
0x63ba:	mov	rdx, r13
0x63bd:	and	r10, r14
0x63c0:	or	rdx, r14
0x63c3:	and	rdx, rbx
0x63c6:	or	rdx, r10
0x63c9:	mov	r10, qword ptr [rsp + 0x28]
0x63ce:	add	rdx, rdi


0x63d1:	add	rdx, rax
0x63d4:	mov	rax, r15
0x63d7:	ror	rax, 1
0x63da:	mov	r9, r10
0x63dd:	mov	rdi, rax
0x63e0:	mov	rax, r15
0x63e3:	ror	rax, 8
0x63e7:	xor	rax, rdi
0x63ea:	mov	rdi, r15
0x63ed:	shr	rdi, 7
0x63f1:	xor	rax, rdi
0x63f4:	mov	rdi, r10
0x63f7:	add	rax, r12
0x63fa:	add	rax, qword ptr [rsp]
0x63fe:	ror	r9, 0x13
0x6402:	rol	rdi, 3
0x6406:	xor	rdi, r9
0x6409:	mov	r9, r10
0x640c:	shr	r9, 6
0x6410:	xor	rdi, r9
0x6413:	add	rax, rdi
0x6416:	movabs	rdi, 0xc67178f2e372532b
0x6420:	mov	r10, rax
0x6423:	mov	rax, rcx
0x6426:	xor	rax, r11
0x6429:	add	rdi, r10
0x642c:	mov	qword ptr [rsp + 0x30], r10
0x6431:	and	rax, rsi
0x6434:	add	r8, rdi
0x6437:	mov	rdi, rsi
0x643a:	xor	rax, rcx
0x643d:	ror	rdi, 0x12
0x6441:	mov	r10, r14
0x6444:	mov	r9, rax
0x6447:	and	r10, rdx
0x644a:	lea	rax, [r9 + r8]
0x644e:	mov	r8, rsi
0x6451:	mov	r9, rdx
0x6454:	ror	r8, 0xe
0x6458:	rol	r9, 0x1e
0x645c:	xor	rdi, r8
0x645f:	mov	r8, rsi
0x6462:	rol	r8, 0x17
0x6466:	xor	r8, rdi
0x6469:	mov	rdi, rdx
0x646c:	ror	rdi, 0x1c
0x6470:	add	r8, rax
0x6473:	xor	r9, rdi
0x6476:	mov	rdi, rdx
0x6479:	lea	rax, [rbx + r8]
0x647d:	rol	rdi, 0x19
0x6481:	mov	rbx, qword ptr [rsp + 0x60]
0x6486:	xor	r9, rdi
0x6489:	mov	rdi, r14
0x648c:	or	rdi, rdx
0x648f:	and	rdi, r13
0x6492:	or	rdi, r10
0x6495:	add	rdi, r9
0x6498:	mov	r9, rbx
0x649b:	add	rdi, r8
0x649e:	mov	r8, rbx
0x64a1:	ror	r9, 1
0x64a4:	ror	r8, 8
0x64a8:	xor	r8, r9
0x64ab:	mov	r9, rbx
0x64ae:	shr	r9, 7
0x64b2:	xor	r8, r9
0x64b5:	add	r15, r8
0x64b8:	mov	r8, rbp
0x64bb:	add	r15, qword ptr [rsp + 0x10]
0x64c0:	ror	r8, 0x13
0x64c4:	mov	r9, r8
0x64c7:	mov	r8, rbp
0x64ca:	shr	rbp, 6
0x64ce:	rol	r8, 3
0x64d2:	xor	r8, r9
0x64d5:	movabs	r9, 0xca273eceea26619c
0x64df:	xor	r8, rbp
0x64e2:	add	r8, r15
0x64e5:	mov	r15, qword ptr [rsp + 0x40]
0x64ea:	mov	r12, r8
0x64ed:	mov	qword ptr [rsp + 0xf0], r8
0x64f5:	mov	r8, r11
0x64f8:	xor	r8, rsi
0x64fb:	add	r9, r12
0x64fe:	mov	qword ptr [rsp + 0x58], r12
0x6503:	and	r8, rax
0x6506:	add	rcx, r9
0x6509:	mov	r9, rdx
0x650c:	xor	r8, r11
0x650f:	and	r9, rdi
0x6512:	mov	r12, r15
0x6515:	mov	r10, r8
0x6518:	lea	r8, [r10 + rcx]
0x651c:	mov	rcx, rax
0x651f:	mov	r10, rax
0x6522:	ror	rcx, 0xe
0x6526:	ror	r10, 0x12
0x652a:	xor	r10, rcx


0x652d:	mov	rcx, rax
0x6530:	rol	rcx, 0x17
0x6534:	xor	rcx, r10
0x6537:	mov	r10, rdi
0x653a:	add	rcx, r8
0x653d:	mov	r8, rdi
0x6540:	ror	r10, 0x1c
0x6544:	rol	r8, 0x1e
0x6548:	add	r13, rcx
0x654b:	xor	r8, r10
0x654e:	mov	r10, rdi
0x6551:	rol	r10, 0x19
0x6555:	xor	r8, r10
0x6558:	mov	r10, rdx
0x655b:	or	r10, rdi
0x655e:	and	r10, r14
0x6561:	or	r10, r9
0x6564:	mov	r9, r13
0x6567:	add	r10, r8
0x656a:	add	r10, rcx
0x656d:	mov	rcx, r15
0x6570:	ror	r12, 1
0x6573:	ror	rcx, 8
0x6577:	ror	r9, 0x12
0x657b:	xor	rcx, r12
0x657e:	mov	r12, r15
0x6581:	shr	r12, 7
0x6585:	xor	rcx, r12
0x6588:	add	rcx, rbx
0x658b:	mov	rbx, qword ptr [rsp + 0x30]
0x6590:	add	rcx, qword ptr [rsp + 0x18]
0x6595:	mov	r8, rbx
0x6598:	mov	r12, rbx
0x659b:	ror	r8, 0x13
0x659f:	rol	r12, 3
0x65a3:	xor	r12, r8
0x65a6:	mov	r8, rbx
0x65a9:	mov	rbx, qword ptr [rsp + 0x68]
0x65ae:	shr	r8, 6
0x65b2:	xor	r12, r8
0x65b5:	movabs	r8, 0xd186b8c721c0c207
0x65bf:	add	r12, rcx
0x65c2:	mov	rcx, rsi
0x65c5:	mov	rbp, rbx
0x65c8:	xor	rcx, rax
0x65cb:	add	r8, r12
0x65ce:	mov	qword ptr [rsp + 0xf8], r12
0x65d6:	and	rcx, r13
0x65d9:	add	r11, r8
0x65dc:	xor	rcx, rsi
0x65df:	add	r11, rcx
0x65e2:	mov	rcx, r13
0x65e5:	ror	rcx, 0xe
0x65e9:	xor	r9, rcx
0x65ec:	mov	rcx, r13
0x65ef:	rol	rcx, 0x17
0x65f3:	xor	rcx, r9
0x65f6:	add	rcx, r11
0x65f9:	mov	r11, r10
0x65fc:	ror	r11, 0x1c
0x6600:	add	r14, rcx
0x6603:	mov	r9, r11
0x6606:	mov	r11, r10
0x6609:	rol	r11, 0x1e
0x660d:	mov	r8, r11
0x6610:	mov	r11, r10
0x6613:	xor	r8, r9
0x6616:	rol	r11, 0x19
0x661a:	xor	r8, r11
0x661d:	mov	r11, rdi
0x6620:	or	r11, r10
0x6623:	ror	rbp, 1
0x6626:	mov	r9, r11
0x6629:	mov	r11, rdi
0x662c:	and	r11, r10
0x662f:	and	r9, rdx
0x6632:	or	r9, r11
0x6635:	mov	r11, rbx
0x6638:	ror	r11, 8
0x663c:	add	r9, r8
0x663f:	xor	r11, rbp
0x6642:	mov	rbp, rbx
0x6645:	add	r9, rcx
0x6648:	shr	rbp, 7
0x664c:	xor	r11, rbp
0x664f:	add	r11, r15
0x6652:	add	r11, qword ptr [rsp + 0x20]
0x6657:	mov	r8, qword ptr [rsp + 0x58]
0x665c:	mov	r15, qword ptr [rsp + 0x80]
0x6664:	mov	rbx, r8
0x6667:	mov	rcx, r8
0x666a:	rol	rbx, 3
0x666e:	ror	rcx, 0x13
0x6672:	mov	rbp, rbx
0x6675:	xor	rbp, rcx
0x6678:	mov	rcx, r8
0x667b:	movabs	r8, 0xeada7dd6cde0eb1e
0x6685:	shr	rcx, 6
0x6689:	xor	rbp, rcx


0x668c:	mov	rcx, rax
0x668f:	add	rbp, r11
0x6692:	xor	rcx, r13
0x6695:	mov	r11, r14
0x6698:	add	r8, rbp
0x669b:	and	rcx, r14
0x669e:	ror	r11, 0x12
0x66a2:	xor	rcx, rax
0x66a5:	add	rsi, r8
0x66a8:	mov	r8, r11
0x66ab:	add	rsi, rcx
0x66ae:	mov	rcx, r14
0x66b1:	mov	r11, r9
0x66b4:	ror	rcx, 0xe
0x66b8:	mov	qword ptr [rsp + 0x100], rbp
0x66c0:	xor	r8, rcx
0x66c3:	mov	rcx, r14
0x66c6:	rol	rcx, 0x17
0x66ca:	xor	rcx, r8
0x66cd:	add	rcx, rsi
0x66d0:	add	rdx, rcx
0x66d3:	ror	r11, 0x1c
0x66d7:	mov	r8, r11
0x66da:	mov	r11, r9
0x66dd:	rol	r11, 0x1e
0x66e1:	mov	rsi, r11
0x66e4:	mov	r11, r9
0x66e7:	xor	rsi, r8
0x66ea:	rol	r11, 0x19
0x66ee:	xor	rsi, r11
0x66f1:	mov	r11, r10
0x66f4:	or	r11, r9
0x66f7:	mov	r8, r11
0x66fa:	mov	r11, r10
0x66fd:	and	r11, r9
0x6700:	and	r8, rdi
0x6703:	or	r8, r11
0x6706:	mov	r11, r15
0x6709:	add	r8, rsi
0x670c:	mov	rsi, r15
0x670f:	ror	r11, 8
0x6713:	ror	rsi, 1
0x6716:	add	r8, rcx
0x6719:	mov	rcx, r12
0x671c:	xor	r11, rsi
0x671f:	mov	rsi, r15
0x6722:	ror	rcx, 0x13
0x6726:	shr	rsi, 7
0x672a:	xor	r11, rsi
0x672d:	mov	rsi, r12
0x6730:	add	r11, qword ptr [rsp + 0x68]
0x6735:	rol	rsi, 3
0x6739:	add	r11, qword ptr [rsp + 0x48]
0x673e:	mov	rbx, rsi
0x6741:	xor	rbx, rcx
0x6744:	mov	rcx, r12
0x6747:	shr	rcx, 6
0x674b:	xor	rbx, rcx
0x674e:	mov	rcx, r13
0x6751:	add	rbx, r11
0x6754:	xor	rcx, r14
0x6757:	movabs	r11, 0xf57d4f7fee6ed178
0x6761:	add	r11, rbx
0x6764:	and	rcx, rdx
0x6767:	mov	qword ptr [rsp + 0x108], rbx
0x676f:	xor	rcx, r13
0x6772:	add	rax, r11
0x6775:	mov	r11, rdx
0x6778:	lea	rsi, [rcx + rax]
0x677c:	ror	r11, 0x12
0x6780:	mov	rcx, rdx
0x6783:	ror	rcx, 0xe
0x6787:	mov	rax, r11
0x678a:	mov	r11, r8
0x678d:	xor	rax, rcx
0x6790:	mov	rcx, rdx
0x6793:	rol	rcx, 0x17
0x6797:	ror	r11, 0x1c
0x679b:	xor	rcx, rax
0x679e:	mov	rax, r11
0x67a1:	mov	r11, r8
0x67a4:	rol	r11, 0x1e
0x67a8:	add	rcx, rsi
0x67ab:	mov	rsi, r11
0x67ae:	mov	r11, r8
0x67b1:	add	rdi, rcx
0x67b4:	xor	rsi, rax
0x67b7:	rol	r11, 0x19
0x67bb:	xor	rsi, r11
0x67be:	mov	r11, r9
0x67c1:	or	r11, r8
0x67c4:	mov	rax, r11
0x67c7:	mov	r11, r9
0x67ca:	and	r11, r8
0x67cd:	and	rax, r10
0x67d0:	or	rax, r11
0x67d3:	add	rax, rsi
0x67d6:	mov	rsi, qword ptr [rsp + 0x38]
0x67db:	add	rax, rcx


0x67de:	mov	r11, rsi
0x67e1:	mov	rcx, rsi
0x67e4:	ror	r11, 1
0x67e7:	ror	rcx, 8
0x67eb:	xor	rcx, r11
0x67ee:	mov	r11, rsi
0x67f1:	mov	rsi, rbp
0x67f4:	shr	r11, 7
0x67f8:	ror	rsi, 0x13
0x67fc:	xor	rcx, r11
0x67ff:	lea	r11, [rcx + r15]
0x6803:	mov	rcx, qword ptr [rsp + 0x28]
0x6808:	mov	r15, r8
0x680b:	add	rcx, r11
0x680e:	mov	r11, rbp
0x6811:	rol	r11, 3
0x6815:	xor	r11, rsi
0x6818:	mov	rsi, rbp
0x681b:	shr	rsi, 6
0x681f:	xor	r11, rsi
0x6822:	mov	rsi, r14
0x6825:	xor	rsi, rdx
0x6828:	add	r11, rcx
0x682b:	mov	rcx, rsi
0x682e:	movabs	rsi, 0x6f067aa72176fba
0x6838:	mov	qword ptr [rsp + 0x110], r11
0x6840:	add	rsi, r11
0x6843:	and	rcx, rdi
0x6846:	xor	rcx, r14
0x6849:	add	r13, rsi
0x684c:	mov	rsi, rdi
0x684f:	add	r13, rcx
0x6852:	ror	rsi, 0xe
0x6856:	and	r15, rax
0x6859:	mov	rcx, rsi
0x685c:	mov	rsi, rdi
0x685f:	ror	rsi, 0x12
0x6863:	xor	rsi, rcx
0x6866:	mov	rcx, rdi
0x6869:	rol	rcx, 0x17
0x686d:	xor	rcx, rsi
0x6870:	mov	rsi, rax
0x6873:	add	rcx, r13
0x6876:	mov	r13, rax
0x6879:	ror	rsi, 0x1c
0x687d:	rol	r13, 0x1e
0x6881:	add	r10, rcx
0x6884:	xor	r13, rsi
0x6887:	mov	rsi, rax
0x688a:	rol	rsi, 0x19
0x688e:	xor	r13, rsi
0x6891:	mov	rsi, r8
0x6894:	or	rsi, rax
0x6897:	and	rsi, r9
0x689a:	or	rsi, r15
0x689d:	mov	r15, qword ptr [rsp + 8]
0x68a2:	add	rsi, r13
0x68a5:	add	rsi, rcx
0x68a8:	mov	r13, r15
0x68ab:	mov	rcx, r15
0x68ae:	ror	r13, 1
0x68b1:	ror	rcx, 8
0x68b5:	xor	rcx, r13
0x68b8:	mov	r13, r15
0x68bb:	mov	r15, rbx
0x68be:	shr	r13, 7
0x68c2:	ror	r15, 0x13
0x68c6:	xor	rcx, r13
0x68c9:	mov	r13, rbx
0x68cc:	add	rcx, qword ptr [rsp + 0x38]
0x68d1:	add	rcx, qword ptr [rsp + 0x50]
0x68d6:	rol	r13, 3
0x68da:	xor	r13, r15
0x68dd:	mov	r15, rbx
0x68e0:	shr	r15, 6
0x68e4:	xor	r13, r15
0x68e7:	lea	r15, [rcx + r13]
0x68eb:	mov	rcx, rdx
0x68ee:	xor	rcx, rdi
0x68f1:	mov	r13, rcx
0x68f4:	movabs	rcx, 0xa637dc5a2c898a6
0x68fe:	mov	qword ptr [rsp + 0x38], r15
0x6903:	and	r13, r10
0x6906:	add	rcx, r15
0x6909:	mov	qword ptr [rsp + 0x118], r15
0x6911:	add	r14, rcx
0x6914:	mov	rcx, r10
0x6917:	xor	r13, rdx
0x691a:	ror	rcx, 0xe
0x691e:	add	r14, r13
0x6921:	mov	r15, rax
0x6924:	mov	r13, rcx
0x6927:	mov	rcx, r10
0x692a:	and	r15, rsi
0x692d:	ror	rcx, 0x12
0x6931:	xor	rcx, r13
0x6934:	mov	r13, r10
0x6937:	rol	r13, 0x17
0x693b:	xor	r13, rcx


0x693e:	mov	rcx, rsi
0x6941:	add	r13, r14
0x6944:	mov	r14, rsi
0x6947:	ror	rcx, 0x1c
0x694b:	rol	r14, 0x1e
0x694f:	add	r9, r13
0x6952:	xor	r14, rcx
0x6955:	mov	rcx, rsi
0x6958:	rol	rcx, 0x19
0x695c:	xor	r14, rcx
0x695f:	mov	rcx, rax
0x6962:	or	rcx, rsi
0x6965:	and	rcx, r8
0x6968:	or	rcx, r15
0x696b:	mov	r15, qword ptr [rsp + 0x70]
0x6970:	add	rcx, r14
0x6973:	add	rcx, r13
0x6976:	mov	r14, r15
0x6979:	mov	r13, r15
0x697c:	ror	r14, 1
0x697f:	ror	r13, 8
0x6983:	xor	r13, r14
0x6986:	mov	r14, r15
0x6989:	mov	r15, r11
0x698c:	shr	r14, 7
0x6990:	ror	r15, 0x13
0x6994:	xor	r13, r14
0x6997:	mov	r14, r11
0x699a:	add	r13, qword ptr [rsp + 8]
0x699f:	add	r13, qword ptr [rsp + 0x30]
0x69a4:	rol	r14, 3
0x69a8:	xor	r14, r15
0x69ab:	mov	r15, r11
0x69ae:	shr	r15, 6
0x69b2:	xor	r14, r15
0x69b5:	movabs	r15, 0x113f9804bef90dae
0x69bf:	add	r13, r14
0x69c2:	mov	r14, r13
0x69c5:	mov	qword ptr [rsp + 0x120], r13
0x69cd:	mov	r13, rdi
0x69d0:	xor	r13, r10
0x69d3:	add	r15, r14
0x69d6:	mov	qword ptr [rsp + 8], r14
0x69db:	and	r13, r9
0x69de:	add	rdx, r15
0x69e1:	mov	r15, rcx
0x69e4:	xor	r13, rdi
0x69e7:	rol	r15, 0x1e
0x69eb:	lea	r14, [r13 + rdx]
0x69f0:	mov	rdx, r9
0x69f3:	ror	rdx, 0xe
0x69f7:	mov	r13, rdx
0x69fa:	mov	rdx, r9
0x69fd:	ror	rdx, 0x12
0x6a01:	xor	rdx, r13
0x6a04:	mov	r13, r9
0x6a07:	rol	r13, 0x17
0x6a0b:	xor	r13, rdx
0x6a0e:	mov	rdx, rcx
0x6a11:	add	r13, r14
0x6a14:	ror	rdx, 0x1c
0x6a18:	mov	r14, r15
0x6a1b:	xor	r14, rdx
0x6a1e:	mov	rdx, rcx
0x6a21:	mov	r15, rsi
0x6a24:	rol	rdx, 0x19
0x6a28:	and	r15, rcx
0x6a2b:	add	r8, r13
0x6a2e:	xor	r14, rdx
0x6a31:	mov	rdx, rsi
0x6a34:	or	rdx, rcx
0x6a37:	and	rdx, rax
0x6a3a:	or	rdx, r15
0x6a3d:	mov	r15, qword ptr [rsp]
0x6a41:	add	rdx, r14
0x6a44:	add	rdx, r13
0x6a47:	mov	r14, r15
0x6a4a:	mov	r13, r15
0x6a4d:	ror	r14, 1
0x6a50:	ror	r13, 8
0x6a54:	xor	r13, r14
0x6a57:	mov	r14, r15
0x6a5a:	shr	r14, 7
0x6a5e:	xor	r13, r14
0x6a61:	mov	r14, qword ptr [rsp + 0x38]
0x6a66:	add	r13, qword ptr [rsp + 0x70]
0x6a6b:	add	r13, qword ptr [rsp + 0x58]
0x6a70:	mov	r15, r14
0x6a73:	rol	r14, 3
0x6a77:	ror	r15, 0x13
0x6a7b:	xor	r14, r15
0x6a7e:	mov	r15, qword ptr [rsp + 0x38]
0x6a83:	shr	r15, 6
0x6a87:	xor	r14, r15
0x6a8a:	add	r13, r14
0x6a8d:	movabs	r14, 0x1b710b35131c471b
0x6a97:	mov	r15, r13
0x6a9a:	mov	qword ptr [rsp + 0x128], r13
0x6aa2:	mov	r13, r10


0x6aa5:	xor	r13, r9
0x6aa8:	add	r14, r15
0x6aab:	mov	qword ptr [rsp + 0x40], r15
0x6ab0:	and	r13, r8
0x6ab3:	add	rdi, r14
0x6ab6:	mov	r15, r8
0x6ab9:	xor	r13, r10
0x6abc:	rol	r15, 0x17
0x6ac0:	add	rdi, r13
0x6ac3:	mov	r13, r8
0x6ac6:	ror	r13, 0xe
0x6aca:	mov	r14, r13
0x6acd:	mov	r13, r8
0x6ad0:	ror	r13, 0x12
0x6ad4:	xor	r13, r14
0x6ad7:	xor	r13, r15
0x6ada:	mov	r15, rdx
0x6add:	add	r13, rdi
0x6ae0:	rol	r15, 0x19
0x6ae4:	lea	rdi, [rax + r13]
0x6ae8:	mov	rax, rdx
0x6aeb:	ror	rax, 0x1c
0x6aef:	mov	r14, rax
0x6af2:	mov	rax, rdx
0x6af5:	rol	rax, 0x1e
0x6af9:	xor	rax, r14
0x6afc:	xor	rax, r15
0x6aff:	mov	r15, rcx
0x6b02:	or	r15, rdx
0x6b05:	mov	r14, r15
0x6b08:	mov	r15, rcx
0x6b0b:	and	r15, rdx
0x6b0e:	and	r14, rsi
0x6b11:	or	r14, r15
0x6b14:	mov	r15, qword ptr [rsp + 0x10]
0x6b19:	add	r14, rax
0x6b1c:	add	r13, r14
0x6b1f:	mov	rax, r15
0x6b22:	mov	r14, r15
0x6b25:	ror	r14, 1
0x6b28:	ror	rax, 8
0x6b2c:	xor	rax, r14
0x6b2f:	mov	r14, r15
0x6b32:	shr	r14, 7
0x6b36:	xor	rax, r14
0x6b39:	add	rax, qword ptr [rsp]
0x6b3d:	add	r12, rax
0x6b40:	mov	rax, qword ptr [rsp + 8]
0x6b45:	mov	r15, rax
0x6b48:	ror	r15, 0x13
0x6b4c:	mov	r14, r15
0x6b4f:	mov	r15, rax
0x6b52:	rol	rax, 3
0x6b56:	xor	rax, r14
0x6b59:	shr	r15, 6
0x6b5d:	movabs	r14, 0x28db77f523047d84
0x6b67:	xor	rax, r15
0x6b6a:	lea	r15, [r12 + rax]
0x6b6e:	mov	r12, r9
0x6b71:	xor	r12, r8
0x6b74:	mov	rax, r12
0x6b77:	add	r14, r15
0x6b7a:	mov	qword ptr [rsp + 0x130], r15
0x6b82:	and	rax, rdi
0x6b85:	add	r10, r14
0x6b88:	mov	r14, rdx
0x6b8b:	xor	rax, r9
0x6b8e:	and	r14, r13
0x6b91:	lea	r12, [rax + r10]
0x6b95:	mov	r10, rdi
0x6b98:	ror	r10, 0xe
0x6b9c:	mov	rax, r10
0x6b9f:	mov	r10, rdi
0x6ba2:	ror	r10, 0x12
0x6ba6:	xor	r10, rax
0x6ba9:	mov	rax, rdi
0x6bac:	rol	rax, 0x17
0x6bb0:	xor	rax, r10
0x6bb3:	mov	r10, r13
0x6bb6:	add	rax, r12
0x6bb9:	mov	r12, r13
0x6bbc:	ror	r10, 0x1c
0x6bc0:	rol	r12, 0x1e
0x6bc4:	add	rsi, rax
0x6bc7:	xor	r12, r10
0x6bca:	mov	r10, r13
0x6bcd:	rol	r10, 0x19
0x6bd1:	xor	r12, r10
0x6bd4:	mov	r10, rdx
0x6bd7:	or	r10, r13
0x6bda:	and	r10, rcx
0x6bdd:	or	r10, r14
0x6be0:	mov	r14, qword ptr [rsp + 0x18]
0x6be5:	add	r10, r12
0x6be8:	add	r10, rax
0x6beb:	mov	r12, r14
0x6bee:	mov	rax, r14
0x6bf1:	ror	r12, 1
0x6bf4:	ror	rax, 8


0x6bf8:	xor	rax, r12
0x6bfb:	mov	r12, r14
0x6bfe:	shr	r12, 7
0x6c02:	xor	rax, r12
0x6c05:	add	rax, qword ptr [rsp + 0x10]
0x6c0a:	mov	r14, qword ptr [rsp + 0x40]
0x6c0f:	mov	r12, r14
0x6c12:	add	rax, rbp
0x6c15:	mov	rbp, r14
0x6c18:	ror	r12, 0x13
0x6c1c:	rol	rbp, 3
0x6c20:	xor	rbp, r12
0x6c23:	mov	r12, r14
0x6c26:	movabs	r14, 0x32caab7b40c72493
0x6c30:	shr	r12, 6
0x6c34:	xor	rbp, r12
0x6c37:	add	rbp, rax
0x6c3a:	mov	rax, r8
0x6c3d:	xor	rax, rdi
0x6c40:	add	r14, rbp
0x6c43:	mov	qword ptr [rsp + 0x138], rbp
0x6c4b:	and	rax, rsi
0x6c4e:	add	r9, r14
0x6c51:	mov	r14, r13
0x6c54:	xor	rax, r8
0x6c57:	lea	r12, [rax + r9]
0x6c5b:	mov	r9, rsi
0x6c5e:	ror	r9, 0xe
0x6c62:	mov	rax, r9
0x6c65:	mov	r9, rsi
0x6c68:	ror	r9, 0x12
0x6c6c:	xor	r9, rax
0x6c6f:	mov	rax, rsi
0x6c72:	rol	rax, 0x17
0x6c76:	xor	rax, r9
0x6c79:	mov	r9, r10
0x6c7c:	add	rax, r12
0x6c7f:	mov	r12, r10
0x6c82:	ror	r9, 0x1c
0x6c86:	rol	r12, 0x1e
0x6c8a:	add	rcx, rax
0x6c8d:	xor	r12, r9
0x6c90:	mov	r9, r10
0x6c93:	rol	r9, 0x19
0x6c97:	xor	r12, r9
0x6c9a:	mov	r9, r13
0x6c9d:	or	r9, r10
0x6ca0:	and	r14, r10
0x6ca3:	and	r9, rdx
0x6ca6:	or	r9, r14
0x6ca9:	mov	r14, qword ptr [rsp + 0x20]
0x6cae:	add	r9, r12
0x6cb1:	add	r9, rax
0x6cb4:	mov	r12, r14
0x6cb7:	mov	rax, r14
0x6cba:	ror	r12, 1
0x6cbd:	ror	rax, 8
0x6cc1:	xor	rax, r12
0x6cc4:	mov	r12, r14
0x6cc7:	mov	r14, r10
0x6cca:	shr	r12, 7
0x6cce:	xor	rax, r12
0x6cd1:	add	rax, qword ptr [rsp + 0x18]
0x6cd6:	mov	r12, r15
0x6cd9:	ror	r12, 0x13
0x6cdd:	add	rax, rbx
0x6ce0:	mov	rbx, r15
0x6ce3:	rol	rbx, 3
0x6ce7:	xor	rbx, r12
0x6cea:	mov	r12, r15
0x6ced:	shr	r12, 6
0x6cf1:	xor	rbx, r12
0x6cf4:	movabs	r12, 0x3c9ebe0a15c9bebc
0x6cfe:	add	rbx, rax
0x6d01:	mov	rax, rdi
0x6d04:	xor	rax, rsi
0x6d07:	add	r12, rbx
0x6d0a:	mov	qword ptr [rsp + 0x140], rbx
0x6d12:	and	rax, rcx
0x6d15:	add	r8, r12
0x6d18:	xor	rax, rdi
0x6d1b:	lea	rax, [rax + r8]
0x6d1f:	mov	r8, rcx
0x6d22:	ror	r8, 0xe
0x6d26:	mov	r12, r8
0x6d29:	mov	r8, rcx
0x6d2c:	ror	r8, 0x12
0x6d30:	xor	r8, r12
0x6d33:	mov	r12, rcx
0x6d36:	rol	r12, 0x17
0x6d3a:	xor	r8, r12
0x6d3d:	add	r8, rax
0x6d40:	mov	rax, r9
0x6d43:	ror	rax, 0x1c
0x6d47:	add	rdx, r8
0x6d4a:	mov	r12, rax
0x6d4d:	mov	rax, r9
0x6d50:	rol	rax, 0x1e
0x6d54:	and	r14, r9


0x6d57:	xor	rax, r12
0x6d5a:	mov	r12, r9
0x6d5d:	rol	r12, 0x19
0x6d61:	xor	rax, r12
0x6d64:	mov	r12, r10
0x6d67:	or	r12, r9
0x6d6a:	and	r12, r13
0x6d6d:	or	r12, r14
0x6d70:	mov	r14, qword ptr [rsp + 0x48]
0x6d75:	add	r12, rax
0x6d78:	add	r8, r12
0x6d7b:	mov	rax, r14
0x6d7e:	mov	r12, r14
0x6d81:	ror	r12, 1
0x6d84:	ror	rax, 8
0x6d88:	xor	rax, r12
0x6d8b:	mov	r12, r14
0x6d8e:	shr	r12, 7
0x6d92:	xor	rax, r12
0x6d95:	add	rax, qword ptr [rsp + 0x20]
0x6d9a:	add	rax, r11
0x6d9d:	mov	r11, rbp
0x6da0:	ror	r11, 0x13
0x6da4:	mov	r12, r11
0x6da7:	mov	r11, rbp
0x6daa:	shr	rbp, 6
0x6dae:	rol	r11, 3
0x6db2:	xor	r11, r12
0x6db5:	mov	r12, r9
0x6db8:	xor	r11, rbp
0x6dbb:	movabs	rbp, 0x431d67c49c100d4c
0x6dc5:	add	r11, rax
0x6dc8:	mov	rax, rsi
0x6dcb:	xor	rax, rcx
0x6dce:	add	rbp, r11
0x6dd1:	mov	qword ptr [rsp + 0x148], r11
0x6dd9:	and	rax, rdx
0x6ddc:	add	rdi, rbp
0x6ddf:	xor	rax, rsi
0x6de2:	add	rdi, rax
0x6de5:	mov	rax, rdx
0x6de8:	ror	rax, 0xe
0x6dec:	mov	rbp, rax
0x6def:	mov	rax, rdx
0x6df2:	ror	rax, 0x12
0x6df6:	xor	rax, rbp
0x6df9:	mov	rbp, rdx
0x6dfc:	rol	rbp, 0x17
0x6e00:	and	r12, r8
0x6e03:	xor	rax, rbp
0x6e06:	add	rax, rdi
0x6e09:	mov	rdi, r8
0x6e0c:	ror	rdi, 0x1c
0x6e10:	add	r13, rax
0x6e13:	mov	rbp, rdi
0x6e16:	mov	rdi, r8
0x6e19:	rol	rdi, 0x1e
0x6e1d:	xor	rdi, rbp
0x6e20:	mov	rbp, r8
0x6e23:	rol	rbp, 0x19
0x6e27:	xor	rdi, rbp
0x6e2a:	mov	rbp, r9
0x6e2d:	or	rbp, r8
0x6e30:	and	rbp, r10
0x6e33:	or	rbp, r12
0x6e36:	mov	r12, qword ptr [rsp + 0x28]
0x6e3b:	add	rbp, rdi
0x6e3e:	add	rax, rbp
0x6e41:	mov	rdi, r12
0x6e44:	mov	rbp, r12
0x6e47:	ror	rbp, 1
0x6e4a:	ror	rdi, 8
0x6e4e:	xor	rdi, rbp
0x6e51:	mov	rbp, r12
0x6e54:	shr	rbp, 7
0x6e58:	xor	rdi, rbp
0x6e5b:	add	rdi, r14
0x6e5e:	mov	r14, qword ptr [rsp + 0x38]
0x6e63:	lea	rbp, [rdi + r14]
0x6e67:	mov	rdi, rbx
0x6e6a:	ror	rdi, 0x13
0x6e6e:	mov	r12, rdi
0x6e71:	mov	rdi, rbx
0x6e74:	shr	rbx, 6
0x6e78:	rol	rdi, 3
0x6e7c:	xor	rdi, r12
0x6e7f:	mov	r12, r8
0x6e82:	xor	rdi, rbx
0x6e85:	mov	rbx, rcx
0x6e88:	add	rdi, rbp
0x6e8b:	xor	rbx, rdx
0x6e8e:	movabs	rbp, 0x4cc5d4becb3e42b6
0x6e98:	add	rbp, rdi
0x6e9b:	and	rbx, r13
0x6e9e:	mov	qword ptr [rsp + 0x150], rdi
0x6ea6:	xor	rbx, rcx
0x6ea9:	add	rsi, rbp
0x6eac:	add	rsi, rbx
0x6eaf:	mov	rbx, r13


0x6eb2:	and	r12, rax
0x6eb5:	ror	rbx, 0xe
0x6eb9:	mov	rbp, rbx
0x6ebc:	mov	rbx, r13
0x6ebf:	ror	rbx, 0x12
0x6ec3:	xor	rbx, rbp
0x6ec6:	mov	rbp, r13
0x6ec9:	rol	rbp, 0x17
0x6ecd:	xor	rbx, rbp
0x6ed0:	add	rbx, rsi
0x6ed3:	mov	rsi, rax
0x6ed6:	ror	rsi, 0x1c
0x6eda:	add	r10, rbx
0x6edd:	mov	rbp, rsi
0x6ee0:	mov	rsi, rax
0x6ee3:	rol	rsi, 0x1e
0x6ee7:	xor	rsi, rbp
0x6eea:	mov	rbp, rax
0x6eed:	rol	rbp, 0x19
0x6ef1:	xor	rsi, rbp
0x6ef4:	mov	rbp, r8
0x6ef7:	or	rbp, rax
0x6efa:	and	rbp, r9
0x6efd:	or	rbp, r12
0x6f00:	mov	r12, qword ptr [rsp + 0x50]
0x6f05:	add	rbp, rsi
0x6f08:	add	rbx, rbp
0x6f0b:	mov	rbp, r11
0x6f0e:	mov	rsi, r12
0x6f11:	mov	r14, r12
0x6f14:	ror	rbp, 0x13
0x6f18:	ror	rsi, 1
0x6f1b:	ror	r14, 8
0x6f1f:	xor	r14, rsi
0x6f22:	mov	rsi, r12
0x6f25:	mov	r12, qword ptr [rsp + 0x58]
0x6f2a:	shr	rsi, 7
0x6f2e:	xor	r14, rsi
0x6f31:	add	r14, qword ptr [rsp + 0x28]
0x6f36:	mov	rsi, r11
0x6f39:	add	r14, qword ptr [rsp + 8]
0x6f3e:	rol	rsi, 3
0x6f42:	shr	r11, 6
0x6f46:	xor	rsi, rbp
0x6f49:	movabs	rbp, 0x597f299cfc657e2a
0x6f53:	xor	r11, rsi
0x6f56:	mov	rsi, rdx
0x6f59:	add	r11, r14
0x6f5c:	xor	rsi, r13
0x6f5f:	mov	r14, rax
0x6f62:	add	rbp, r11
0x6f65:	and	rsi, r10
0x6f68:	and	r14, rbx
0x6f6b:	xor	rsi, rdx
0x6f6e:	add	rcx, rbp
0x6f71:	mov	rbp, r10
0x6f74:	add	rcx, rsi
0x6f77:	mov	rsi, r10
0x6f7a:	ror	rbp, 0xe
0x6f7e:	ror	rsi, 0x12
0x6f82:	mov	qword ptr [rsp + 0x158], r11
0x6f8a:	xor	rsi, rbp
0x6f8d:	mov	rbp, r10
0x6f90:	rol	rbp, 0x17
0x6f94:	xor	rsi, rbp
0x6f97:	mov	rbp, rbx
0x6f9a:	add	rsi, rcx
0x6f9d:	mov	rcx, rbx
0x6fa0:	ror	rbp, 0x1c
0x6fa4:	rol	rcx, 0x1e
0x6fa8:	add	r9, rsi
0x6fab:	xor	rcx, rbp
0x6fae:	mov	rbp, rbx
0x6fb1:	rol	rbp, 0x19
0x6fb5:	xor	rcx, rbp
0x6fb8:	mov	rbp, rax
0x6fbb:	or	rbp, rbx
0x6fbe:	and	rbp, r8
0x6fc1:	or	rbp, r14
0x6fc4:	mov	r14, qword ptr [rsp + 0x30]
0x6fc9:	add	rbp, rcx
0x6fcc:	add	rsi, rbp
0x6fcf:	mov	rcx, r14
0x6fd2:	mov	rbp, r14
0x6fd5:	ror	rbp, 1
0x6fd8:	ror	rcx, 8
0x6fdc:	xor	rcx, rbp
0x6fdf:	mov	rbp, r14
0x6fe2:	shr	rbp, 7
0x6fe6:	xor	rcx, rbp
0x6fe9:	add	rcx, qword ptr [rsp + 0x50]
0x6fee:	mov	rbp, qword ptr [rsp + 0x40]
0x6ff3:	lea	r14, [rcx + rbp]
0x6ff7:	mov	rcx, rdi
0x6ffa:	ror	rcx, 0x13
0x6ffe:	mov	rbp, rcx
0x7001:	mov	rcx, rdi
0x7004:	rol	rcx, 3
0x7008:	xor	rcx, rbp


0x700b:	shr	rdi, 6
0x700f:	mov	rbp, rbx
0x7012:	xor	rcx, rdi
0x7015:	movabs	rdi, 0x5fcb6fab3ad6faec
0x701f:	and	rbp, rsi
0x7022:	add	r14, rcx
0x7025:	mov	rcx, r13
0x7028:	xor	rcx, r10
0x702b:	mov	qword ptr [rsp + 0x160], r14
0x7033:	add	r14, rdi
0x7036:	and	rcx, r9
0x7039:	add	rdx, r14
0x703c:	mov	rdi, r9
0x703f:	xor	rcx, r13
0x7042:	ror	rdi, 0xe
0x7046:	add	rcx, rdx
0x7049:	mov	rdx, r9
0x704c:	ror	rdx, 0x12
0x7050:	xor	rdx, rdi
0x7053:	mov	rdi, r9
0x7056:	rol	rdi, 0x17
0x705a:	xor	rdx, rdi
0x705d:	mov	rdi, rsi
0x7060:	add	rdx, rcx
0x7063:	mov	rcx, rsi
0x7066:	ror	rdi, 0x1c
0x706a:	rol	rcx, 0x1e
0x706e:	add	r8, rdx
0x7071:	xor	rcx, rdi
0x7074:	mov	rdi, rsi
0x7077:	rol	rdi, 0x19
0x707b:	xor	rcx, rdi
0x707e:	mov	rdi, rbx
0x7081:	or	rdi, rsi
0x7084:	and	rdi, rax
0x7087:	or	rdi, rbp
0x708a:	mov	rbp, rsi
0x708d:	add	rdi, rcx
0x7090:	mov	rcx, r12
0x7093:	add	rdx, rdi
0x7096:	mov	rdi, r12
0x7099:	ror	rcx, 1
0x709c:	ror	rdi, 8
0x70a0:	xor	rdi, rcx
0x70a3:	mov	rcx, r12
0x70a6:	shr	rcx, 7
0x70aa:	xor	rdi, rcx
0x70ad:	add	rdi, qword ptr [rsp + 0x30]
0x70b2:	mov	rcx, r11
0x70b5:	rol	rcx, 3
0x70b9:	and	rbp, rdx
0x70bc:	add	qword ptr [rsp + 0x90], rdx
0x70c4:	lea	r12, [rdi + r15]
0x70c8:	mov	r15, r11
0x70cb:	shr	r11, 6
0x70cf:	ror	r15, 0x13
0x70d3:	movabs	rdi, 0x6c44198c4a475817
0x70dd:	xor	rcx, r15
0x70e0:	xor	rcx, r11
0x70e3:	mov	r11, rdx
0x70e6:	add	r12, rcx
0x70e9:	mov	rcx, r10
0x70ec:	ror	r11, 0x1c
0x70f0:	xor	rcx, r9
0x70f3:	mov	qword ptr [rsp + 0x168], r12
0x70fb:	add	r12, rdi
0x70fe:	and	rcx, r8
0x7101:	add	r13, r12
0x7104:	mov	rdi, r8
0x7107:	xor	rcx, r10
0x710a:	ror	rdi, 0xe
0x710e:	add	r13, rcx
0x7111:	mov	rcx, r8
0x7114:	ror	rcx, 0x12
0x7118:	xor	rcx, rdi
0x711b:	mov	rdi, r8
0x711e:	rol	rdi, 0x17
0x7122:	xor	rcx, rdi
0x7125:	mov	rdi, rdx
0x7128:	rol	rdi, 0x1e
0x712c:	add	rcx, r13
0x712f:	xor	rdi, r11
0x7132:	mov	r11, rdx
0x7135:	rol	r11, 0x19
0x7139:	xor	rdi, r11
0x713c:	mov	r11, rsi
0x713f:	or	r11, rdx
0x7142:	and	r11, rbx
0x7145:	or	r11, rbp
0x7148:	mov	rbp, qword ptr [rsp + 0x90]
0x7150:	add	rdi, r11
0x7153:	add	rdi, qword ptr [rsp + 0xd0]
0x715b:	lea	r15, [rdi + rcx]
0x715f:	mov	rdi, qword ptr [rsp + 0xe0]
0x7167:	mov	qword ptr [rsp + 0xd0], r15
0x716f:	mov	qword ptr [rdi], r15
0x7172:	mov	qword ptr [rdi + 8], rbp
0x7176:	mov	rdx, rdi
0x7179:	add	qword ptr [rsp + 0x98], rsi


0x7181:	mov	r13, qword ptr [rsp + 0x98]
0x7189:	add	rax, rcx
0x718c:	add	qword ptr [rsp + 0xa0], rbx
0x7194:	mov	rbx, rdx
0x7197:	add	qword ptr [rsp + 0xa8], rax
0x719f:	mov	rax, r15
0x71a2:	mov	qword ptr [rdi + 0x10], r13
0x71a6:	mov	rdi, qword ptr [rsp + 0xa0]
0x71ae:	add	qword ptr [rsp + 0xb0], r8
0x71b6:	add	qword ptr [rsp + 0xb8], r9
0x71be:	mov	rsi, qword ptr [rsp + 0xa8]
0x71c6:	mov	r12, qword ptr [rsp + 0xb0]
0x71ce:	add	qword ptr [rsp + 0xc0], r10
0x71d6:	mov	rdx, rdi
0x71d9:	mov	qword ptr [rbx + 0x18], rdi
0x71dd:	mov	r8, rdx
0x71e0:	mov	r9, rsi
0x71e3:	mov	rdi, qword ptr [rsp + 0xb8]
0x71eb:	mov	r10, qword ptr [rsp + 0xc0]
0x71f3:	mov	qword ptr [rbx + 0x20], rsi
0x71f7:	mov	qword ptr [rbx + 0x28], r12
0x71fb:	mov	qword ptr [rbx + 0x30], rdi
0x71ff:	mov	qword ptr [rbx + 0x38], r10
0x7203:	mov	rbx, qword ptr [rsp + 0x88]
0x720b:	cmp	qword ptr [rsp + 0xd8], rbx
0x7213:	ja	0x3610


0x3610:	mov	rsi, qword ptr [rsp + 0x88]
0x3618:	mov	r11, qword ptr [rsp + 0xe8]
0x3620:	xor	edx, edx
0x3622:	nop	word ptr [rax + rax]
0x3628:	mov	rcx, qword ptr [rsi + rdx]
0x362c:	bswap	rcx
0x362f:	mov	qword ptr [r11 + rdx], rcx
0x3633:	add	rdx, 8
0x3637:	cmp	rdx, 0x80
0x363e:	jne	0x3628


0x754d:	add	r12, -0x80
0x7551:	lea	rsi, [r13 + 0xd8]
0x7558:	mov	rdi, rbp
0x755b:	mov	rdx, r12
0x755e:	call	0x1770


0x741b:	cmp	rbx, r14
0x741e:	jne	0x73c0


0x7420:	neg	r15
0x7423:	shl	r15, 7
0x7427:	lea	r12, [r12 + r15 - 0x80]
0x742c:	mov	rdx, qword ptr [r13 + 0x50]
0x7430:	cmp	r12d, 8
0x7434:	lea	rsi, [rbp + rdx]
0x7439:	jae	0x7500


0x73c0:	movdqu	xmm0, xmmword ptr [rbx]
0x73c4:	mov	rdx, r13
0x73c7:	mov	esi, 0x80
0x73cc:	mov	rdi, rbp
0x73cf:	sub	rbx, -0x80
0x73d3:	movups	xmmword ptr [rbp], xmm0
0x73d7:	movdqu	xmm0, xmmword ptr [rbx - 0x70]
0x73dc:	movups	xmmword ptr [rbp + 0x10], xmm0
0x73e0:	movdqu	xmm0, xmmword ptr [rbx - 0x60]
0x73e5:	movups	xmmword ptr [rbp + 0x20], xmm0
0x73e9:	movdqu	xmm0, xmmword ptr [rbx - 0x50]
0x73ee:	movups	xmmword ptr [rbp + 0x30], xmm0
0x73f2:	movdqu	xmm0, xmmword ptr [rbx - 0x40]
0x73f7:	movups	xmmword ptr [rbp + 0x40], xmm0
0x73fb:	movdqu	xmm0, xmmword ptr [rbx - 0x30]
0x7400:	movups	xmmword ptr [rbp + 0x50], xmm0
0x7404:	movdqu	xmm0, xmmword ptr [rbx - 0x20]
0x7409:	movups	xmmword ptr [rbp + 0x60], xmm0
0x740d:	movdqu	xmm0, xmmword ptr [rbx - 0x10]
0x7412:	movups	xmmword ptr [rbp + 0x70], xmm0
0x7416:	call	0x3530


0x2b28:	mov	byte ptr [rip + 0x20b5b9], 1
0x2b2f:	pop	rbp
0x2b30:	ret	


0x2d4c:	mov	rsi, r12
0x2d4f:	mov	rdi, rbx
0x2d52:	call	0x7990


0x770c:	mov	rdi, rbx
0x770f:	call	0x7250


0x780c:	mov	rdi, rbx
0x780f:	call	0x7250


0xa601:	test	rbp, rbp
0xa604:	je	0xa626


0xa626:	add	rsp, 8
0xa62a:	pop	rbx
0xa62b:	pop	rbp
0xa62c:	pop	r12
0xa62e:	pop	r13
0xa630:	pop	r14
0xa632:	pop	r15
0xa634:	ret	


0xa606:	xor	ebx, ebx
0xa608:	nop	dword ptr [rax + rax]
0xa610:	mov	rdx, r15
0xa613:	mov	rsi, r14
0xa616:	mov	edi, r13d
0xa619:	call	qword ptr [r12 + rbx*8]


0x2cf0:	jmp	0x2c6e


0x2c6e:	add	rbx, 1
0x2c72:	movzx	esi, byte ptr [rbx]
0x2c75:	test	sil, sil
0x2c78:	je	0x2cae


0x2cca:	jmp	0x2c6e


0x9fdf:	test	rax, rax
0x9fe2:	je	0x9fe9


0x9fe4:	add	rsp, 8
0x9fe8:	ret	


0x2bea:	mov	rcx, qword ptr [rax]
0x2bed:	mov	rax, rbx
0x2bf0:	jmp	0x2c05


0x2c05:	movzx	edx, byte ptr [rax]
0x2c08:	test	byte ptr [rcx + rdx*2 + 1], 0x10
0x2c0d:	jne	0x2bf8


0x2c0f:	add	rsp, 8
0x2c13:	xor	eax, eax
0x2c15:	pop	rbx
0x2c16:	pop	rbp
0x2c17:	ret	


0x2bf8:	add	rax, 1
0x2bfc:	mov	edx, eax
0x2bfe:	sub	edx, ebx
0x2c00:	cmp	rdx, rbp
0x2c03:	jae	0x2c23


0x2c23:	cmp	byte ptr [rax], 0
0x2c26:	sete	al
0x2c29:	add	rsp, 8
0x2c2d:	pop	rbx
0x2c2e:	pop	rbp
0x2c2f:	ret	


0x7563:	jmp	0x746a


0x72ee:	mov	rdx, rbx
0x72f1:	mov	rsi, rbp
0x72f4:	mov	rdi, r12
0x72f7:	pop	rbx
0x72f8:	pop	rbp
0x72f9:	pop	r12
0x72fb:	jmp	0x3530


0x74db:	mov	rsi, qword ptr [r13 + 0x50]
0x74df:	add	rsi, r14
0x74e2:	cmp	rsi, 0x80
0x74e9:	mov	qword ptr [r13 + 0x50], rsi
0x74ed:	ja	0x7570


0x74f3:	add	rbx, r14
0x74f6:	sub	r12, r14
0x74f9:	jmp	0x7384


0x7570:	and	rsi, 0xffffffffffffff80
0x7574:	mov	rdx, r13
0x7577:	mov	rdi, r15
0x757a:	call	0x3530


0x757f:	mov	rcx, qword ptr [r13 + 0x50]
0x7583:	add	rbp, r14
0x7586:	and	rbp, 0xffffffffffffff80
0x758a:	lea	rsi, [r15 + rbp]
0x758e:	and	ecx, 0x7f
0x7591:	cmp	ecx, 8
0x7594:	mov	qword ptr [r13 + 0x50], rcx
0x7598:	jae	0x75d0


0x759a:	test	cl, 4
0x759d:	jne	0x7605


0x75d0:	mov	rax, qword ptr [rsi]
0x75d3:	lea	rdi, [r13 + 0x60]
0x75d7:	and	rdi, 0xfffffffffffffff8
0x75db:	mov	qword ptr [r13 + 0x58], rax
0x75df:	mov	eax, ecx
0x75e1:	mov	rdx, qword ptr [rsi + rax - 8]
0x75e6:	mov	qword ptr [r15 + rax - 8], rdx
0x75eb:	mov	rax, r15
0x75ee:	sub	rax, rdi
0x75f1:	add	ecx, eax
0x75f3:	sub	rsi, rax
0x75f6:	mov	eax, ecx
0x75f8:	shr	eax, 3
0x75fb:	mov	ecx, eax
0x75fd:	rep movsq	qword ptr [rdi], qword ptr [rsi]


0x759f:	test	ecx, ecx
0x75a1:	je	0x74f3


0x7605:	mov	eax, dword ptr [rsi]
0x7607:	mov	ecx, ecx
0x7609:	mov	dword ptr [r13 + 0x58], eax
0x760d:	mov	eax, dword ptr [rsi + rcx - 4]
0x7611:	mov	dword ptr [r15 + rcx - 4], eax
0x7616:	jmp	0x74f3


0x7600:	jmp	0x74f3


0x75fd:	rep movsq	qword ptr [rdi], qword ptr [rsi]


0x75a7:	movzx	eax, byte ptr [rsi]
0x75aa:	test	cl, 2
0x75ad:	mov	byte ptr [r13 + 0x58], al
0x75b1:	je	0x74f3


0x75b7:	mov	ecx, ecx
0x75b9:	movzx	eax, word ptr [rsi + rcx - 2]
0x75be:	mov	word ptr [r15 + rcx - 2], ax
0x75c4:	jmp	0x74f3


0x7aa3:	test	rax, rax
0x7aa6:	je	0x7afd


0x7afd:	mov	qword ptr [rip + 0x20661c], rbx
0x7b04:	mov	qword ptr [rip + 0x2065b5], rbx
0x7b0b:	pop	rbx
0x7b0c:	ret	


0x7aa8:	lea	r8, [rax + 1]
0x7aac:	mov	rdx, r8
0x7aaf:	sub	rdx, rbx
0x7ab2:	cmp	rdx, 6
0x7ab6:	jle	0x7afd


0x7ab8:	lea	rsi, [rax - 6]
0x7abc:	lea	rdi, [rip + 0x3855]
0x7ac3:	mov	ecx, 7
0x7ac8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x7ac8:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x7aca:	seta	dl
0x7acd:	sbb	dl, 0
0x7ad0:	test	dl, dl
0x7ad2:	jne	0x7afd


0x7ad4:	lea	rdi, [rip + 0x3845]
0x7adb:	mov	ecx, 3
0x7ae0:	mov	rsi, r8
0x7ae3:	mov	rbx, r8
0x7ae6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x7ae6:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x7ae8:	seta	dl
0x7aeb:	sbb	dl, 0
0x7aee:	test	dl, dl
0x7af0:	jne	0x7afd


0x7af2:	lea	rbx, [rax + 4]
0x7af6:	mov	qword ptr [rip + 0x2065a3], rbx
0x7afd:	mov	qword ptr [rip + 0x20661c], rbx
0x7b04:	mov	qword ptr [rip + 0x2065b5], rbx
0x7b0b:	pop	rbx
0x7b0c:	ret	


0x7b2a:	call	0x15c0


0x931d:	mov	qword ptr [rip + 0x204d5c], rbx
0x9324:	pop	rbx
0x9325:	mov	dword ptr [rip + 0x204d49], 1
0x932f:	pop	rbp
0x9330:	pop	r12
0x9332:	ret	


0x92f7:	mov	qword ptr [rip + 0x204d8e], 0x100
0x9302:	mov	qword ptr [rip + 0x204d8f], rbx
0x9309:	lea	rbx, [rip + 0x204d80]
0x9310:	cmp	r12, rbx
0x9313:	je	0x9324


0x9e7d:	xor	eax, eax
0x9e7f:	pop	rbx
0x9e80:	ret	


0x92dc:	cmp	rbx, rbp
0x92df:	jne	0x92d0


0x92d0:	mov	rdi, qword ptr [rbx]
0x92d3:	add	rbx, 0x10
0x92d7:	call	0x15b0


0x980c:	lea	rsi, [rip + 0x2008]
0x9813:	xor	edi, edi
0x9815:	mov	edx, 5
0x981a:	call	0x1660


0x9921:	jmp	0x980c


0x9e66:	test	rax, rax
0x9e69:	jne	0x9e70


0x9e6b:	test	rbx, rbx
0x9e6e:	jne	0x9e81


0x9e70:	pop	rbx
0x9e71:	ret	


0x9e81:	call	0xa040


0xa245:	mov	ebx, eax
0xa247:	jmp	0xa1e0


0xa1e0:	mov	rcx, qword ptr [rsp + 0x18]
0xa1e5:	xor	rcx, qword ptr fs:[0x28]
0xa1ee:	mov	eax, ebx
0xa1f0:	jne	0xa34d


0xa1f6:	add	rsp, 0x50
0xa1fa:	pop	rbx
0xa1fb:	pop	rbp
0xa1fc:	pop	r12
0xa1fe:	ret	


0xa34d:	call	0x1690


0xa1d9:	mov	ebx, eax
0xa1db:	nop	dword ptr [rax + rax]
0xa1e0:	mov	rcx, qword ptr [rsp + 0x18]
0xa1e5:	xor	rcx, qword ptr fs:[0x28]
0xa1ee:	mov	eax, ebx
0xa1f0:	jne	0xa34d


0xa29c:	mov	ebx, eax
0xa29e:	jmp	0xa1e0


0xa185:	test	eax, eax
0xa187:	mov	ebx, eax
0xa189:	js	0xa318


0xa318:	call	0x15d0


0xa18f:	mov	dword ptr [rip + 0x2040df], 1
0xa199:	jmp	0xa1e0


0xa2ac:	test	eax, eax
0xa2ae:	mov	ebx, eax
0xa2b0:	js	0xa1e0


0xa2b6:	cmp	dword ptr [rip + 0x203fbb], -1
0xa2bd:	jne	0xa1e0


0xa2c3:	xor	eax, eax
0xa2c5:	mov	esi, 1
0xa2ca:	mov	edi, ebx
0xa2cc:	call	0x1610


0xa2d1:	test	eax, eax
0xa2d3:	js	0xa2f1


0xa2f1:	call	0x15d0


0xa2d5:	or	eax, 1
0xa2d8:	mov	esi, 2
0xa2dd:	mov	edi, ebx
0xa2df:	mov	edx, eax
0xa2e1:	xor	eax, eax
0xa2e3:	call	0x1610


0xa2e8:	cmp	eax, -1
0xa2eb:	jne	0xa1e0


0xa363:	mov	ebx, eax
0xa365:	jmp	0xa1e0


0xa38e:	test	eax, eax
0xa390:	je	0xa39a


0xa392:	test	dword ptr [rbx], 0x100
0xa398:	jne	0xa3a8


0xa3a8:	mov	rdi, rbx
0xa3ab:	mov	edx, 1
0xa3b0:	xor	esi, esi
0xa3b2:	call	0xa3c0


0x1937:	lea	rsi, [rip + 0x9f23]
0x193e:	mov	edi, 6
0x1943:	call	0x1800


0x79fc:	test	rax, rax
0x79ff:	mov	rbx, rax
0x7a02:	je	0x7a11


0x7a11:	mov	rax, rbx
0x7a14:	pop	rbx
0x7a15:	pop	rbp
0x7a16:	pop	r12
0x7a18:	ret	


0x7a04:	mov	rdi, rax
0x7a07:	call	0x1780


0x2dd2:	test	rax, rax
0x2dd5:	mov	rbx, rax
0x2dd8:	je	0x2e40


0x2e40:	movzx	r12d, byte ptr [rip + 0x20b2aa]
0x2e48:	call	0x15d0


0x2dda:	mov	rdi, rax
0x2ddd:	mov	esi, 2
0x2de2:	call	0x79c0


0x2de7:	mov	rsi, r12
0x2dea:	mov	rdi, rbx
0x2ded:	call	0x7990


0x7c91:	cmp	r15d, 0xa
0x7c95:	mov	qword ptr [rsp + 0x58], rax
0x7c9a:	ja	0x8e4f


0x7ca0:	lea	rcx, [rip + 0x36f9]
0x7ca7:	mov	edx, r15d
0x7caa:	movsxd	rax, dword ptr [rcx + rdx*4]
0x7cae:	add	rax, rcx
0x7cb1:	jmp	rax


0x8e4f:	call	0x15c0


0x2e4d:	mov	rbx, rax
0x2e50:	test	r12b, r12b
0x2e53:	je	0x2e5a


0x2e5a:	mov	rdx, rbp
0x2e5d:	mov	esi, 3
0x2e62:	xor	edi, edi
0x2e64:	call	0x95d0


0x2e55:	cmp	dword ptr [rax], 2
0x2e58:	je	0x2e90


0x2e90:	mov	byte ptr [r13], 1
0x2e95:	jmp	0x2d61


0x2d61:	add	rsp, 8
0x2d65:	mov	eax, r12d
0x2d68:	pop	rbx
0x2d69:	pop	rbp
0x2d6a:	pop	r12
0x2d6c:	pop	r13
0x2d6e:	ret	


0xa2f6:	mov	r12d, dword ptr [rax]
0xa2f9:	mov	rbp, rax
0xa2fc:	mov	edi, ebx
0xa2fe:	call	0x1710


0x1710:	jmp	qword ptr [rip + 0x20c7ba]




0xa31d:	cmp	dword ptr [rax], 0x16
0xa320:	jne	0xa18f


0xa326:	xor	esi, esi
0xa328:	xor	eax, eax
0xa32a:	mov	edx, r12d
0xa32d:	mov	edi, ebp
0xa32f:	call	0x1610


0xa334:	test	eax, eax
0xa336:	mov	ebx, eax
0xa338:	js	0xa1e0


0xa33e:	mov	dword ptr [rip + 0x203f30], 0xffffffff
0xa348:	jmp	0xa2c3


0x8e81:	mov	r13, rax
0x8e84:	mov	eax, dword ptr [rax]
0x8e86:	test	r15d, r15d
0x8e89:	mov	rbx, qword ptr [rip + 0x2051f0]
0x8e90:	mov	dword ptr [rsp + 0x18], eax
0x8e94:	js	0x9001


0x9001:	call	0x15c0


0x8e9a:	cmp	dword ptr [rip + 0x2051d7], r15d
0x8ea1:	jg	0x8f05


0x8ea3:	cmp	r15d, 0x7fffffff
0x8eaa:	je	0x9006


0x8f05:	mov	eax, dword ptr [rbp + 4]
0x8f08:	shl	r15, 4
0x8f0c:	sub	rsp, 8
0x8f10:	add	rbx, r15
0x8f13:	lea	r15, [rbp + 8]
0x8f17:	mov	r8d, dword ptr [rbp]
0x8f1b:	mov	r11, qword ptr [rbx]
0x8f1e:	mov	r12, qword ptr [rbx + 8]
0x8f22:	mov	rcx, r14
0x8f25:	or	eax, 1
0x8f28:	mov	dword ptr [rsp + 0x24], eax
0x8f2c:	push	qword ptr [rbp + 0x30]
0x8f2f:	mov	r9d, eax
0x8f32:	push	qword ptr [rbp + 0x28]
0x8f35:	push	r15
0x8f37:	mov	rsi, r11
0x8f3a:	mov	rdx, qword ptr [rsp + 0x28]
0x8f3f:	mov	rdi, r12
0x8f42:	mov	qword ptr [rsp + 0x30], r11
0x8f47:	call	0x7c20


0x9006:	call	0xa040


0x8eb0:	lea	r12d, [r15 + 1]
0x8eb4:	lea	rax, [rip + 0x2051d5]
0x8ebb:	movsxd	rsi, r12d
0x8ebe:	shl	rsi, 4
0x8ec2:	cmp	rbx, rax
0x8ec5:	je	0x8fe0


0x8fe0:	xor	edi, edi
0x8fe2:	call	0x9e50


0x8ecb:	mov	rdi, rbx
0x8ece:	call	0x9e50


0x8ed3:	mov	rbx, rax
0x8ed6:	mov	qword ptr [rip + 0x2051a3], rax
0x8edd:	movsxd	rdi, dword ptr [rip + 0x205194]
0x8ee4:	mov	edx, r12d
0x8ee7:	xor	esi, esi
0x8ee9:	sub	edx, edi
0x8eeb:	shl	rdi, 4
0x8eef:	movsxd	rdx, edx
0x8ef2:	add	rdi, rbx
0x8ef5:	shl	rdx, 4
0x8ef9:	call	0x1700


0x1700:	jmp	qword ptr [rip + 0x20c7c2]




0x8fe7:	movdqa	xmm0, xmmword ptr [rip + 0x2050a1]
0x8fef:	mov	rbx, rax
0x8ff2:	mov	qword ptr [rip + 0x205087], rax
0x8ff9:	movups	xmmword ptr [rax], xmm0
0x8ffc:	jmp	0x8edd


0x8edd:	movsxd	rdi, dword ptr [rip + 0x205194]
0x8ee4:	mov	edx, r12d
0x8ee7:	xor	esi, esi
0x8ee9:	sub	edx, edi
0x8eeb:	shl	rdi, 4
0x8eef:	movsxd	rdx, edx
0x8ef2:	add	rdi, rbx
0x8ef5:	shl	rdx, 4
0x8ef9:	call	0x1700


0x901c:	mov	r12d, dword ptr [rax]
0x901f:	mov	rbp, rax
0x9022:	lea	rax, [rip + 0x205217]
0x9029:	test	rbx, rbx
0x902c:	mov	esi, 0x38
0x9031:	cmove	rbx, rax
0x9035:	mov	rdi, rbx
0x9038:	call	0x9ff0


0x9152:	mov	r12d, dword ptr [rax]
0x9155:	mov	rbp, rax
0x9158:	lea	rax, [rbx + 8]
0x915c:	sub	rsp, 8
0x9160:	mov	r9d, dword ptr [rbx + 4]
0x9164:	push	qword ptr [rbx + 0x30]
0x9167:	mov	r8d, dword ptr [rbx]
0x916a:	push	qword ptr [rbx + 0x28]
0x916d:	mov	rdx, r15
0x9170:	push	rax
0x9171:	mov	rcx, qword ptr [rsp + 0x28]
0x9176:	mov	rsi, r14
0x9179:	mov	rdi, r13
0x917c:	call	0x7c20


0x91cf:	test	r12, r12
0x91d2:	mov	r13, rax
0x91d5:	mov	eax, dword ptr [rax]
0x91d7:	sete	bpl
0x91db:	or	ebp, dword ptr [rbx + 4]
0x91de:	lea	r10, [rbx + 8]
0x91e2:	sub	rsp, 8
0x91e6:	mov	r8d, dword ptr [rbx]
0x91e9:	mov	rcx, r15
0x91ec:	mov	dword ptr [rsp + 0x14], eax
0x91f0:	push	qword ptr [rbx + 0x30]
0x91f3:	mov	rdx, r14
0x91f6:	push	qword ptr [rbx + 0x28]
0x91f9:	push	r10
0x91fb:	xor	esi, esi
0x91fd:	mov	r9d, ebp
0x9200:	xor	edi, edi
0x9202:	mov	qword ptr [rsp + 0x40], r10
0x9207:	call	0x7c20


0x788c:	test	rax, rax
0x788f:	je	0x7960


0x7960:	mov	eax, 1
0x7965:	jmp	0x78f8


0x7895:	lea	r13, [rsp + 0x10]
0x789a:	mov	rbp, rax
0x789d:	mov	rdi, r13
0x78a0:	call	r12


0x78f8:	mov	rcx, qword ptr [rsp + 0x168]
0x7900:	xor	rcx, qword ptr fs:[0x28]
0x7909:	jne	0x7967


0x790b:	add	rsp, 0x178
0x7912:	pop	rbx
0x7913:	pop	rbp
0x7914:	pop	r12
0x7916:	pop	r13
0x7918:	pop	r14
0x791a:	pop	r15
0x791c:	ret	


0x7967:	call	0x1690


0x9df9:	test	rax, rax
0x9dfc:	jne	0x9e03


0x9dfe:	test	rbx, rbx
0x9e01:	jne	0x9e05


0x9e03:	pop	rbx
0x9e04:	ret	


0x9e05:	call	0xa040


0x9fa9:	mov	rdx, rbx
0x9fac:	xor	esi, esi
0x9fae:	mov	rdi, rax
0x9fb1:	pop	rbx
0x9fb2:	jmp	0x1700


0xa004:	add	rsp, 8
0xa008:	mov	rdx, rbx
0xa00b:	mov	rsi, rbp
0xa00e:	pop	rbx
0xa00f:	pop	rbp
0xa010:	mov	rdi, rax
0xa013:	jmp	0x1770


0xa029:	mov	rdi, rbx
0xa02c:	lea	rsi, [rax + 1]
0xa030:	pop	rbx
0xa031:	jmp	0x9ff0


0x981f:	lea	rdx, [rip + 0x231a]
0x9826:	mov	rcx, rax
0x9829:	mov	r8d, 0x7e3
0x982f:	mov	esi, 1
0x9834:	mov	rdi, rbp
0x9837:	xor	eax, eax
0x9839:	call	0x18a0


0x983e:	lea	rsi, [rip + 0x2063]
0x9845:	xor	edi, edi
0x9847:	mov	edx, 5
0x984c:	call	0x1660


0x9851:	mov	rsi, rbp
0x9854:	mov	rdi, rax
0x9857:	call	0x1740


0x985c:	cmp	r12, 9
0x9860:	ja	0x9ba0


0x9866:	lea	rdx, [rip + 0x229b]
0x986d:	movsxd	rax, dword ptr [rdx + r12*4]
0x9871:	add	rax, rdx
0x9874:	jmp	rax


0x9ba0:	mov	r10, qword ptr [rbx + 0x40]
0x9ba4:	mov	r9, qword ptr [rbx + 0x38]
0x9ba8:	mov	edx, 5
0x9bad:	mov	rax, qword ptr [rbx + 0x10]
0x9bb1:	mov	r8, qword ptr [rbx + 8]
0x9bb5:	lea	rsi, [rip + 0x1ec4]
0x9bbc:	mov	r13, qword ptr [rbx + 0x30]
0x9bc0:	mov	r12, qword ptr [rbx + 0x28]
0x9bc4:	mov	r15, qword ptr [rbx + 0x20]
0x9bc8:	mov	r14, qword ptr [rbx + 0x18]
0x9bcc:	mov	qword ptr [rsp + 0x18], r10
0x9bd1:	mov	qword ptr [rsp + 0x10], r9
0x9bd6:	mov	qword ptr [rsp], rax
0x9bda:	mov	qword ptr [rsp + 8], r8
0x9bdf:	mov	rbx, qword ptr [rbx]
0x9be2:	jmp	0x9972


0x9972:	xor	edi, edi
0x9974:	call	0x1660


0x9979:	mov	r10, qword ptr [rsp + 0x18]
0x997e:	push	r10
0x9980:	jmp	0x98c4


0x98c4:	mov	r9, qword ptr [rsp + 0x18]
0x98c9:	mov	rdx, rax
0x98cc:	mov	rcx, rbx
0x98cf:	mov	esi, 1
0x98d4:	mov	rdi, rbp
0x98d7:	xor	eax, eax
0x98d9:	push	r9
0x98db:	push	r13
0x98dd:	push	r12
0x98df:	push	r15
0x98e1:	push	r14
0x98e3:	mov	r9, qword ptr [rsp + 0x30]
0x98e8:	mov	r8, qword ptr [rsp + 0x38]
0x98ed:	call	0x18a0


0x98f2:	add	rsp, 0x30
0x98f6:	add	rsp, 0x28
0x98fa:	pop	rbx
0x98fb:	pop	rbp
0x98fc:	pop	r12
0x98fe:	pop	r13
0x9900:	pop	r14
0x9902:	pop	r15
0x9904:	ret	


0x9d36:	mov	rax, qword ptr [rsp + 0x78]
0x9d3b:	xor	rax, qword ptr fs:[0x28]
0x9d44:	jne	0x9d50


0x9d46:	add	rsp, 0xb8
0x9d4d:	pop	rbx
0x9d4e:	pop	rbp
0x9d4f:	ret	


0x9d50:	call	0x1690


0x9c60:	mov	rax, qword ptr [rsp + 0x58]
0x9c65:	xor	rax, qword ptr fs:[0x28]
0x9c6e:	jne	0x9c75


0x9c70:	add	rsp, 0x68
0x9c74:	ret	


0x9c75:	call	0x1690


0x2edd:	mov	rdi, qword ptr [rip + 0x20b1fc]
0x2ee4:	mov	rdx, rax
0x2ee7:	mov	rcx, rbx
0x2eea:	mov	esi, 1
0x2eef:	xor	eax, eax
0x2ef1:	call	0x18a0


0x2ef6:	mov	edi, ebp
0x2ef8:	call	0x1880


0x1880:	jmp	qword ptr [rip + 0x20c702]




0x2f0b:	lea	rcx, [rip + 0x7782]
0x2f12:	mov	r8d, 0x180
0x2f18:	mov	rdx, rbx
0x2f1b:	mov	rsi, rax
0x2f1e:	mov	edi, 1
0x2f23:	xor	eax, eax
0x2f25:	call	0x1810


0x1810:	jmp	qword ptr [rip + 0x20c73a]




0x9d84:	lea	rdx, [rip + 0x1aec]
0x9d8b:	mov	rsi, rax
0x9d8e:	mov	edi, 1
0x9d93:	xor	eax, eax
0x9d95:	call	0x1810


0xa057:	mov	edi, dword ptr [rip + 0x203fc3]
0xa05d:	lea	rdx, [rip + 0x11f1]
0xa064:	mov	rcx, rax
0xa067:	xor	esi, esi
0xa069:	xor	eax, eax
0xa06b:	call	0x1830


0x1830:	jmp	qword ptr [rip + 0x20c72a]




0x7a0c:	cmp	eax, 2
0x7a0f:	jbe	0x7a20


0x7a20:	mov	edi, eax
0x7a22:	call	0x97c0


0xa3f3:	mov	edx, r12d
0xa3f6:	mov	rsi, rbp
0xa3f9:	mov	edi, eax
0xa3fb:	call	0x16f0


0x16f0:	jmp	qword ptr [rip + 0x20c7ca]




0x79cd:	mov	ecx, ebx
0x79cf:	xor	edx, edx
0x79d1:	xor	esi, esi
0x79d3:	pop	rbx
0x79d4:	mov	edi, eax
0x79d6:	jmp	0x1720


0xa08c:	test	eax, eax
0xa08e:	mov	rdi, rbx
0xa091:	js	0xa0e7


0xa0e7:	pop	rbx
0xa0e8:	pop	rbp
0xa0e9:	pop	r12
0xa0eb:	jmp	0x1640


0xa093:	call	0x17c0


0x1640:	jmp	qword ptr [rip + 0x20c822]




0xa098:	test	eax, eax
0xa09a:	jne	0xa0c8


0xa09c:	mov	rdi, rbx
0xa09f:	call	0xa380


0xa0c8:	mov	rdi, rbx
0xa0cb:	call	0x1780


0xa0d0:	xor	esi, esi
0xa0d2:	mov	edx, 1
0xa0d7:	mov	edi, eax
0xa0d9:	call	0x16f0


0xa457:	cmp	rax, -3
0xa45b:	mov	rbp, rax
0xa45e:	jbe	0xa480


0xa480:	mov	rdx, qword ptr [rsp + 8]
0xa485:	xor	rdx, qword ptr fs:[0x28]
0xa48e:	mov	rax, rbp
0xa491:	jne	0xa49e


0xa460:	test	r12, r12
0xa463:	je	0xa480


0xa493:	add	rsp, 0x18
0xa497:	pop	rbx
0xa498:	pop	rbp
0xa499:	pop	r12
0xa49b:	pop	r13
0xa49d:	ret	


0xa49e:	call	0x1690


0xa465:	xor	edi, edi
0xa467:	call	0xa530


0xa4bc:	mov	ebx, dword ptr [rbp]
0xa4bf:	mov	rdi, rbp
0xa4c2:	mov	r12, rax
0xa4c5:	call	0xa080


0x1948:	lea	rsi, [rip + 0x8df0]
0x194f:	lea	rdi, [rip + 0x8dc0]
0x1956:	call	0x1650


0x1650:	jmp	qword ptr [rip + 0x20c81a]




0xa53b:	mov	rdx, rax
0xa53e:	mov	eax, 1
0xa543:	test	rdx, rdx
0xa546:	je	0xa565


0xa565:	add	rsp, 8
0xa569:	ret	


0xa548:	lea	rdi, [rip + 0x1631]
0xa54f:	mov	ecx, 2
0xa554:	mov	rsi, rdx
0xa557:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0xa557:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0xa559:	seta	cl
0xa55c:	sbb	cl, 0
0xa55f:	xor	eax, eax
0xa561:	test	cl, cl
0xa563:	jne	0xa570


0xa570:	lea	rdi, [rip + 0x160b]
0xa577:	mov	ecx, 6
0xa57c:	mov	rsi, rdx
0xa57f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0xa57f:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0xa581:	seta	al
0xa584:	sbb	al, 0
0xa586:	test	al, al
0xa588:	setne	al
0xa58b:	add	rsp, 8
0xa58f:	ret	


0xa46c:	test	al, al
0xa46e:	jne	0xa480


0xa470:	movzx	eax, byte ptr [r13]
0xa475:	mov	ebp, 1
0xa47a:	mov	dword ptr [rbx], eax
0xa47c:	nop	dword ptr [rax]
0xa480:	mov	rdx, qword ptr [rsp + 8]
0xa485:	xor	rdx, qword ptr fs:[0x28]
0xa48e:	mov	rax, rbp
0xa491:	jne	0xa49e


0xa59e:	test	rax, rax
0xa5a1:	je	0xa5c0


0xa5c0:	lea	rax, [rip + 0x15c1]
0xa5c7:	add	rsp, 8
0xa5cb:	ret	


0xa5a3:	cmp	byte ptr [rax], 0
0xa5a6:	lea	rdx, [rip + 0x15db]
0xa5ad:	cmove	rax, rdx
0xa5b1:	add	rsp, 8
0xa5b5:	ret	


0x7b40:	movzx	edx, byte ptr [rax]
0x7b43:	and	edx, 0xffffffdf
0x7b46:	cmp	dl, 0x55
0x7b49:	je	0x7bc0


0x7bc0:	movzx	edx, byte ptr [rax + 1]
0x7bc4:	and	edx, 0xffffffdf
0x7bc7:	cmp	dl, 0x54
0x7bca:	jne	0x7b50


0x7b4b:	cmp	dl, 0x47
0x7b4e:	je	0x7b70


0x7bcc:	movzx	edx, byte ptr [rax + 2]
0x7bd0:	and	edx, 0xffffffdf
0x7bd3:	cmp	dl, 0x46
0x7bd6:	jne	0x7b50


0x7b50:	lea	rax, [rip + 0x37dc]
0x7b57:	lea	rdx, [rip + 0x37d7]
0x7b5e:	cmp	ebx, 9
0x7b61:	cmovne	rax, rdx
0x7b65:	add	rsp, 8
0x7b69:	pop	rbx
0x7b6a:	pop	rbp
0x7b6b:	ret	


0x7b70:	movzx	edx, byte ptr [rax + 1]
0x7b74:	and	edx, 0xffffffdf
0x7b77:	cmp	dl, 0x42
0x7b7a:	jne	0x7b50


0x7bdc:	cmp	byte ptr [rax + 3], 0x2d
0x7be0:	jne	0x7b50


0x7b7c:	cmp	byte ptr [rax + 2], 0x31
0x7b80:	jne	0x7b50


0x7be6:	cmp	byte ptr [rax + 4], 0x38
0x7bea:	jne	0x7b50


0x7b82:	cmp	byte ptr [rax + 3], 0x38
0x7b86:	jne	0x7b50


0x7bf0:	cmp	byte ptr [rax + 5], 0
0x7bf4:	jne	0x7b50


0x7b88:	cmp	byte ptr [rax + 4], 0x30
0x7b8c:	jne	0x7b50


0x7bfa:	cmp	byte ptr [rbp], 0x60
0x7bfe:	lea	rax, [rip + 0x371f]
0x7c05:	lea	rdx, [rip + 0x371c]
0x7c0c:	cmovne	rax, rdx
0x7c10:	add	rsp, 8
0x7c14:	pop	rbx
0x7c15:	pop	rbp
0x7c16:	ret	


0x7b8e:	cmp	byte ptr [rax + 5], 0x33
0x7b92:	jne	0x7b50


0x7b94:	cmp	byte ptr [rax + 6], 0x30
0x7b98:	jne	0x7b50


0x7b9a:	cmp	byte ptr [rax + 7], 0
0x7b9e:	jne	0x7b50


0x7ba0:	cmp	byte ptr [rbp], 0x60
0x7ba4:	lea	rax, [rip + 0x3781]
0x7bab:	lea	rdx, [rip + 0x377e]
0x7bb2:	cmovne	rax, rdx
0x7bb6:	add	rsp, 8
0x7bba:	pop	rbx
0x7bbb:	pop	rbp
0x7bbc:	ret	


0x195b:	lea	rdi, [rip + 0x8db4]
0x1962:	call	0x1630


0x1630:	jmp	qword ptr [rip + 0x20c82a]




0xa0de:	cmp	rax, -1
0xa0e2:	jne	0xa09c


0xa0e4:	mov	rdi, rbx
0xa0e7:	pop	rbx
0xa0e8:	pop	rbp
0xa0e9:	pop	r12
0xa0eb:	jmp	0x1640


0xa400:	cmp	rax, -1
0xa404:	je	0xa412


0xa412:	pop	rbx
0xa413:	pop	rbp
0xa414:	pop	r12
0xa416:	ret	


0xa406:	and	dword ptr [rbx], 0xffffffef
0xa409:	mov	qword ptr [rbx + 0x90], rax
0xa410:	xor	eax, eax
0xa412:	pop	rbx
0xa413:	pop	rbp
0xa414:	pop	r12
0xa416:	ret	


0x7a27:	test	eax, eax
0x7a29:	mov	r12d, eax
0x7a2c:	js	0x7a68


0x7a68:	call	0x15d0


0x7a2e:	mov	rdi, rbx
0x7a31:	call	0xa080


0x7a6d:	mov	r12d, dword ptr [rax]
0x7a70:	mov	rbp, rax
0x7a73:	mov	rdi, rbx
0x7a76:	call	0xa080


0xa070:	call	0x15c0


0x9d9a:	lea	rsi, [rip + 0x1aec]
0x9da1:	mov	edx, 5
0x9da6:	xor	edi, edi
0x9da8:	call	0x1660


0x9dad:	lea	rcx, [rip + 0x1004]
0x9db4:	lea	rdx, [rip + 0x957]
0x9dbb:	mov	rsi, rax
0x9dbe:	mov	edi, 1
0x9dc3:	xor	eax, eax
0x9dc5:	call	0x1810


0x9dca:	mov	rbx, qword ptr [rip + 0x2042d7]
0x9dd1:	lea	rsi, [rip + 0x1ce8]
0x9dd8:	xor	edi, edi
0x9dda:	mov	edx, 5
0x9ddf:	call	0x1660


0x9de4:	mov	rsi, rbx
0x9de7:	mov	rdi, rax
0x9dea:	pop	rbx
0x9deb:	jmp	0x1740


0x2f2a:	mov	rbx, qword ptr [rip + 0x20b177]
0x2f31:	lea	rsi, [rip + 0x7990]
0x2f38:	mov	edx, 5
0x2f3d:	xor	edi, edi
0x2f3f:	call	0x1660


0x2f44:	mov	rsi, rbx
0x2f47:	mov	rdi, rax
0x2f4a:	call	0x1740


0x2f4f:	mov	rbx, qword ptr [rip + 0x20b152]
0x2f56:	lea	rsi, [rip + 0x79a3]
0x2f5d:	mov	edx, 5
0x2f62:	xor	edi, edi
0x2f64:	call	0x1660


0x2f69:	mov	rsi, rbx
0x2f6c:	mov	rdi, rax
0x2f6f:	call	0x1740


0x2f74:	lea	rsi, [rip + 0x79b5]
0x2f7b:	xor	edi, edi
0x2f7d:	mov	edx, 5
0x2f82:	call	0x1660


0x2f87:	lea	rdx, [rip + 0x7706]
0x2f8e:	mov	rsi, rax
0x2f91:	mov	edi, 1
0x2f96:	xor	eax, eax
0x2f98:	call	0x1810


0x2f9d:	mov	rbx, qword ptr [rip + 0x20b104]
0x2fa4:	lea	rsi, [rip + 0x79cd]
0x2fab:	mov	edx, 5
0x2fb0:	xor	edi, edi
0x2fb2:	call	0x1660


0x2fb7:	mov	rsi, rbx
0x2fba:	mov	rdi, rax
0x2fbd:	call	0x1740


0x2fc2:	mov	rbx, qword ptr [rip + 0x20b0df]
0x2fc9:	lea	rsi, [rip + 0x79e0]
0x2fd0:	mov	edx, 5
0x2fd5:	xor	edi, edi
0x2fd7:	call	0x1660


0x2fdc:	mov	rsi, rbx
0x2fdf:	mov	rdi, rax
0x2fe2:	call	0x1740


0x2fe7:	mov	rbx, qword ptr [rip + 0x20b0ba]
0x2fee:	lea	rsi, [rip + 0x79f3]
0x2ff5:	mov	edx, 5
0x2ffa:	xor	edi, edi
0x2ffc:	call	0x1660


0x3001:	mov	rsi, rbx
0x3004:	mov	rdi, rax
0x3007:	call	0x1740


0x300c:	mov	rbx, qword ptr [rip + 0x20b095]
0x3013:	lea	rsi, [rip + 0x7a4e]
0x301a:	mov	edx, 5
0x301f:	xor	edi, edi
0x3021:	call	0x1660


0x3026:	mov	rsi, rbx
0x3029:	mov	rdi, rax
0x302c:	call	0x1740


0x3031:	mov	rbx, qword ptr [rip + 0x20b070]
0x3038:	lea	rsi, [rip + 0x7be1]
0x303f:	mov	edx, 5
0x3044:	xor	edi, edi
0x3046:	call	0x1660


0x304b:	mov	rsi, rbx
0x304e:	mov	rdi, rax
0x3051:	call	0x1740


0x3056:	mov	rbx, qword ptr [rip + 0x20b04b]
0x305d:	lea	rsi, [rip + 0x7bec]
0x3064:	mov	edx, 5
0x3069:	xor	edi, edi
0x306b:	call	0x1660


0x3070:	mov	rsi, rbx
0x3073:	mov	rdi, rax
0x3076:	lea	rbx, [rip + 0x760d]
0x307d:	call	0x1740


0x3082:	lea	rsi, [rip + 0x7bff]
0x3089:	xor	edi, edi
0x308b:	mov	edx, 5
0x3090:	call	0x1660


0x3095:	lea	rdx, [rip + 0x75ff]
0x309c:	mov	rsi, rax
0x309f:	mov	edi, 1
0x30a4:	xor	eax, eax
0x30a6:	call	0x1810


0x30ab:	lea	rax, [rip + 0x75f4]
0x30b2:	lea	rcx, [rip + 0x762e]
0x30b9:	mov	qword ptr [rsp + 0x40], rbx
0x30be:	mov	qword ptr [rsp + 0x60], 0
0x30c7:	mov	qword ptr [rsp + 0x68], 0
0x30d0:	mov	rdx, rsp
0x30d3:	mov	qword ptr [rsp], rax
0x30d7:	lea	rax, [rip + 0x75ca]
0x30de:	mov	qword ptr [rsp + 0x30], rcx
0x30e3:	lea	rcx, [rip + 0x7607]
0x30ea:	mov	qword ptr [rsp + 8], rax
0x30ef:	lea	rax, [rip + 0x7620]
0x30f6:	mov	qword ptr [rsp + 0x50], rcx
0x30fb:	mov	qword ptr [rsp + 0x10], rax
0x3100:	lea	rax, [rip + 0x75b1]
0x3107:	mov	qword ptr [rsp + 0x18], rax
0x310c:	lea	rax, [rip + 0x75bb]
0x3113:	mov	qword ptr [rsp + 0x20], rax
0x3118:	lea	rax, [rip + 0x75b9]
0x311f:	mov	qword ptr [rsp + 0x28], rax
0x3124:	mov	qword ptr [rsp + 0x38], rax
0x3129:	mov	qword ptr [rsp + 0x48], rax
0x312e:	mov	qword ptr [rsp + 0x58], rax
0x3133:	nop	dword ptr [rax + rax]
0x3138:	add	rdx, 0x10
0x313c:	mov	rdi, qword ptr [rdx]
0x313f:	test	rdi, rdi
0x3142:	je	0x3157


0x3157:	mov	r12, qword ptr [rdx + 8]
0x315b:	xor	edi, edi
0x315d:	mov	edx, 5
0x3162:	lea	rsi, [rip + 0x7592]
0x3169:	test	r12, r12
0x316c:	je	0x3233


0x3144:	mov	ecx, 0xa
0x3149:	mov	rsi, rbx
0x314c:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x3233:	call	0x1660


0x3172:	call	0x1660


0x314c:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x314e:	seta	al
0x3151:	sbb	al, 0
0x3153:	test	al, al
0x3155:	jne	0x3138


0x3138:	add	rdx, 0x10
0x313c:	mov	rdi, qword ptr [rdx]
0x313f:	test	rdi, rdi
0x3142:	je	0x3157


0x3177:	lea	rcx, [rip + 0x7c3a]
0x317e:	lea	rdx, [rip + 0x758d]
0x3185:	mov	rsi, rax
0x3188:	mov	edi, 1
0x318d:	xor	eax, eax
0x318f:	call	0x1810


0x3194:	xor	esi, esi
0x3196:	mov	edi, 5
0x319b:	call	0x1800


0x31a0:	test	rax, rax
0x31a3:	je	0x31c1


0x31c1:	lea	rsi, [rip + 0x755c]
0x31c8:	xor	edi, edi
0x31ca:	mov	edx, 5
0x31cf:	call	0x1660


0x31a5:	lea	rsi, [rip + 0x7574]
0x31ac:	mov	edx, 3
0x31b1:	mov	rdi, rax
0x31b4:	call	0x15e0


0x15e0:	jmp	qword ptr [rip + 0x20c852]




0x31d4:	lea	rcx, [rip + 0x74af]
0x31db:	lea	rdx, [rip + 0x7bd6]
0x31e2:	mov	rsi, rax
0x31e5:	mov	edi, 1
0x31ea:	xor	eax, eax
0x31ec:	call	0x1810


0x31f1:	cmp	r12, rbx
0x31f4:	lea	rcx, [rip + 0x74c7]
0x31fb:	lea	rbx, [rip + 0x865f]
0x3202:	cmove	rbx, rcx
0x3206:	lea	rsi, [rip + 0x7c1b]
0x320d:	xor	edi, edi
0x320f:	mov	edx, 5
0x3214:	call	0x1660


0x3219:	mov	rcx, rbx
0x321c:	mov	rsi, rax
0x321f:	mov	rdx, r12
0x3222:	mov	edi, 1
0x3227:	xor	eax, eax
0x3229:	call	0x1810


0x322e:	jmp	0x2ef6


0x3238:	lea	rcx, [rip + 0x7b79]
0x323f:	lea	rdx, [rip + 0x74cc]
0x3246:	mov	rsi, rax
0x3249:	mov	edi, 1
0x324e:	xor	eax, eax
0x3250:	call	0x1810


0x3255:	xor	esi, esi
0x3257:	mov	edi, 5
0x325c:	call	0x1800


0x3261:	test	rax, rax
0x3264:	je	0x327e


0x327e:	lea	rsi, [rip + 0x749f]
0x3285:	mov	edx, 5
0x328a:	xor	edi, edi
0x328c:	lea	r12, [rip + 0x73f7]
0x3293:	lea	rbx, [rip + 0x7428]
0x329a:	call	0x1660


0x3266:	lea	rsi, [rip + 0x74b3]
0x326d:	mov	edx, 3
0x3272:	mov	rdi, rax
0x3275:	call	0x15e0


0x329f:	lea	rcx, [rip + 0x73e4]
0x32a6:	lea	rdx, [rip + 0x7b0b]
0x32ad:	mov	rsi, rax
0x32b0:	mov	edi, 1
0x32b5:	xor	eax, eax
0x32b7:	call	0x1810


0x32bc:	jmp	0x3206


0x3206:	lea	rsi, [rip + 0x7c1b]
0x320d:	xor	edi, edi
0x320f:	mov	edx, 5
0x3214:	call	0x1660


0x903d:	mov	dword ptr [rbp], r12d
0x9041:	pop	rbx
0x9042:	pop	rbp
0x9043:	pop	r12
0x9045:	ret	


0x8efe:	mov	dword ptr [rip + 0x205173], r12d
0x8f05:	mov	eax, dword ptr [rbp + 4]
0x8f08:	shl	r15, 4
0x8f0c:	sub	rsp, 8
0x8f10:	add	rbx, r15
0x8f13:	lea	r15, [rbp + 8]
0x8f17:	mov	r8d, dword ptr [rbp]
0x8f1b:	mov	r11, qword ptr [rbx]
0x8f1e:	mov	r12, qword ptr [rbx + 8]
0x8f22:	mov	rcx, r14
0x8f25:	or	eax, 1
0x8f28:	mov	dword ptr [rsp + 0x24], eax
0x8f2c:	push	qword ptr [rbp + 0x30]
0x8f2f:	mov	r9d, eax
0x8f32:	push	qword ptr [rbp + 0x28]
0x8f35:	push	r15
0x8f37:	mov	rsi, r11
0x8f3a:	mov	rdx, qword ptr [rsp + 0x28]
0x8f3f:	mov	rdi, r12
0x8f42:	mov	qword ptr [rsp + 0x30], r11
0x8f47:	call	0x7c20


0xa303:	mov	ebx, 0xffffffff
0xa308:	mov	dword ptr [rbp], r12d
0xa30c:	jmp	0xa1e0


0xa3b7:	mov	rdi, rbx
0xa3ba:	pop	rbx
0xa3bb:	jmp	0x17a0


0x2df2:	test	eax, eax
0x2df4:	jne	0x2d70


0x2dfa:	mov	rdi, rbx
0x2dfd:	call	0xa080


0x2d70:	mov	rdx, rbp
0x2d73:	xor	edi, edi
0x2d75:	mov	esi, 3
0x2d7a:	call	0x95d0


0x2d57:	test	eax, eax
0x2d59:	jne	0x2d70


0x2d5b:	mov	r12d, 1
0x2d61:	add	rsp, 8
0x2d65:	mov	eax, r12d
0x2d68:	pop	rbx
0x2d69:	pop	rbp
0x2d6a:	pop	r12
0x2d6c:	pop	r13
0x2d6e:	ret	


0x7814:	mov	rsi, rbp
0x7817:	mov	rdi, rbx
0x781a:	call	0x3510


0x781f:	mov	rcx, qword ptr [rsp + 0x158]
0x7827:	xor	rcx, qword ptr fs:[0x28]
0x7830:	jne	0x783c


0x7832:	add	rsp, 0x168
0x7839:	pop	rbx
0x783a:	pop	rbp
0x783b:	ret	


0x783c:	call	0x1690


0x7714:	mov	rsi, rbp
0x7717:	mov	rdi, rbx
0x771a:	call	0x34f0


0x771f:	mov	rcx, qword ptr [rsp + 0x158]
0x7727:	xor	rcx, qword ptr fs:[0x28]
0x7730:	jne	0x773c


0x7732:	add	rsp, 0x168
0x7739:	pop	rbx
0x773a:	pop	rbp
0x773b:	ret	


0x773c:	call	0x1690


0x7311:	add	rsp, 8
0x7315:	mov	rsi, rbp
0x7318:	mov	rdi, rbx
0x731b:	pop	rbx
0x731c:	pop	rbp
0x731d:	jmp	0x34f0


0x7341:	add	rsp, 8
0x7345:	mov	rsi, rbp
0x7348:	mov	rdi, rbx
0x734b:	pop	rbx
0x734c:	pop	rbp
0x734d:	jmp	0x3510


0x327a:	test	eax, eax
0x327c:	jne	0x32c1


0x32c1:	lea	r12, [rip + 0x73c2]
0x32c8:	mov	r13, qword ptr [rip + 0x20add9]
0x32cf:	lea	rsi, [rip + 0x7b0a]
0x32d6:	xor	edi, edi
0x32d8:	mov	edx, 5
0x32dd:	call	0x1660


0x32e2:	mov	rsi, r13
0x32e5:	mov	rdi, rax
0x32e8:	call	0x1740


0x32ed:	jmp	0x31c1


0x31b9:	test	eax, eax
0x31bb:	jne	0x32c8


0x32c8:	mov	r13, qword ptr [rip + 0x20add9]
0x32cf:	lea	rsi, [rip + 0x7b0a]
0x32d6:	xor	edi, edi
0x32d8:	mov	edx, 5
0x32dd:	call	0x1660


0x1967:	lea	rdi, [rip + 0x19b2]
0x196e:	call	0xa650


0x1973:	mov	rdi, qword ptr [rip + 0x20c72e]
0x197a:	xor	ecx, ecx
0x197c:	mov	edx, 1
0x1981:	xor	esi, esi
0x1983:	call	0x1820


0x1820:	jmp	qword ptr [rip + 0x20c732]




0xa0a4:	test	eax, eax
0xa0a6:	je	0xa0e4


0xa0a8:	call	0x15d0


0xa0ad:	mov	r12d, dword ptr [rax]
0xa0b0:	mov	rdi, rbx
0xa0b3:	mov	rbp, rax
0xa0b6:	call	0x1640


0xa0bb:	test	r12d, r12d
0xa0be:	jne	0xa0f0


0xa0c0:	pop	rbx
0xa0c1:	pop	rbp
0xa0c2:	pop	r12
0xa0c4:	ret	


0xa0f0:	mov	dword ptr [rbp], r12d
0xa0f4:	mov	eax, 0xffffffff
0xa0f9:	jmp	0xa0c0


0x2e02:	test	eax, eax
0x2e04:	je	0x2d5b


0x2e0a:	mov	rdx, rbp
0x2e0d:	mov	esi, 3
0x2e12:	xor	edi, edi
0x2e14:	call	0x95d0


0x7a7b:	xor	ebx, ebx
0x7a7d:	mov	dword ptr [rbp], r12d
0x7a81:	jmp	0x7a11


0x7a36:	test	eax, eax
0x7a38:	jne	0x7a4d


0x7a3a:	mov	rsi, rbp
0x7a3d:	mov	edi, r12d
0x7a40:	call	0x17f0


0x7a4d:	call	0x15d0


0x17f0:	jmp	qword ptr [rip + 0x20c74a]




0x7a52:	mov	ebp, dword ptr [rax]
0x7a54:	mov	rbx, rax
0x7a57:	mov	edi, r12d
0x7a5a:	call	0x1710


0x7a5f:	mov	dword ptr [rbx], ebp
0x7a61:	xor	ebx, ebx
0x7a63:	jmp	0x7a11


0xa4ca:	and	ebx, 0x20
0xa4cd:	test	ebx, ebx
0xa4cf:	jne	0xa4e8


0xa4d1:	test	eax, eax
0xa4d3:	je	0xa4df


0xa4e8:	test	eax, eax
0xa4ea:	jne	0xa508


0xa4df:	pop	rbx
0xa4e0:	pop	rbp
0xa4e1:	pop	r12
0xa4e3:	ret	


0xa4d5:	test	r12, r12
0xa4d8:	mov	eax, 0xffffffff
0xa4dd:	je	0xa518


0xa4ec:	call	0x15d0


0xa508:	pop	rbx
0xa509:	mov	eax, 0xffffffff
0xa50e:	pop	rbp
0xa50f:	pop	r12
0xa511:	ret	


0xa518:	call	0x15d0


0xa51d:	cmp	dword ptr [rax], 9
0xa520:	pop	rbx
0xa521:	pop	rbp
0xa522:	pop	r12
0xa524:	setne	al
0xa527:	movzx	eax, al
0xa52a:	neg	eax
0xa52c:	ret	


0xa4f1:	mov	dword ptr [rax], 0
0xa4f7:	mov	eax, 0xffffffff
0xa4fc:	pop	rbx
0xa4fd:	pop	rbp
0xa4fe:	pop	r12
0xa500:	ret	


0x3332:	test	eax, eax
0x3334:	je	0x334c


0x334c:	mov	rdi, qword ptr [rip + 0x20ad8d]
0x3353:	call	0xa4b0


0x3336:	call	0x15d0


0x333b:	cmp	byte ptr [rip + 0x20adce], 0
0x3342:	mov	rbx, rax
0x3345:	je	0x3363


0x3363:	lea	rsi, [rip + 0x7edb]
0x336a:	xor	edi, edi
0x336c:	mov	edx, 5
0x3371:	call	0x1660


0x3347:	cmp	dword ptr [rax], 0x20
0x334a:	jne	0x3363


0x3376:	mov	rdi, qword ptr [rip + 0x20ad9b]
0x337d:	mov	rbp, rax
0x3380:	test	rdi, rdi
0x3383:	je	0x33ad


0x33ad:	mov	esi, dword ptr [rbx]
0x33af:	lea	rdx, [rip + 0x7e9f]
0x33b6:	mov	rcx, rax
0x33b9:	xor	edi, edi
0x33bb:	xor	eax, eax
0x33bd:	call	0x1830


0x3385:	call	0x95a0


0x33c2:	jmp	0x33a2


0x33a2:	mov	edi, dword ptr [rip + 0x20ac78]
0x33a8:	call	0x15f0


0x15f0:	jmp	qword ptr [rip + 0x20c84a]




0x3358:	test	eax, eax
0x335a:	jne	0x33a2


0x335c:	add	rsp, 8
0x3360:	pop	rbx
0x3361:	pop	rbp
0x3362:	ret	


0x7a45:	test	rax, rax
0x7a48:	mov	rbx, rax
0x7a4b:	jne	0x7a11


0x1988:	mov	byte ptr [rsp + 0x78], 0
0x198d:	mov	byte ptr [rsp + 0x2b], 0
0x1992:	nop	word ptr [rax + rax]
0x1998:	lea	rcx, [rip + 0x20c081]
0x199f:	lea	rdx, [rip + 0x8dda]
0x19a6:	xor	r8d, r8d
0x19a9:	mov	rsi, rbx
0x19ac:	mov	edi, r12d
0x19af:	call	0x16a0


0x16a0:	jmp	qword ptr [rip + 0x20c7f2]




0x19b4:	cmp	eax, -1
0x19b7:	je	0x1b3c


0x1b3c:	test	ebp, ebp
0x1b3e:	mov	qword ptr [rip + 0x20c5b7], 0x62
0x1b49:	mov	qword ptr [rip + 0x20c5a4], 0x60
0x1b54:	sete	al
0x1b57:	test	byte ptr [rsp + 0x78], al
0x1b5b:	jne	0x2a1b


0x19bd:	cmp	eax, 0x77
0x19c0:	je	0x1aa0


0x1b61:	cmp	byte ptr [rip + 0x20c4a8], 0xa
0x1b68:	je	0x1bda


0x2a1b:	mov	edx, 5
0x2a20:	lea	rsi, [rip + 0x8439]
0x2a27:	jmp	0x1bbb


0x1aa0:	mov	byte ptr [rip + 0x20c64d], 0
0x1aa7:	mov	byte ptr [rip + 0x20c645], 1
0x1aae:	mov	byte ptr [rip + 0x20c63c], 0
0x1ab5:	jmp	0x1998


0x19c6:	jle	0x1a00


0x1bda:	cmp	byte ptr [rsp + 0x2b], 0
0x1bdf:	je	0x1bf4


0x1b6a:	cmp	byte ptr [rsp + 0x2b], 0
0x1b6f:	mov	edx, 5
0x1b74:	lea	rsi, [rip + 0x930d]
0x1b7b:	jne	0x1bbb


0x1bbb:	xor	edi, edi
0x1bbd:	call	0x1660


0x1998:	lea	rcx, [rip + 0x20c081]
0x199f:	lea	rdx, [rip + 0x8dda]
0x19a6:	xor	r8d, r8d
0x19a9:	mov	rsi, rbx
0x19ac:	mov	edi, r12d
0x19af:	call	0x16a0


0x1a00:	cmp	eax, 0x62
0x1a03:	je	0x1b20


0x19c8:	cmp	eax, 0x81
0x19cd:	je	0x1af0


0x1bf4:	test	ebp, ebp
0x1bf6:	js	0x1c0b


0x1be1:	cmp	byte ptr [rsp + 0x78], 0
0x1be6:	mov	edx, 5
0x1beb:	lea	rsi, [rip + 0x92d6]
0x1bf2:	jne	0x1bbb


0x1b7d:	cmp	byte ptr [rip + 0x20c56e], 0
0x1b84:	jne	0x2a2c


0x1b20:	mov	ebp, 1
0x1b25:	jmp	0x1998


0x1a09:	jle	0x1a50


0x1af0:	mov	byte ptr [rip + 0x20c5fd], 1
0x1af7:	mov	byte ptr [rip + 0x20c5f5], 0
0x1afe:	mov	byte ptr [rip + 0x20c5ec], 0
0x1b05:	jmp	0x1998


0x19d3:	jle	0x1a28


0x1c0b:	cmp	byte ptr [rip + 0x20c4e0], 0
0x1c12:	je	0x29e8


0x1bf8:	cmp	byte ptr [rsp + 0x2b], 0
0x1bfd:	mov	edx, 5
0x1c02:	lea	rsi, [rip + 0x92ff]
0x1c09:	jne	0x1bbb


0x1b8a:	cmp	byte ptr [rip + 0x20c563], 0
0x1b91:	jne	0x2a00


0x2a2c:	mov	edx, 5
0x2a31:	lea	rsi, [rip + 0x8520]
0x2a38:	jmp	0x1bbb


0x1a50:	cmp	eax, 0xffffff7d
0x1a55:	jne	0x29d1


0x1a0b:	cmp	eax, 0x63
0x1a0e:	je	0x1b10


0x1a28:	cmp	eax, 0x7a
0x1a2b:	je	0x1b30


0x19d5:	cmp	eax, 0x83
0x19da:	je	0x1ae0


0x29e8:	cmp	byte ptr [rip + 0x20b705], 0
0x29ef:	je	0x1b97


0x1c18:	cmp	byte ptr [rsp + 0x2b], 0
0x1c1d:	je	0x2a2c


0x1b97:	cmp	byte ptr [rip + 0x20c555], 0
0x1b9e:	je	0x1ea5


0x2a00:	mov	edx, 5
0x2a05:	lea	rsi, [rip + 0x8594]
0x2a0c:	jmp	0x1bbb


0x1a5b:	lea	rax, [rip + 0x8d11]
0x1a62:	mov	rdi, qword ptr [rip + 0x20c63f]
0x1a69:	mov	rcx, qword ptr [rip + 0x20c5a8]
0x1a70:	push	0
0x1a72:	lea	r9, [rip + 0x8cde]
0x1a79:	lea	r8, [rip + 0x8ce4]
0x1a80:	push	rax
0x1a81:	lea	rdx, [rip + 0x8c8a]
0x1a88:	lea	rsi, [rip + 0x8bfb]
0x1a8f:	xor	eax, eax
0x1a91:	call	0x9c90


0x29d1:	cmp	eax, 0xffffff7e
0x29d6:	jne	0x1bd0


0x1b10:	mov	byte ptr [rsp + 0x2b], 1
0x1b15:	jmp	0x1998


0x1a14:	cmp	eax, 0x74
0x1a17:	jne	0x1bd0


0x1b30:	mov	byte ptr [rip + 0x20c4d9], 0
0x1b37:	jmp	0x1998


0x1a31:	add	eax, -0x80
0x1a34:	jne	0x1bd0


0x1ae0:	mov	byte ptr [rip + 0x20c609], 1
0x1ae7:	jmp	0x1998


0x19e0:	jl	0x1ac0


0x29f5:	cmp	byte ptr [rsp + 0x2b], 0
0x29fa:	jne	0x25ad


0x1c23:	cmp	byte ptr [rip + 0x20c4ca], 0
0x1c2a:	je	0x25ad


0x1ea5:	cmp	byte ptr [rip + 0x20c245], 1
0x1eac:	jne	0x1ec5


0x1ba4:	cmp	byte ptr [rsp + 0x2b], 0
0x1ba9:	mov	edx, 5
0x1bae:	lea	rsi, [rip + 0x942b]
0x1bb5:	jne	0x1c3d


0x29dc:	xor	edi, edi
0x29de:	call	0x2ea0


0x1bd0:	mov	edi, 1
0x1bd5:	call	0x2ea0


0x1a1d:	xor	ebp, ebp
0x1a1f:	jmp	0x1998


0x1a3a:	mov	byte ptr [rip + 0x20c6b1], 1
0x1a41:	jmp	0x1998


0x1ac0:	mov	byte ptr [rip + 0x20c62d], 0
0x1ac7:	mov	byte ptr [rip + 0x20c625], 0
0x1ace:	mov	byte ptr [rip + 0x20c61c], 1
0x1ad5:	jmp	0x1998


0x19e6:	cmp	eax, 0x84
0x19eb:	jne	0x1bd0


0x25ad:	cmp	byte ptr [rip + 0x20bb3f], 0
0x25b4:	jne	0x1c3d


0x1c30:	cmp	byte ptr [rip + 0x20c4bc], 0
0x1c37:	je	0x1ea5


0x1eae:	cmp	byte ptr [rsp + 0x2b], 0
0x1eb3:	mov	edx, 5
0x1eb8:	lea	rsi, [rip + 0x9161]
0x1ebf:	je	0x1bbb


0x1ec5:	cmp	byte ptr [rip + 0x20c224], 0
0x1ecc:	je	0x1c3d


0x1c3d:	cmp	ebp, -1
0x1c40:	jne	0x1c44


0x19f1:	mov	byte ptr [rsp + 0x78], 1
0x19f6:	mov	ebp, 1
0x19fb:	jmp	0x1998


0x25ba:	jmp	0x1ec5


0x1ed2:	cmp	byte ptr [rsp + 0x2b], 0
0x1ed7:	mov	edx, 5
0x1edc:	lea	rsi, [rip + 0x917d]
0x1ee3:	jne	0x1c3d


0x1c42:	xor	ebp, ebp
0x1c44:	movsxd	rax, r12d
0x1c47:	lea	rax, [rbx + rax*8]
0x1c4b:	mov	qword ptr [rsp + 0x48], rax
0x1c50:	movsxd	rax, dword ptr [rip + 0x20c461]
0x1c57:	cmp	eax, r12d
0x1c5a:	jne	0x1c75


0x1c44:	movsxd	rax, r12d
0x1c47:	lea	rax, [rbx + rax*8]
0x1c4b:	mov	qword ptr [rsp + 0x48], rax
0x1c50:	movsxd	rax, dword ptr [rip + 0x20c461]
0x1c57:	cmp	eax, r12d
0x1c5a:	jne	0x1c75


0x1ee9:	jmp	0x1bbb


0x1c5c:	mov	rdi, qword ptr [rsp + 0x48]
0x1c61:	lea	rsi, [rip + 0x96ba]
0x1c68:	add	rdi, 8
0x1c6c:	mov	qword ptr [rdi - 8], rsi
0x1c70:	mov	qword ptr [rsp + 0x48], rdi
0x1c75:	lea	rax, [rbx + rax*8]
0x1c79:	cmp	qword ptr [rsp + 0x48], rax
0x1c7e:	mov	qword ptr [rsp + 0x18], rax
0x1c83:	jbe	0x2934


0x1c75:	lea	rax, [rbx + rax*8]
0x1c79:	cmp	qword ptr [rsp + 0x48], rax
0x1c7e:	mov	qword ptr [rsp + 0x18], rax
0x1c83:	jbe	0x2934


0x2934:	mov	byte ptr [rsp + 0x79], 1
0x2939:	jmp	0x2383


0x1c89:	cmp	ebp, 1
0x1c8c:	lea	r14, [rip + 0x959d]
0x1c93:	mov	byte ptr [rsp + 0x79], 1
0x1c98:	sbb	eax, eax
0x1c9a:	and	eax, 0xfffffff6
0x1c9d:	add	eax, 0x2a
0x1ca0:	mov	dword ptr [rsp + 0x7c], eax
0x1ca4:	mov	byte ptr [rsp + 0x7b], al
0x1ca8:	nop	dword ptr [rax + rax]
0x1cb0:	mov	rax, qword ptr [rsp + 0x18]
0x1cb5:	cmp	byte ptr [rsp + 0x2b], 0
0x1cba:	mov	rsi, qword ptr [rax]
0x1cbd:	mov	qword ptr [rsp + 0x20], rsi
0x1cc2:	je	0x2340


0x2383:	cmp	byte ptr [rip + 0x20bd7e], 0
0x238a:	jne	0x2700


0x2340:	lea	rax, [rsp + 0x98]
0x2348:	lea	rbx, [rsp + 0xa0]
0x2350:	mov	rdi, qword ptr [rsp + 0x20]
0x2355:	mov	rdx, rax
0x2358:	mov	rsi, rbx
0x235b:	call	0x2d00


0x1cc8:	lea	rdi, [rip + 0x9653]
0x1ccf:	mov	ecx, 2
0x1cd4:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x2390:	movzx	eax, byte ptr [rsp + 0x79]
0x2395:	xor	eax, 1
0x2398:	mov	rdi, qword ptr [rsp + 0x118]
0x23a0:	xor	rdi, qword ptr fs:[0x28]
0x23a9:	movzx	eax, al
0x23ac:	jne	0x29e3


0x2700:	mov	rdi, qword ptr [rip + 0x20b9a9]
0x2707:	call	0xa080


0x1cd4:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1cd6:	seta	al
0x1cd9:	sbb	al, 0
0x1cdb:	movsx	eax, al
0x1cde:	test	eax, eax
0x1ce0:	mov	dword ptr [rsp + 0x2c], eax
0x1ce4:	jne	0x2415


0x23b2:	add	rsp, 0x128
0x23b9:	pop	rbx
0x23ba:	pop	rbp
0x23bb:	pop	r12
0x23bd:	pop	r13
0x23bf:	pop	r14
0x23c1:	pop	r15
0x23c3:	ret	


0x29e3:	call	0x1690


0x1cea:	lea	rsi, [rip + 0x8a95]
0x1cf1:	mov	edx, 5
0x1cf6:	xor	edi, edi
0x1cf8:	mov	byte ptr [rip + 0x20c409], 1
0x1cff:	call	0x1660


0x2415:	mov	rdi, qword ptr [rsp + 0x20]
0x241a:	lea	rsi, [rip + 0x8341]
0x2421:	call	0x79f0


0x2426:	test	rax, rax
0x2429:	mov	r12, rax
0x242c:	jne	0x1d10


0x2432:	mov	rdx, qword ptr [rsp + 0x20]
0x2437:	mov	esi, 3
0x243c:	xor	edi, edi
0x243e:	call	0x95d0


0x1d10:	lea	rax, [rsp + 0x98]
0x1d18:	mov	qword ptr [rsp + 0x90], 0
0x1d24:	mov	qword ptr [rsp + 0x98], 0
0x1d30:	mov	byte ptr [rsp + 0x7a], 0
0x1d35:	mov	byte ptr [rsp + 0x30], 0
0x1d3a:	xor	r13d, r13d
0x1d3d:	mov	qword ptr [rsp + 0x10], rax
0x1d42:	lea	rax, [rsp + 0x90]
0x1d4a:	mov	qword ptr [rsp + 0x58], 0
0x1d53:	mov	qword ptr [rsp + 0x50], 0
0x1d5c:	mov	ebp, 1
0x1d61:	mov	qword ptr [rsp + 8], rax
0x1d66:	lea	rax, [rsp + 0x8f]
0x1d6e:	mov	qword ptr [rsp + 0x40], rax
0x1d73:	lea	rax, [rsp + 0xe0]
0x1d7b:	mov	qword ptr [rsp + 0x38], rax
0x1d80:	mov	rsi, qword ptr [rsp + 0x10]
0x1d85:	mov	rdi, qword ptr [rsp + 8]
0x1d8a:	mov	rcx, r12
0x1d8d:	mov	edx, 0xa
0x1d92:	call	0x1760


0x1760:	jmp	qword ptr [rip + 0x20c792]




0x270c:	add	eax, 1
0x270f:	jne	0x2390


0x2715:	lea	rsi, [rip + 0x806a]
0x271c:	mov	edx, 5
0x2721:	xor	edi, edi
0x2723:	call	0x1660


0x2360:	test	al, al
0x2362:	jne	0x2467


0x2368:	mov	byte ptr [rsp + 0x79], 0
0x236d:	add	qword ptr [rsp + 0x18], 8
0x2373:	mov	rax, qword ptr [rsp + 0x18]
0x2378:	cmp	qword ptr [rsp + 0x48], rax
0x237d:	ja	0x1cb0


0x2467:	mov	rdi, qword ptr [rsp + 0x20]
0x246c:	mov	esi, 0x5c
0x2471:	call	0x16c0


0x1cb0:	mov	rax, qword ptr [rsp + 0x18]
0x1cb5:	cmp	byte ptr [rsp + 0x2b], 0
0x1cba:	mov	rsi, qword ptr [rax]
0x1cbd:	mov	qword ptr [rsp + 0x20], rsi
0x1cc2:	je	0x2340


0x16c0:	jmp	qword ptr [rip + 0x20c7e2]




0x1a96:	xor	edi, edi
0x1a98:	call	0x1880


0x2728:	mov	rbx, rax
0x272b:	call	0x15d0


0x2730:	mov	esi, dword ptr [rax]
0x2732:	mov	rdx, rbx
0x2735:	mov	edi, 1
0x273a:	xor	eax, eax
0x273c:	call	0x1830


0x2741:	mov	rsi, r15
0x2744:	mov	rdi, rbx
0x2747:	mov	qword ptr [rsp + 0x60], r8
0x274c:	sub	rsi, rax
0x274f:	call	0x2b50


0x2754:	mov	r8, qword ptr [rsp + 0x60]
0x2759:	test	rax, rax
0x275c:	setne	al
0x275f:	test	al, al
0x2761:	jne	0x1fa6


0x2767:	jmp	0x1e44


0x1fa6:	mov	eax, dword ptr [rsp + 0x2c]
0x1faa:	test	eax, eax
0x1fac:	jne	0x1fcc


0x1e44:	add	r13, 1
0x1e48:	cmp	byte ptr [rip + 0x20c2a4], 0
0x1e4f:	jne	0x21d0


0x1fae:	lea	rdi, [rip + 0x936d]
0x1fb5:	mov	ecx, 2
0x1fba:	mov	rsi, rbx
0x1fbd:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1fcc:	xor	r15d, r15d
0x1fcf:	cmp	byte ptr [rip + 0x20c11e], 0
0x1fd6:	jne	0x1ff9


0x1e55:	test	byte ptr [r12], 0x30
0x1e5a:	jne	0x209c


0x21d0:	mov	rdx, qword ptr [rsp + 0x20]
0x21d5:	xor	edi, edi
0x21d7:	mov	esi, 3
0x21dc:	call	0x95d0


0x1fbd:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1fbf:	seta	al
0x1fc2:	sbb	al, 0
0x1fc4:	test	al, al
0x1fc6:	je	0x1e44


0x1fd8:	mov	esi, 0xa
0x1fdd:	mov	rdi, rbx
0x1fe0:	mov	qword ptr [rsp + 0x30], r8
0x1fe5:	call	0x16c0


0x1ff9:	mov	rdx, qword ptr [rsp + 0x40]
0x1ffe:	mov	rsi, qword ptr [rsp + 0x38]
0x2003:	mov	rdi, rbx
0x2006:	mov	qword ptr [rsp + 0x30], r8
0x200b:	call	0x2d00


0x1e60:	add	rbp, 1
0x1e64:	jne	0x1d80


0x209c:	mov	rdi, qword ptr [rsp + 0x90]
0x20a4:	call	0x15b0


0x1e6a:	mov	rdx, qword ptr [rsp + 0x20]
0x1e6f:	mov	esi, 3
0x1e74:	xor	edi, edi
0x1e76:	call	0x95d0


0x1d80:	mov	rsi, qword ptr [rsp + 0x10]
0x1d85:	mov	rdi, qword ptr [rsp + 8]
0x1d8a:	mov	rcx, r12
0x1d8d:	mov	edx, 0xa
0x1d92:	call	0x1760


0x20a9:	mov	ebx, dword ptr [r12]
0x20ad:	and	ebx, 0x20
0x20b0:	jne	0x256e


0x20b6:	cmp	dword ptr [rsp + 0x2c], 0
0x20bb:	jne	0x2628


0x256e:	mov	rdx, qword ptr [rsp + 0x20]
0x2573:	mov	esi, 3
0x2578:	xor	edi, edi
0x257a:	call	0x95d0


0x20c1:	cmp	byte ptr [rsp + 0x30], 0
0x20c6:	je	0x2645


0x2628:	mov	rdi, r12
0x262b:	call	0xa080


0x2645:	mov	rdx, qword ptr [rsp + 0x20]
0x264a:	xor	edi, edi
0x264c:	mov	esi, 3
0x2651:	call	0x95d0


0x20cc:	cmp	byte ptr [rip + 0x20c021], 0
0x20d3:	jne	0x255e


0x20d9:	test	r13, r13
0x20dc:	je	0x210d


0x255e:	cmp	byte ptr [rsp + 0x7a], 0
0x2563:	jne	0x219d


0x210d:	cmp	qword ptr [rsp + 0x50], 0
0x2113:	je	0x2149


0x20de:	lea	rdx, [rip + 0x9023]
0x20e5:	lea	rsi, [rip + 0x904c]
0x20ec:	mov	rcx, r13
0x20ef:	xor	edi, edi
0x20f1:	mov	r8d, 5
0x20f7:	call	0x1860


0x2569:	jmp	0x21be


0x219d:	mov	rax, qword ptr [rsp + 0x50]
0x21a2:	or	rax, qword ptr [rsp + 0x58]
0x21a7:	jne	0x21be


0x2149:	cmp	qword ptr [rsp + 0x58], 0
0x214f:	je	0x2185


0x2115:	mov	r15, qword ptr [rsp + 0x50]
0x211a:	lea	rdx, [rip + 0x9047]
0x2121:	lea	rsi, [rip + 0x9070]
0x2128:	xor	edi, edi
0x212a:	mov	r8d, 5
0x2130:	mov	rcx, r15
0x2133:	call	0x1860


0x1860:	jmp	qword ptr [rip + 0x20c712]


0x21be:	mov	eax, ebx
0x21c0:	and	eax, 1
0x21c3:	and	byte ptr [rsp + 0x79], al
0x21c7:	jmp	0x236d


0x21a9:	movzx	eax, byte ptr [rip + 0x20bf40]
0x21b0:	xor	eax, 1
0x21b3:	test	r13, r13
0x21b6:	sete	bl
0x21b9:	or	eax, ebx
0x21bb:	movzx	ebx, al
0x21be:	mov	eax, ebx
0x21c0:	and	eax, 1
0x21c3:	and	byte ptr [rsp + 0x79], al
0x21c7:	jmp	0x236d


0x2185:	cmp	byte ptr [rip + 0x20bf66], 0
0x218c:	je	0x255e


0x2151:	mov	r15, qword ptr [rsp + 0x58]
0x2156:	lea	rdx, [rip + 0x906b]
0x215d:	lea	rsi, [rip + 0x9094]
0x2164:	xor	edi, edi
0x2166:	mov	r8d, 5
0x216c:	mov	rcx, r15
0x216f:	call	0x1860




0x236d:	add	qword ptr [rsp + 0x18], 8
0x2373:	mov	rax, qword ptr [rsp + 0x18]
0x2378:	cmp	qword ptr [rsp + 0x48], rax
0x237d:	ja	0x1cb0


0x2192:	cmp	byte ptr [rsp + 0x7a], 0
0x2197:	je	0x28f7


0x28f7:	mov	rdx, qword ptr [rsp + 0x20]
0x28fc:	xor	edi, edi
0x28fe:	mov	esi, 3
0x2903:	call	0x95d0


0x2630:	test	eax, eax
0x2632:	je	0x20c1


0x2638:	jmp	0x2432


0x2010:	test	al, al
0x2012:	mov	r9d, eax
0x2015:	mov	r8, qword ptr [rsp + 0x30]
0x201a:	jne	0x2220


0x2020:	add	qword ptr [rsp + 0x50], 1
0x2026:	cmp	byte ptr [rip + 0x20c0c7], 0
0x202d:	jne	0x2088


0x2220:	cmp	byte ptr [rip + 0x20becb], 0
0x2227:	je	0x2237


0x202f:	test	r15d, r15d
0x2032:	je	0x2054


0x2088:	movzx	eax, byte ptr [rsp + 0x2b]
0x208d:	test	byte ptr [r12], 0x30
0x2092:	mov	byte ptr [rsp + 0x30], al
0x2096:	je	0x1e60


0x2237:	mov	rcx, qword ptr [rip + 0x20beba]
0x223e:	mov	qword ptr [rsp + 0x68], r8
0x2243:	shr	rcx, 1
0x2246:	je	0x25bf


0x2229:	cmp	byte ptr [rsp + 0x8f], 0
0x2231:	jne	0x2088


0x2054:	mov	esi, r15d
0x2057:	mov	rdi, rbx
0x205a:	call	0x2c30


0x2034:	mov	rdi, qword ptr [rip + 0x20c06d]
0x203b:	mov	rax, qword ptr [rdi + 0x28]
0x203f:	cmp	rax, qword ptr [rdi + 0x30]
0x2043:	jae	0x2964


0x25bf:	xor	edx, edx
0x25c1:	movzx	eax, byte ptr [rip + 0x20bb2c]
0x25c8:	test	al, al
0x25ca:	mov	byte ptr [rsp + 0x7a], al
0x25ce:	jne	0x2088


0x224c:	mov	qword ptr [rsp + 0x60], rcx
0x2251:	mov	byte ptr [rsp + 0x30], r9b
0x2256:	call	0x18d0


0x2049:	lea	rdx, [rax + 1]
0x204d:	mov	qword ptr [rdi + 0x28], rdx
0x2051:	mov	byte ptr [rax], 0x5c
0x2054:	mov	esi, r15d
0x2057:	mov	rdi, rbx
0x205a:	call	0x2c30


0x2964:	mov	esi, 0x5c
0x2969:	call	0x16d0


0x25d4:	movzx	eax, byte ptr [rip + 0x20bb16]
0x25db:	test	al, al
0x25dd:	mov	byte ptr [rsp + 0x7a], al
0x25e1:	jne	0x2088


0x18d0:	jmp	qword ptr [rip + 0x20c6da]


0x25e7:	test	r15d, r15d
0x25ea:	jne	0x2a11




0x25f0:	xor	esi, esi
0x25f2:	mov	rdi, rbx
0x25f5:	mov	byte ptr [rsp + 0x30], r9b
0x25fa:	call	0x2c30


0x2a11:	mov	byte ptr [rsp + 0x7a], r9b
0x2a16:	jmp	0x22e3


0x22e3:	mov	rdi, qword ptr [rip + 0x20bdbe]
0x22ea:	mov	rax, qword ptr [rdi + 0x28]
0x22ee:	cmp	rax, qword ptr [rdi + 0x30]
0x22f2:	jae	0x299f


0x22f8:	lea	rsi, [rax + 1]
0x22fc:	mov	qword ptr [rdi + 0x28], rsi
0x2300:	mov	byte ptr [rax], 0x5c
0x2303:	mov	esi, 1
0x2308:	mov	rdi, rbx
0x230b:	mov	qword ptr [rsp + 0x60], rcx
0x2310:	mov	qword ptr [rsp + 0x30], rdx
0x2315:	call	0x2c30


0x299f:	mov	esi, 0x5c
0x29a4:	mov	qword ptr [rsp + 0x60], rcx
0x29a9:	mov	qword ptr [rsp + 0x30], rdx
0x29ae:	call	0x16d0


0x29b3:	mov	rdx, qword ptr [rsp + 0x30]
0x29b8:	mov	rcx, qword ptr [rsp + 0x60]
0x29bd:	jmp	0x2303


0x2303:	mov	esi, 1
0x2308:	mov	rdi, rbx
0x230b:	mov	qword ptr [rsp + 0x60], rcx
0x2310:	mov	qword ptr [rsp + 0x30], rdx
0x2315:	call	0x2c30


0x296e:	jmp	0x2054


0x231a:	mov	rdx, qword ptr [rsp + 0x30]
0x231f:	mov	rcx, qword ptr [rsp + 0x60]
0x2324:	cmp	rdx, rcx
0x2327:	je	0x260a


0x260a:	cmp	byte ptr [rip + 0x20bae0], 0
0x2611:	jne	0x2088


0x232d:	mov	edx, 5
0x2332:	lea	rsi, [rip + 0x848c]
0x2339:	jmp	0x206b


0x2617:	mov	edx, 5
0x261c:	lea	rsi, [rip + 0x81a9]
0x2623:	jmp	0x206b


0x206b:	xor	edi, edi
0x206d:	call	0x1660


0x25ff:	movzx	r9d, byte ptr [rsp + 0x30]
0x2605:	mov	byte ptr [rsp + 0x7a], r9b
0x260a:	cmp	byte ptr [rip + 0x20bae0], 0
0x2611:	jne	0x2088


0x205f:	lea	rsi, [rip + 0x874b]
0x2066:	mov	edx, 5
0x206b:	xor	edi, edi
0x206d:	call	0x1660


0x2072:	lea	rsi, [rip + 0x97f8]
0x2079:	mov	rdx, rax
0x207c:	mov	edi, 1
0x2081:	xor	eax, eax
0x2083:	call	0x1810


0x1d04:	mov	r12, qword ptr [rip + 0x20c3a5]
0x1d0b:	mov	qword ptr [rsp + 0x20], rax
0x1d10:	lea	rax, [rsp + 0x98]
0x1d18:	mov	qword ptr [rsp + 0x90], 0
0x1d24:	mov	qword ptr [rsp + 0x98], 0
0x1d30:	mov	byte ptr [rsp + 0x7a], 0
0x1d35:	mov	byte ptr [rsp + 0x30], 0
0x1d3a:	xor	r13d, r13d
0x1d3d:	mov	qword ptr [rsp + 0x10], rax
0x1d42:	lea	rax, [rsp + 0x90]
0x1d4a:	mov	qword ptr [rsp + 0x58], 0
0x1d53:	mov	qword ptr [rsp + 0x50], 0
0x1d5c:	mov	ebp, 1
0x1d61:	mov	qword ptr [rsp + 8], rax
0x1d66:	lea	rax, [rsp + 0x8f]
0x1d6e:	mov	qword ptr [rsp + 0x40], rax
0x1d73:	lea	rax, [rsp + 0xe0]
0x1d7b:	mov	qword ptr [rsp + 0x38], rax
0x1d80:	mov	rsi, qword ptr [rsp + 0x10]
0x1d85:	mov	rdi, qword ptr [rsp + 8]
0x1d8a:	mov	rcx, r12
0x1d8d:	mov	edx, 0xa
0x1d92:	call	0x1760


0x1bc2:	xor	esi, esi
0x1bc4:	mov	rdx, rax
0x1bc7:	xor	edi, edi
0x1bc9:	xor	eax, eax
0x1bcb:	call	0x1830


0x225b:	xor	edx, edx
0x225d:	mov	rdi, qword ptr [rax]
0x2260:	movzx	r9d, byte ptr [rsp + 0x30]
0x2266:	mov	rcx, qword ptr [rsp + 0x60]
0x226b:	mov	r8, qword ptr [rsp + 0x68]
0x2270:	mov	r10, qword ptr [rsp + 0x38]
0x2275:	jmp	0x22a0


0x22a0:	movzx	eax, byte ptr [r10 + rdx]
0x22a5:	movzx	r11d, byte ptr [r8 + rdx*2]
0x22aa:	mov	esi, eax
0x22ac:	shr	sil, 4
0x22b0:	and	esi, 0xf
0x22b3:	movsx	esi, byte ptr [r14 + rsi]
0x22b8:	cmp	dword ptr [rdi + r11*4], esi
0x22bc:	je	0x2280


0x2280:	movzx	esi, byte ptr [r8 + rdx*2 + 1]
0x2286:	and	eax, 0xf
0x2289:	movsx	eax, byte ptr [r14 + rax]
0x228e:	cmp	dword ptr [rdi + rsi*4], eax
0x2291:	jne	0x22be


0x22be:	cmp	rcx, rdx
0x22c1:	je	0x25c1


0x2293:	add	rdx, 1
0x2297:	cmp	rcx, rdx
0x229a:	je	0x263d


0x25c1:	movzx	eax, byte ptr [rip + 0x20bb2c]
0x25c8:	test	al, al
0x25ca:	mov	byte ptr [rsp + 0x7a], al
0x25ce:	jne	0x2088


0x22c7:	add	qword ptr [rsp + 0x58], 1
0x22cd:	cmp	byte ptr [rip + 0x20be20], 0
0x22d4:	jne	0x2088


0x263d:	mov	rdx, rcx
0x2640:	jmp	0x25c1


0x22da:	test	r15d, r15d
0x22dd:	je	0x28e8


0x28e8:	xor	esi, esi
0x28ea:	mov	rdi, rbx
0x28ed:	call	0x2c30


0x28f2:	jmp	0x232d


0x2174:	mov	rcx, r15
0x2177:	mov	rdx, rax
0x217a:	xor	esi, esi
0x217c:	xor	edi, edi
0x217e:	xor	eax, eax
0x2180:	call	0x1830


0x2138:	mov	rcx, r15
0x213b:	mov	rdx, rax
0x213e:	xor	esi, esi
0x2140:	xor	edi, edi
0x2142:	xor	eax, eax
0x2144:	call	0x1830


0x20fc:	mov	rcx, r13
0x20ff:	mov	rdx, rax
0x2102:	xor	esi, esi
0x2104:	xor	edi, edi
0x2106:	xor	eax, eax
0x2108:	call	0x1830


0x1fea:	mov	r8, qword ptr [rsp + 0x30]
0x1fef:	xor	r15d, r15d
0x1ff2:	test	rax, rax
0x1ff5:	setne	r15b
0x1ff9:	mov	rdx, qword ptr [rsp + 0x40]
0x1ffe:	mov	rsi, qword ptr [rsp + 0x38]
0x2003:	mov	rdi, rbx
0x2006:	mov	qword ptr [rsp + 0x30], r8
0x200b:	call	0x2d00


0x2476:	test	rax, rax
0x2479:	je	0x2851


0x2851:	mov	rdi, qword ptr [rsp + 0x20]
0x2856:	mov	esi, 0xa
0x285b:	call	0x16c0


0x247f:	cmp	byte ptr [rip + 0x20bb8a], 0xa
0x2486:	je	0x276c


0x276c:	cmp	byte ptr [rsp + 0x78], 0
0x2771:	je	0x2817


0x248c:	cmp	byte ptr [rsp + 0x78], 0
0x2491:	jne	0x286e


0x2817:	mov	rdi, qword ptr [rip + 0x20b88a]
0x281e:	mov	rax, qword ptr [rdi + 0x28]
0x2822:	cmp	rax, qword ptr [rdi + 0x30]
0x2826:	jae	0x2973


0x2777:	mov	rdi, qword ptr [rip + 0x20b92a]
0x277e:	mov	rax, qword ptr [rdi + 0x28]
0x2782:	cmp	rax, qword ptr [rdi + 0x30]
0x2786:	jae	0x29c2


0x2497:	mov	rax, qword ptr [rip + 0x20bc5a]
0x249e:	xor	ebp, ebp
0x24a0:	shr	rax, 1
0x24a3:	je	0x24e2


0x286e:	mov	rcx, qword ptr [rip + 0x20b833]
0x2875:	lea	rdi, [rip + 0x7e18]
0x287c:	mov	edx, 6
0x2881:	mov	esi, 1
0x2886:	xor	ebp, ebp
0x2888:	call	0x17d0


0x282c:	lea	rdx, [rax + 1]
0x2830:	mov	ebp, 1
0x2835:	mov	qword ptr [rdi + 0x28], rdx
0x2839:	mov	byte ptr [rax], 0x5c
0x283c:	mov	rax, qword ptr [rip + 0x20b8b5]
0x2843:	shr	rax, 1
0x2846:	jne	0x24a5


0x2973:	mov	esi, 0x5c
0x2978:	call	0x16d0


0x278c:	lea	rdx, [rax + 1]
0x2790:	mov	qword ptr [rdi + 0x28], rdx
0x2794:	mov	byte ptr [rax], 0x5c
0x2797:	mov	rcx, qword ptr [rip + 0x20b90a]
0x279e:	lea	rdi, [rip + 0x7eef]
0x27a5:	mov	edx, 6
0x27aa:	mov	esi, 1
0x27af:	call	0x17d0


0x29c2:	mov	esi, 0x5c
0x29c7:	call	0x16d0


0x24e2:	mov	rdi, qword ptr [rip + 0x20bbbf]
0x24e9:	mov	rax, qword ptr [rdi + 0x28]
0x24ed:	cmp	qword ptr [rdi + 0x30], rax
0x24f1:	jbe	0x2990


0x24a5:	xor	r12d, r12d
0x24a8:	nop	dword ptr [rax + rax]
0x24b0:	movzx	edx, byte ptr [rbx + r12]
0x24b5:	lea	rsi, [rip + 0x833b]
0x24bc:	xor	eax, eax
0x24be:	mov	edi, 1
0x24c3:	add	r12, 1
0x24c7:	call	0x1810


0x284c:	jmp	0x24e2


0x2990:	mov	esi, 0x20
0x2995:	call	0x16d0


0x24f7:	lea	rdx, [rax + 1]
0x24fb:	mov	qword ptr [rdi + 0x28], rdx
0x24ff:	mov	byte ptr [rax], 0x20
0x2502:	mov	rdi, qword ptr [rip + 0x20bb9f]
0x2509:	mov	rax, qword ptr [rdi + 0x28]
0x250d:	cmp	rax, qword ptr [rdi + 0x30]
0x2511:	jae	0x2982


0x2517:	lea	rdx, [rax + 1]
0x251b:	mov	qword ptr [rdi + 0x28], rdx
0x251f:	movzx	edi, byte ptr [rsp + 0x7b]
0x2524:	mov	byte ptr [rax], dil
0x2527:	mov	rdi, qword ptr [rsp + 0x20]
0x252c:	mov	esi, ebp
0x252e:	call	0x2c30


0x2982:	mov	esi, dword ptr [rsp + 0x7c]
0x2986:	call	0x16d0


0x2533:	mov	rdi, qword ptr [rip + 0x20bb6e]
0x253a:	movzx	edx, byte ptr [rip + 0x20bacf]
0x2541:	mov	rax, qword ptr [rdi + 0x28]
0x2545:	cmp	rax, qword ptr [rdi + 0x30]
0x2549:	jae	0x2957


0x254f:	lea	rcx, [rax + 1]
0x2553:	mov	qword ptr [rdi + 0x28], rcx
0x2557:	mov	byte ptr [rax], dl
0x2559:	jmp	0x236d


0x2957:	movzx	esi, dl
0x295a:	call	0x16d0


0x24cc:	mov	rax, qword ptr [rip + 0x20bc25]
0x24d3:	shr	rax, 1
0x24d6:	cmp	rax, r12
0x24d9:	ja	0x24b0


0x24db:	cmp	byte ptr [rsp + 0x78], 0
0x24e0:	jne	0x2533


0x24b0:	movzx	edx, byte ptr [rbx + r12]
0x24b5:	lea	rsi, [rip + 0x833b]
0x24bc:	xor	eax, eax
0x24be:	mov	edi, 1
0x24c3:	add	r12, 1
0x24c7:	call	0x1810


0x295f:	jmp	0x236d


0x298b:	jmp	0x2527


0x2527:	mov	rdi, qword ptr [rsp + 0x20]
0x252c:	mov	esi, ebp
0x252e:	call	0x2c30


0x299a:	jmp	0x2502


0x2502:	mov	rdi, qword ptr [rip + 0x20bb9f]
0x2509:	mov	rax, qword ptr [rdi + 0x28]
0x250d:	cmp	rax, qword ptr [rdi + 0x30]
0x2511:	jae	0x2982


0x29cc:	jmp	0x2797


0x2797:	mov	rcx, qword ptr [rip + 0x20b90a]
0x279e:	lea	rdi, [rip + 0x7eef]
0x27a5:	mov	edx, 6
0x27aa:	mov	esi, 1
0x27af:	call	0x17d0


0x297d:	jmp	0x27fd


0x27fd:	mov	rax, qword ptr [rip + 0x20b8f4]
0x2804:	mov	ebp, 1
0x2809:	shr	rax, 1
0x280c:	jne	0x24a5


0x2812:	jmp	0x24db


0x27b4:	mov	rcx, qword ptr [rip + 0x20b8ed]
0x27bb:	lea	rdi, [rip + 0x803a]
0x27c2:	mov	edx, 2
0x27c7:	mov	esi, 1
0x27cc:	call	0x17d0


0x27d1:	mov	rdi, qword ptr [rsp + 0x20]
0x27d6:	mov	esi, 1
0x27db:	call	0x2c30


0x27e0:	mov	rcx, qword ptr [rip + 0x20b8c1]
0x27e7:	lea	rdi, [rip + 0x8011]
0x27ee:	mov	edx, 4
0x27f3:	mov	esi, 1
0x27f8:	call	0x17d0


0x288d:	mov	rcx, qword ptr [rip + 0x20b814]
0x2894:	lea	rdi, [rip + 0x7f61]
0x289b:	mov	edx, 2
0x28a0:	mov	esi, 1
0x28a5:	call	0x17d0


0x28aa:	mov	rdi, qword ptr [rsp + 0x20]
0x28af:	xor	esi, esi
0x28b1:	call	0x2c30


0x28b6:	mov	rcx, qword ptr [rip + 0x20b7eb]
0x28bd:	lea	rdi, [rip + 0x7f3b]
0x28c4:	mov	edx, 4
0x28c9:	mov	esi, 1
0x28ce:	call	0x17d0


0x28d3:	mov	rax, qword ptr [rip + 0x20b81e]
0x28da:	shr	rax, 1
0x28dd:	jne	0x24a5


0x28e3:	jmp	0x2533


0x2860:	test	rax, rax
0x2863:	jne	0x247f


0x2869:	jmp	0x248c


0x1d97:	test	rax, rax
0x1d9a:	jle	0x209c


0x1da0:	mov	rbx, qword ptr [rsp + 0x90]
0x1da8:	movzx	ecx, byte ptr [rbx]
0x1dab:	cmp	cl, 0x23
0x1dae:	je	0x1e55


0x1db4:	cmp	byte ptr [rbx + rax - 1], 0xa
0x1db9:	mov	r15, rax
0x1dbc:	jne	0x1dd2


0x1dbe:	sub	r15, 1
0x1dc2:	mov	byte ptr [rbx + r15], 0
0x1dc7:	mov	rbx, qword ptr [rsp + 0x90]
0x1dcf:	movzx	ecx, byte ptr [rbx]
0x1dd2:	cmp	cl, 9
0x1dd5:	je	0x1dde


0x1dd2:	cmp	cl, 9
0x1dd5:	je	0x1dde


0x1dde:	xor	edx, edx
0x1de0:	add	rdx, 1
0x1de4:	movzx	ecx, byte ptr [rbx + rdx]
0x1de8:	cmp	cl, 0x20
0x1deb:	je	0x1de0


0x1dd7:	xor	edx, edx
0x1dd9:	cmp	cl, 0x20
0x1ddc:	jne	0x1df2


0x1de0:	add	rdx, 1
0x1de4:	movzx	ecx, byte ptr [rbx + rdx]
0x1de8:	cmp	cl, 0x20
0x1deb:	je	0x1de0


0x1ded:	cmp	cl, 9
0x1df0:	je	0x1de0


0x1df2:	xor	r9d, r9d
0x1df5:	cmp	cl, 0x5c
0x1df8:	jne	0x1e04


0x1dfa:	movzx	r9d, byte ptr [rsp + 0x2b]
0x1e00:	add	rdx, 1
0x1e04:	lea	r8, [rbx + rdx]
0x1e08:	lea	rdi, [rip + 0x8885]
0x1e0f:	mov	ecx, 6
0x1e14:	mov	rsi, r8
0x1e17:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1e04:	lea	r8, [rbx + rdx]
0x1e08:	lea	rdi, [rip + 0x8885]
0x1e0f:	mov	ecx, 6
0x1e14:	mov	rsi, r8
0x1e17:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1e17:	repe cmpsb	byte ptr [rsi], byte ptr [rdi]


0x1e19:	seta	al
0x1e1c:	sbb	al, 0
0x1e1e:	test	al, al
0x1e20:	jne	0x1ef0


0x1e26:	movzx	eax, byte ptr [rbx + rdx + 6]
0x1e2b:	lea	rcx, [rdx + 6]
0x1e2f:	cmp	al, 0x20
0x1e31:	jne	0x1e3c


0x1ef0:	mov	rcx, r15
0x1ef3:	xor	eax, eax
0x1ef5:	sub	rcx, rdx
0x1ef8:	cmp	byte ptr [r8], 0x5c
0x1efc:	sete	al
0x1eff:	add	rax, qword ptr [rip + 0x20c1fa]
0x1f06:	cmp	rcx, rax
0x1f09:	jb	0x1e44


0x1e33:	movzx	eax, byte ptr [rbx + rdx + 7]
0x1e38:	lea	rcx, [rdx + 7]
0x1e3c:	cmp	al, 0x28
0x1e3e:	je	0x23c4


0x1e3c:	cmp	al, 0x28
0x1e3e:	je	0x23c4


0x1f0f:	add	rdx, qword ptr [rip + 0x20c1e2]
0x1f16:	lea	rcx, [rbx + rdx]
0x1f1a:	movzx	eax, byte ptr [rcx]
0x1f1d:	cmp	al, 0x20
0x1f1f:	je	0x1f29


0x23c4:	add	rcx, 1
0x23c8:	sub	r15, rcx
0x23cb:	je	0x1e44


0x1f29:	mov	byte ptr [rcx], 0
0x1f2c:	mov	rdi, r8
0x1f2f:	mov	qword ptr [rsp + 0x70], rdx
0x1f34:	mov	byte ptr [rsp + 0x68], r9b
0x1f39:	mov	qword ptr [rsp + 0x60], r8
0x1f3e:	call	0x2bd0


0x1f21:	cmp	al, 9
0x1f23:	jne	0x1e44


0x23d1:	mov	r10, r15
0x23d4:	add	rbx, rcx
0x23d7:	sub	r10, 1
0x23db:	je	0x2401


0x2401:	cmp	byte ptr [rbx], 0x29
0x2404:	jne	0x1e44


0x23dd:	cmp	byte ptr [rbx + r15 - 1], 0x29
0x23e3:	jne	0x23fb


0x240a:	mov	r11, rbx
0x240d:	xor	r10d, r10d
0x2410:	jmp	0x268d


0x23e5:	jmp	0x2689


0x23fb:	sub	r10, 1
0x23ff:	jne	0x23f0


0x268d:	test	r9b, r9b
0x2690:	jne	0x293e


0x2689:	lea	r11, [rbx + r10]
0x268d:	test	r9b, r9b
0x2690:	jne	0x293e


0x23f0:	cmp	byte ptr [rbx + r10], 0x29
0x23f5:	je	0x2689


0x2696:	add	r10, 1
0x269a:	mov	byte ptr [r11], 0
0x269e:	jmp	0x26a4


0x293e:	mov	rsi, r10
0x2941:	mov	rdi, rbx
0x2944:	call	0x2b50


0x26a4:	movzx	eax, byte ptr [rbx + r10]
0x26a9:	cmp	al, 0x20
0x26ab:	je	0x26a0


0x26a0:	add	r10, 1
0x26a4:	movzx	eax, byte ptr [rbx + r10]
0x26a9:	cmp	al, 0x20
0x26ab:	je	0x26a0


0x26ad:	cmp	al, 9
0x26af:	je	0x26a0


0x26b1:	cmp	al, 0x3d
0x26b3:	jne	0x1e44


0x26b9:	lea	rdx, [rbx + r10 + 1]
0x26be:	movzx	eax, byte ptr [rdx]
0x26c1:	mov	r8, rdx
0x26c4:	lea	rdx, [rdx + 1]
0x26c8:	cmp	al, 0x20
0x26ca:	je	0x26be


0x26be:	movzx	eax, byte ptr [rdx]
0x26c1:	mov	r8, rdx
0x26c4:	lea	rdx, [rdx + 1]
0x26c8:	cmp	al, 0x20
0x26ca:	je	0x26be


0x26cc:	cmp	al, 9
0x26ce:	je	0x26be


0x26d0:	mov	rdi, r8
0x26d3:	mov	qword ptr [rsp + 0x60], r8
0x26d8:	call	0x2bd0


0x2949:	test	rax, rax
0x294c:	jne	0x2696


0x2952:	jmp	0x1e44


0x26dd:	mov	r8, qword ptr [rsp + 0x60]
0x26e2:	jmp	0x275f


0x275f:	test	al, al
0x2761:	jne	0x1fa6


0x1f43:	test	al, al
0x1f45:	je	0x1e44


0x1f4b:	mov	rdx, qword ptr [rsp + 0x70]
0x1f50:	mov	rcx, r15
0x1f53:	mov	esi, dword ptr [rip + 0x20c0bb]
0x1f59:	mov	r8, qword ptr [rsp + 0x60]
0x1f5e:	movzx	r9d, byte ptr [rsp + 0x68]
0x1f64:	lea	rax, [rdx + 1]
0x1f68:	sub	rcx, rax
0x1f6b:	sub	rcx, 1
0x1f6f:	je	0x1f88


0x1f88:	test	esi, esi
0x1f8a:	je	0x1e44


0x1f71:	movzx	ecx, byte ptr [rbx + rdx + 1]
0x1f76:	cmp	cl, 0x20
0x1f79:	je	0x26e4


0x1f90:	mov	dword ptr [rip + 0x20c07a], 1
0x1f9a:	add	rbx, rax
0x1f9d:	test	r9b, r9b
0x1fa0:	jne	0x2741


0x26e4:	sub	esi, 1
0x26e7:	je	0x1f9a


0x1f7f:	cmp	cl, 0x2a
0x1f82:	je	0x26e4


0x1f9a:	add	rbx, rax
0x1f9d:	test	r9b, r9b
0x1fa0:	jne	0x2741


0x26ed:	mov	dword ptr [rip + 0x20b91d], 0
0x26f7:	lea	rax, [rdx + 2]
0x26fb:	jmp	0x1f9a


0x338a:	mov	esi, dword ptr [rbx]
0x338c:	lea	rdx, [rip + 0x7ebe]
0x3393:	mov	rcx, rax
0x3396:	mov	r8, rbp
0x3399:	xor	edi, edi
0x339b:	xor	eax, eax
0x339d:	call	0x1830


0x8f4c:	add	rsp, 0x20
0x8f50:	mov	r11, qword ptr [rsp + 0x10]
0x8f55:	cmp	r11, rax
0x8f58:	ja	0x8fc1


0x8f5a:	lea	rsi, [rax + 1]
0x8f5e:	lea	rax, [rip + 0x2051db]
0x8f65:	cmp	r12, rax
0x8f68:	mov	qword ptr [rbx], rsi
0x8f6b:	je	0x8f7f


0x8fc1:	mov	eax, dword ptr [rsp + 0x18]
0x8fc5:	mov	dword ptr [r13], eax
0x8fc9:	add	rsp, 0x28
0x8fcd:	mov	rax, r12
0x8fd0:	pop	rbx
0x8fd1:	pop	rbp
0x8fd2:	pop	r12
0x8fd4:	pop	r13
0x8fd6:	pop	r14
0x8fd8:	pop	r15
0x8fda:	ret	


0x8f7f:	mov	rdi, rsi
0x8f82:	mov	qword ptr [rsp + 0x10], rsi
0x8f87:	call	0x9df0


0x8f6d:	mov	rdi, r12
0x8f70:	mov	qword ptr [rsp + 0x10], rsi
0x8f75:	call	0x15b0


0x8f7a:	mov	rsi, qword ptr [rsp + 0x10]
0x8f7f:	mov	rdi, rsi
0x8f82:	mov	qword ptr [rsp + 0x10], rsi
0x8f87:	call	0x9df0


0x8f8c:	sub	rsp, 8
0x8f90:	mov	qword ptr [rbx + 8], rax
0x8f94:	mov	r8d, dword ptr [rbp]
0x8f98:	push	qword ptr [rbp + 0x30]
0x8f9b:	push	qword ptr [rbp + 0x28]
0x8f9e:	mov	rcx, r14
0x8fa1:	push	r15
0x8fa3:	mov	r9d, dword ptr [rsp + 0x3c]
0x8fa8:	mov	rdi, rax
0x8fab:	mov	rdx, qword ptr [rsp + 0x28]
0x8fb0:	mov	rsi, qword ptr [rsp + 0x30]
0x8fb5:	mov	r12, rax
0x8fb8:	call	0x7c20


0x96d2:	mov	rdi, qword ptr [rsp + 0x38]
0x96d7:	xor	rdi, qword ptr fs:[0x28]
0x96e0:	jne	0x96ec


0x96e2:	add	rsp, 0x48
0x96e6:	ret	


0x96ec:	call	0x1690


0x941f:	mov	rcx, qword ptr [rsp + 0x38]
0x9424:	xor	rcx, qword ptr fs:[0x28]
0x942d:	jne	0x9439


0x942f:	add	rsp, 0x48
0x9433:	ret	


0x9439:	call	0x1690


0x94ab:	mov	rdx, qword ptr [rsp + 0x38]
0x94b0:	xor	rdx, qword ptr fs:[0x28]
0x94b9:	jne	0x94c5


0x94bb:	add	rsp, 0x48
0x94bf:	ret	


0x94c5:	call	0x1690


0x963f:	mov	rcx, qword ptr [rsp + 0x38]
0x9644:	xor	rcx, qword ptr fs:[0x28]
0x964d:	jne	0x9659


0x964f:	add	rsp, 0x48
0x9653:	ret	


0x9659:	call	0x1690


0x2908:	lea	rsi, [rip + 0x7ecf]
0x290f:	mov	rbp, rax
0x2912:	xor	edi, edi
0x2914:	mov	edx, 5
0x2919:	call	0x1660


0x291e:	mov	rcx, rbp
0x2921:	mov	rdx, rax
0x2924:	xor	esi, esi
0x2926:	xor	edi, edi
0x2928:	xor	eax, eax
0x292a:	call	0x1830


0x292f:	jmp	0x21be


0x2656:	lea	rsi, [rip + 0x8a73]
0x265d:	xor	edi, edi
0x265f:	mov	edx, 5
0x2664:	mov	rbp, rax
0x2667:	call	0x1660


0x266c:	lea	r8, [rip + 0x8021]
0x2673:	mov	rdx, rax
0x2676:	mov	rcx, rbp
0x2679:	xor	esi, esi
0x267b:	xor	edi, edi
0x267d:	xor	eax, eax
0x267f:	call	0x1830


0x2684:	jmp	0x21be


0x257f:	lea	rsi, [rip + 0x8249]
0x2586:	mov	rbx, rax
0x2589:	mov	edx, 5
0x258e:	xor	edi, edi
0x2590:	call	0x1660


0x2595:	mov	rcx, rbx
0x2598:	mov	rdx, rax
0x259b:	xor	esi, esi
0x259d:	xor	eax, eax
0x259f:	xor	edi, edi
0x25a1:	call	0x1830


0x25a6:	xor	eax, eax
0x25a8:	jmp	0x21c3


0x21c3:	and	byte ptr [rsp + 0x79], al
0x21c7:	jmp	0x236d


0x1e7b:	lea	rsi, [rip + 0x8913]
0x1e82:	mov	rbx, rax
0x1e85:	mov	edx, 5
0x1e8a:	xor	edi, edi
0x1e8c:	call	0x1660


0x1e91:	mov	rcx, rbx
0x1e94:	mov	rdx, rax
0x1e97:	xor	esi, esi
0x1e99:	mov	edi, 1
0x1e9e:	xor	eax, eax
0x1ea0:	call	0x1830


0x21e1:	lea	rsi, [rip + 0x8eb8]
0x21e8:	xor	edi, edi
0x21ea:	mov	edx, 5
0x21ef:	mov	rbx, rax
0x21f2:	call	0x1660


0x21f7:	lea	r9, [rip + 0x8496]
0x21fe:	mov	rdx, rax
0x2201:	mov	r8, rbp
0x2204:	mov	rcx, rbx
0x2207:	xor	esi, esi
0x2209:	xor	edi, edi
0x220b:	xor	eax, eax
0x220d:	call	0x1830


0x2212:	jmp	0x1e55


0x2443:	mov	rbx, rax
0x2446:	call	0x15d0


0x244b:	mov	esi, dword ptr [rax]
0x244d:	lea	rdx, [rip + 0x8e01]
0x2454:	xor	eax, eax
0x2456:	mov	rcx, rbx
0x2459:	xor	edi, edi
0x245b:	call	0x1830


0x2460:	xor	eax, eax
0x2462:	jmp	0x21c3


0x2e19:	mov	rbx, rax
0x2e1c:	xor	r12d, r12d
0x2e1f:	call	0x15d0


0x2e24:	mov	esi, dword ptr [rax]
0x2e26:	lea	rdx, [rip + 0x8428]
0x2e2d:	mov	rcx, rbx
0x2e30:	xor	edi, edi
0x2e32:	xor	eax, eax
0x2e34:	call	0x1830


0x2e39:	jmp	0x2d61


0x2d7f:	mov	rbp, rax
0x2d82:	xor	r12d, r12d
0x2d85:	call	0x15d0


0x2d8a:	mov	esi, dword ptr [rax]
0x2d8c:	lea	rdx, [rip + 0x84c2]
0x2d93:	xor	edi, edi
0x2d95:	xor	eax, eax
0x2d97:	mov	rcx, rbp
0x2d9a:	call	0x1830


0x2d9f:	cmp	qword ptr [rip + 0x20b30a], rbx
0x2da6:	je	0x2d61


0x2da8:	mov	rdi, rbx
0x2dab:	call	0xa080


0x2db0:	add	rsp, 8
0x2db4:	mov	eax, r12d
0x2db7:	pop	rbx
0x2db8:	pop	rbp
0x2db9:	pop	r12
0x2dbb:	pop	r13
0x2dbd:	ret	


0x2e69:	mov	esi, dword ptr [rbx]
0x2e6b:	lea	rdx, [rip + 0x83e3]
0x2e72:	mov	rcx, rax
0x2e75:	xor	edi, edi
0x2e77:	xor	eax, eax
0x2e79:	xor	r12d, r12d
0x2e7c:	call	0x1830


0x2e81:	jmp	0x2d61


0x956e:	mov	rsi, qword ptr [rsp + 0x38]
0x9573:	xor	rsi, qword ptr fs:[0x28]
0x957c:	jne	0x9583


0x957e:	add	rsp, 0x48
0x9582:	ret	


0x9583:	call	0x1690


0x8fbd:	add	rsp, 0x20
0x8fc1:	mov	eax, dword ptr [rsp + 0x18]
0x8fc5:	mov	dword ptr [r13], eax
0x8fc9:	add	rsp, 0x28
0x8fcd:	mov	rax, r12
0x8fd0:	pop	rbx
0x8fd1:	pop	rbp
0x8fd2:	pop	r12
0x8fd4:	pop	r13
0x8fd6:	pop	r14
0x8fd8:	pop	r15
0x8fda:	ret	


0x920c:	lea	rsi, [rax + 1]
0x9210:	mov	qword ptr [rsp + 0x48], rax
0x9215:	add	rsp, 0x20
0x9219:	mov	rdi, rsi
0x921c:	mov	qword ptr [rsp + 0x18], rsi
0x9221:	call	0x9df0


0x9226:	mov	qword ptr [rsp + 0x10], rax
0x922b:	sub	rsp, 8
0x922f:	push	qword ptr [rbx + 0x30]
0x9232:	push	qword ptr [rbx + 0x28]
0x9235:	mov	r10, qword ptr [rsp + 0x38]
0x923a:	mov	r9d, ebp
0x923d:	mov	r8d, dword ptr [rbx]
0x9240:	mov	rcx, r15
0x9243:	mov	rdx, r14
0x9246:	mov	rdi, rax
0x9249:	push	r10
0x924b:	mov	rsi, qword ptr [rsp + 0x38]
0x9250:	call	0x7c20


0x9255:	mov	eax, dword ptr [rsp + 0x2c]
0x9259:	add	rsp, 0x20
0x925d:	test	r12, r12
0x9260:	mov	dword ptr [r13], eax
0x9264:	je	0x926f


0x926f:	mov	rax, qword ptr [rsp + 0x10]
0x9274:	add	rsp, 0x38
0x9278:	pop	rbx
0x9279:	pop	rbp
0x927a:	pop	r12
0x927c:	pop	r13
0x927e:	pop	r14
0x9280:	pop	r15
0x9282:	ret	


0x9266:	mov	r11, qword ptr [rsp + 0x28]
0x926b:	mov	qword ptr [r12], r11
0x926f:	mov	rax, qword ptr [rsp + 0x10]
0x9274:	add	rsp, 0x38
0x9278:	pop	rbx
0x9279:	pop	rbp
0x927a:	pop	r12
0x927c:	pop	r13
0x927e:	pop	r14
0x9280:	pop	r15
0x9282:	ret	


0x9181:	mov	dword ptr [rbp], r12d
0x9185:	add	rsp, 0x38
0x9189:	pop	rbx
0x918a:	pop	rbp
0x918b:	pop	r12
0x918d:	pop	r13
0x918f:	pop	r14
0x9191:	pop	r15
0x9193:	ret	


0x78a3:	mov	r12d, 0x8000
0x78a9:	xor	r15d, r15d
0x78ac:	jmp	0x78d9


0x78d9:	test	byte ptr [rbx], 0x10
0x78dc:	je	0x78b0


0x78b0:	lea	rdi, [rbp + r15]
0x78b5:	mov	rdx, r12
0x78b8:	mov	rcx, rbx
0x78bb:	sub	rdx, r15
0x78be:	mov	esi, 1
0x78c3:	call	0x1620


0x78de:	test	r15, r15
0x78e1:	jne	0x7950


0x1620:	jmp	qword ptr [rip + 0x20c832]


0x78e3:	mov	rsi, qword ptr [rsp + 8]
0x78e8:	mov	rdi, r13
0x78eb:	call	r14


0x7950:	mov	rdx, r13
0x7953:	mov	rsi, r15
0x7956:	mov	rdi, rbp
0x7959:	call	0x7360




0x795e:	jmp	0x78e3


0x78c8:	add	r15, rax
0x78cb:	cmp	r15, 0x8000
0x78d2:	je	0x7920


0x7920:	mov	rdx, r13
0x7923:	mov	esi, 0x8000
0x7928:	mov	rdi, rbp
0x792b:	call	0x3530


0x78d4:	test	rax, rax
0x78d7:	je	0x7938


0x7938:	test	byte ptr [rbx], 0x20
0x793b:	je	0x78de


0x793d:	mov	rdi, rbp
0x7940:	call	0x15b0


0x7945:	mov	eax, 1
0x794a:	jmp	0x78f8


0x7930:	jmp	0x78a9


0x78a9:	xor	r15d, r15d
0x78ac:	jmp	0x78d9


0x78ee:	mov	rdi, rbp
0x78f1:	call	0x15b0


0x78f6:	xor	eax, eax
0x78f8:	mov	rcx, qword ptr [rsp + 0x168]
0x7900:	xor	rcx, qword ptr fs:[0x28]
0x7909:	jne	0x7967


0xa61d:	add	rbx, 1
0xa621:	cmp	rbp, rbx
0xa624:	jne	0xa610


0xa610:	mov	rdx, r15
0xa613:	mov	rsi, r14
0xa616:	mov	edi, r13d
0xa619:	call	qword ptr [r12 + rbx*8]






0x9a60:	lea	rsi, [rip + 0x1f11]
0x9a67:	mov	edx, 5
0x9a6c:	xor	edi, edi
0x9a6e:	mov	r14, qword ptr [rbx + 0x18]
0x9a72:	mov	r13, qword ptr [rbx + 0x10]
0x9a76:	mov	r12, qword ptr [rbx + 8]
0x9a7a:	mov	rbx, qword ptr [rbx]
0x9a7d:	call	0x1660


0x9880:	mov	r9, qword ptr [rbx + 0x38]
0x9884:	mov	rax, qword ptr [rbx + 0x10]
0x9888:	lea	rsi, [rip + 0x2189]
0x988f:	mov	r8, qword ptr [rbx + 8]
0x9893:	mov	edx, 5
0x9898:	xor	edi, edi
0x989a:	mov	r13, qword ptr [rbx + 0x30]
0x989e:	mov	r12, qword ptr [rbx + 0x28]
0x98a2:	mov	qword ptr [rsp + 0x10], r9
0x98a7:	mov	r15, qword ptr [rbx + 0x20]
0x98ab:	mov	r14, qword ptr [rbx + 0x18]
0x98af:	mov	qword ptr [rsp], rax
0x98b3:	mov	qword ptr [rsp + 8], r8
0x98b8:	mov	rbx, qword ptr [rbx]
0x98bb:	call	0x1660


0x9988:	mov	rbx, qword ptr [rbx]
0x998b:	lea	rsi, [rip + 0x1e8d]
0x9992:	mov	edx, 5
0x9997:	xor	edi, edi
0x9999:	call	0x1660


0x99c8:	mov	r12, qword ptr [rbx + 8]
0x99cc:	lea	rsi, [rip + 0x1e5c]
0x99d3:	mov	rbx, qword ptr [rbx]
0x99d6:	mov	edx, 5
0x99db:	xor	edi, edi
0x99dd:	call	0x1660


0x9ae8:	mov	r8, qword ptr [rbx + 8]
0x9aec:	mov	r12, qword ptr [rbx + 0x28]
0x9af0:	lea	rsi, [rip + 0x1ec9]
0x9af7:	mov	r15, qword ptr [rbx + 0x20]
0x9afb:	mov	r14, qword ptr [rbx + 0x18]
0x9aff:	mov	edx, 5
0x9b04:	mov	r13, qword ptr [rbx + 0x10]
0x9b08:	xor	edi, edi
0x9b0a:	mov	rbx, qword ptr [rbx]
0x9b0d:	mov	qword ptr [rsp], r8
0x9b11:	call	0x1660


0x9a10:	mov	r13, qword ptr [rbx + 0x10]
0x9a14:	mov	r12, qword ptr [rbx + 8]
0x9a18:	lea	rsi, [rip + 0x1e27]
0x9a1f:	mov	rbx, qword ptr [rbx]
0x9a22:	mov	edx, 5
0x9a27:	xor	edi, edi
0x9a29:	call	0x1660


0x9b50:	mov	r9, qword ptr [rbx + 0x10]
0x9b54:	mov	r13, qword ptr [rbx + 0x30]
0x9b58:	lea	rsi, [rip + 0x1e89]
0x9b5f:	mov	r12, qword ptr [rbx + 0x28]
0x9b63:	mov	r15, qword ptr [rbx + 0x20]
0x9b67:	mov	edx, 5
0x9b6c:	mov	r14, qword ptr [rbx + 0x18]
0x9b70:	mov	r8, qword ptr [rbx + 8]
0x9b74:	xor	edi, edi
0x9b76:	mov	qword ptr [rsp + 8], r9
0x9b7b:	mov	rbx, qword ptr [rbx]
0x9b7e:	mov	qword ptr [rsp], r8
0x9b82:	call	0x1660


0x9930:	mov	r10, qword ptr [rbx + 0x40]
0x9934:	mov	r9, qword ptr [rbx + 0x38]
0x9938:	lea	rsi, [rip + 0x2109]
0x993f:	mov	rax, qword ptr [rbx + 0x10]
0x9943:	mov	r8, qword ptr [rbx + 8]
0x9947:	mov	edx, 5
0x994c:	mov	r13, qword ptr [rbx + 0x30]
0x9950:	mov	r12, qword ptr [rbx + 0x28]
0x9954:	mov	r15, qword ptr [rbx + 0x20]
0x9958:	mov	r14, qword ptr [rbx + 0x18]
0x995c:	mov	rbx, qword ptr [rbx]
0x995f:	mov	qword ptr [rsp + 0x18], r10
0x9964:	mov	qword ptr [rsp + 0x10], r9
0x9969:	mov	qword ptr [rsp], rax
0x996d:	mov	qword ptr [rsp + 8], r8
0x9972:	xor	edi, edi
0x9974:	call	0x1660


0x98f6:	add	rsp, 0x28
0x98fa:	pop	rbx
0x98fb:	pop	rbp
0x98fc:	pop	r12
0x98fe:	pop	r13
0x9900:	pop	r14
0x9902:	pop	r15
0x9904:	ret	


0x9ab8:	mov	r15, qword ptr [rbx + 0x20]
0x9abc:	lea	rsi, [rip + 0x1ed5]
0x9ac3:	mov	edx, 5
0x9ac8:	xor	edi, edi
0x9aca:	mov	r14, qword ptr [rbx + 0x18]
0x9ace:	mov	r13, qword ptr [rbx + 0x10]
0x9ad2:	mov	r12, qword ptr [rbx + 8]
0x9ad6:	mov	rbx, qword ptr [rbx]
0x9ad9:	call	0x1660


0x9ade:	push	r15
0x9ae0:	jmp	0x9a86


0x9a86:	push	r14
0x9a88:	mov	rdx, rax
0x9a8b:	mov	r9, r13
0x9a8e:	mov	r8, r12
0x9a91:	mov	rcx, rbx
0x9a94:	mov	rdi, rbp
0x9a97:	mov	esi, 1
0x9a9c:	xor	eax, eax
0x9a9e:	call	0x18a0


0x9aa3:	pop	rax
0x9aa4:	pop	rdx
0x9aa5:	add	rsp, 0x28
0x9aa9:	pop	rbx
0x9aaa:	pop	rbp
0x9aab:	pop	r12
0x9aad:	pop	r13
0x9aaf:	pop	r14
0x9ab1:	pop	r15
0x9ab3:	ret	


0x9b87:	push	r13
0x9b89:	push	r12
0x9b8b:	push	r15
0x9b8d:	push	r14
0x9b8f:	mov	r9, qword ptr [rsp + 0x28]
0x9b94:	jmp	0x9b23


0x9b23:	mov	r8, qword ptr [rsp + 0x20]
0x9b28:	mov	rcx, rbx
0x9b2b:	mov	rdx, rax
0x9b2e:	mov	rdi, rbp
0x9b31:	mov	esi, 1
0x9b36:	xor	eax, eax
0x9b38:	call	0x18a0


0x9b3d:	add	rsp, 0x20
0x9b41:	add	rsp, 0x28
0x9b45:	pop	rbx
0x9b46:	pop	rbp
0x9b47:	pop	r12
0x9b49:	pop	r13
0x9b4b:	pop	r14
0x9b4d:	pop	r15
0x9b4f:	ret	


0x9a2e:	add	rsp, 0x28
0x9a32:	mov	r9, r13
0x9a35:	mov	r8, r12
0x9a38:	mov	rcx, rbx
0x9a3b:	mov	rdi, rbp
0x9a3e:	mov	rdx, rax
0x9a41:	pop	rbx
0x9a42:	pop	rbp
0x9a43:	pop	r12
0x9a45:	pop	r13
0x9a47:	pop	r14
0x9a49:	pop	r15
0x9a4b:	mov	esi, 1
0x9a50:	xor	eax, eax
0x9a52:	jmp	0x18a0


0x9b16:	sub	rsp, 8
0x9b1a:	mov	r9, r13
0x9b1d:	push	r12
0x9b1f:	push	r15
0x9b21:	push	r14
0x9b23:	mov	r8, qword ptr [rsp + 0x20]
0x9b28:	mov	rcx, rbx
0x9b2b:	mov	rdx, rax
0x9b2e:	mov	rdi, rbp
0x9b31:	mov	esi, 1
0x9b36:	xor	eax, eax
0x9b38:	call	0x18a0


0x99e2:	add	rsp, 0x28
0x99e6:	mov	r8, r12
0x99e9:	mov	rcx, rbx
0x99ec:	mov	rdi, rbp
0x99ef:	mov	rdx, rax
0x99f2:	mov	esi, 1
0x99f7:	pop	rbx
0x99f8:	pop	rbp
0x99f9:	pop	r12
0x99fb:	pop	r13
0x99fd:	pop	r14
0x99ff:	pop	r15
0x9a01:	xor	eax, eax
0x9a03:	jmp	0x18a0


0x999e:	add	rsp, 0x28
0x99a2:	mov	rcx, rbx
0x99a5:	mov	rdi, rbp
0x99a8:	pop	rbx
0x99a9:	pop	rbp
0x99aa:	pop	r12
0x99ac:	pop	r13
0x99ae:	pop	r14
0x99b0:	pop	r15
0x99b2:	mov	rdx, rax
0x99b5:	mov	esi, 1
0x99ba:	xor	eax, eax
0x99bc:	jmp	0x18a0


0x98c0:	sub	rsp, 8
0x98c4:	mov	r9, qword ptr [rsp + 0x18]
0x98c9:	mov	rdx, rax
0x98cc:	mov	rcx, rbx
0x98cf:	mov	esi, 1
0x98d4:	mov	rdi, rbp
0x98d7:	xor	eax, eax
0x98d9:	push	r9
0x98db:	push	r13
0x98dd:	push	r12
0x98df:	push	r15
0x98e1:	push	r14
0x98e3:	mov	r9, qword ptr [rsp + 0x30]
0x98e8:	mov	r8, qword ptr [rsp + 0x38]
0x98ed:	call	0x18a0


0x9a82:	sub	rsp, 8
0x9a86:	push	r14
0x9a88:	mov	rdx, rax
0x9a8b:	mov	r9, r13
0x9a8e:	mov	r8, r12
0x9a91:	mov	rcx, rbx
0x9a94:	mov	rdi, rbp
0x9a97:	mov	esi, 1
0x9a9c:	xor	eax, eax
0x9a9e:	call	0x18a0


0x87c0:	sub	rsp, 8
0x87c4:	mov	rcx, rbp
0x87c7:	mov	rsi, r13
0x87ca:	push	qword ptr [rsp + 0x68]
0x87ce:	push	qword ptr [rsp + 0x78]
0x87d2:	mov	rdi, r14
0x87d5:	push	0
0x87d7:	mov	r9d, dword ptr [rsp + 0x98]
0x87df:	mov	r8d, dword ptr [rsp + 0x28]
0x87e4:	mov	rdx, qword ptr [rsp + 0x30]
0x87e9:	and	r9d, 0xfffffffd
0x87ed:	call	0x7c20


0x87f2:	add	rsp, 0x20
0x87f6:	mov	r15, rax
0x87f9:	mov	rbx, qword ptr [rsp + 0xa8]
0x8801:	xor	rbx, qword ptr fs:[0x28]
0x880a:	mov	rax, r15
0x880d:	jne	0x8e13


0x8813:	add	rsp, 0xb8
0x881a:	pop	rbx
0x881b:	pop	rbp
0x881c:	pop	r12
0x881e:	pop	r13
0x8820:	pop	r14
0x8822:	pop	r15
0x8824:	ret	


0x8e13:	call	0x1690


0x8dbd:	sub	rsp, 8
0x8dc1:	mov	r8d, 5
0x8dc7:	mov	rcx, r11
0x8dca:	push	qword ptr [rsp + 0x68]
0x8dce:	push	qword ptr [rsp + 0x78]
0x8dd2:	mov	rdi, r14
0x8dd5:	push	qword ptr [rsp + 0x38]
0x8dd9:	mov	r9d, dword ptr [rsp + 0x98]
0x8de1:	mov	rdx, qword ptr [rsp + 0x30]
0x8de6:	mov	rsi, qword ptr [rsp + 0x70]
0x8deb:	call	0x7c20


0x8df0:	add	rsp, 0x20
0x8df4:	mov	r15, rax
0x8df7:	jmp	0x87f9


0x87f9:	mov	rbx, qword ptr [rsp + 0xa8]
0x8801:	xor	rbx, qword ptr fs:[0x28]
0x880a:	mov	rax, r15
0x880d:	jne	0x8e13


0x15a0:	push	qword ptr [rip + 0x20c86a]
0x15a6:	jmp	qword ptr [rip + 0x20c86c]


0x15ac:	nop	dword ptr [rax]


0x15b6:	push	0
0x15bb:	jmp	0x15a0


0x15c6:	push	1
0x15cb:	jmp	0x15a0


0x15d6:	push	2
0x15db:	jmp	0x15a0


0x15e6:	push	3
0x15eb:	jmp	0x15a0


0x15f6:	push	4
0x15fb:	jmp	0x15a0


0x1606:	push	5
0x160b:	jmp	0x15a0


0x1616:	push	6
0x161b:	jmp	0x15a0


0x1626:	push	7
0x162b:	jmp	0x15a0


0x1636:	push	8
0x163b:	jmp	0x15a0


0x1646:	push	9
0x164b:	jmp	0x15a0


0x1656:	push	0xa
0x165b:	jmp	0x15a0


0x1666:	push	0xb
0x166b:	jmp	0x15a0


0x1676:	push	0xc
0x167b:	jmp	0x15a0


0x1686:	push	0xd
0x168b:	jmp	0x15a0


0x1696:	push	0xe
0x169b:	jmp	0x15a0


0x16a6:	push	0xf
0x16ab:	jmp	0x15a0


0x16b6:	push	0x10
0x16bb:	jmp	0x15a0


0x16c6:	push	0x11
0x16cb:	jmp	0x15a0


0x16d6:	push	0x12
0x16db:	jmp	0x15a0


0x16e6:	push	0x13
0x16eb:	jmp	0x15a0


0x16f6:	push	0x14
0x16fb:	jmp	0x15a0


0x1706:	push	0x15
0x170b:	jmp	0x15a0


0x1716:	push	0x16
0x171b:	jmp	0x15a0


0x1726:	push	0x17
0x172b:	jmp	0x15a0


0x1730:	jmp	qword ptr [rip + 0x20c7aa]




0x1736:	push	0x18
0x173b:	jmp	0x15a0


0x1746:	push	0x19
0x174b:	jmp	0x15a0


0x1756:	push	0x1a
0x175b:	jmp	0x15a0


0x1766:	push	0x1b
0x176b:	jmp	0x15a0


0x1776:	push	0x1c
0x177b:	jmp	0x15a0


0x1786:	push	0x1d
0x178b:	jmp	0x15a0


0x1796:	push	0x1e
0x179b:	jmp	0x15a0


0x17a6:	push	0x1f
0x17ab:	jmp	0x15a0


0x17b6:	push	0x20
0x17bb:	jmp	0x15a0


0x17c6:	push	0x21
0x17cb:	jmp	0x15a0


0x17d6:	push	0x22
0x17db:	jmp	0x15a0


0x17e6:	push	0x23
0x17eb:	jmp	0x15a0


0x17f6:	push	0x24
0x17fb:	jmp	0x15a0


0x1806:	push	0x25
0x180b:	jmp	0x15a0


0x1816:	push	0x26
0x181b:	jmp	0x15a0


0x1826:	push	0x27
0x182b:	jmp	0x15a0


0x1836:	push	0x28
0x183b:	jmp	0x15a0


0x1846:	push	0x29
0x184b:	jmp	0x15a0


0x1856:	push	0x2a
0x185b:	jmp	0x15a0


0x1866:	push	0x2b
0x186b:	jmp	0x15a0


0x1876:	push	0x2c
0x187b:	jmp	0x15a0


0x1886:	push	0x2d
0x188b:	jmp	0x15a0


0x1896:	push	0x2e
0x189b:	jmp	0x15a0


0x18a6:	push	0x2f
0x18ab:	jmp	0x15a0


0x18b0:	jmp	qword ptr [rip + 0x20c6ea]




0x18b6:	push	0x30
0x18bb:	jmp	0x15a0


0x18c0:	jmp	qword ptr [rip + 0x20c6e2]




0x18c6:	push	0x31
0x18cb:	jmp	0x15a0


0x18d6:	push	0x32
0x18db:	jmp	0x15a0


0x18e6:	push	0x33
0x18eb:	jmp	0x15a0


0x2a3d:	nop	dword ptr [rax]


0x2a6a:	hlt	


0x2a6b:	nop	dword ptr [rax + rax]


0x2aa2:	nop	dword ptr [rax]
0x2aa6:	nop	word ptr cs:[rax + rax]


0x2af2:	nop	dword ptr [rax]
0x2af6:	nop	word ptr cs:[rax + rax]


0x2b3a:	nop	word ptr [rax + rax]


0x2b4a:	nop	word ptr [rax + rax]


0x2bc9:	nop	dword ptr [rax]


0x2cf5:	nop	
0x2cf6:	nop	word ptr cs:[rax + rax]


0x2e9a:	nop	word ptr [rax + rax]


0x32f2:	nop	word ptr cs:[rax + rax]
0x32fc:	nop	dword ptr [rax]


0x3308:	nop	dword ptr [rax + rax]


0x3318:	nop	dword ptr [rax + rax]


0x33c4:	nop	word ptr cs:[rax + rax]
0x33ce:	nop	


0x3458:	nop	dword ptr [rax + rax]


0x34e8:	nop	dword ptr [rax + rax]


0x350f:	nop	


0x352f:	nop	


0x7243:	nop	dword ptr [rax]
0x7246:	nop	word ptr cs:[rax + rax]


0x7322:	nop	dword ptr [rax]
0x7326:	nop	word ptr cs:[rax + rax]


0x7352:	nop	dword ptr [rax]
0x7356:	nop	word ptr cs:[rax + rax]


0x764f:	nop	


0x7741:	nop	dword ptr [rax + rax]
0x7746:	nop	word ptr cs:[rax + rax]


0x7841:	nop	dword ptr [rax + rax]
0x7846:	nop	word ptr cs:[rax + rax]


0x796c:	nop	dword ptr [rax]


0x7983:	nop	dword ptr [rax]
0x7986:	nop	word ptr cs:[rax + rax]


0x79a3:	nop	word ptr cs:[rax + rax]
0x79ad:	nop	dword ptr [rax]


0x79b5:	nop	
0x79b6:	nop	word ptr cs:[rax + rax]


0x79e2:	nop	word ptr cs:[rax + rax]
0x79ec:	nop	dword ptr [rax]


0x7a83:	nop	word ptr cs:[rax + rax]
0x7a8d:	nop	dword ptr [rax]


0x7b2f:	nop	


0x7c17:	nop	word ptr [rax + rax]


0x7cb3:	mov	byte ptr [rsp + 0xe], 1
0x7cb8:	mov	byte ptr [rsp + 0x7c], 0
0x7cbd:	xor	r12d, r12d
0x7cc0:	mov	qword ptr [rsp + 0x50], 0
0x7cc9:	mov	byte ptr [rsp + 0xf], 1
0x7cce:	mov	byte ptr [rsp + 0xd], 0
0x7cd3:	lea	rax, [rip + 0x365b]
0x7cda:	mov	qword ptr [rsp + 0x18], 1
0x7ce3:	xor	r15d, r15d
0x7ce6:	mov	dword ptr [rsp + 8], 2
0x7cee:	mov	qword ptr [rsp + 0x48], rax
0x7cf3:	xor	r11d, r11d
0x7cf6:	mov	rax, rbp
0x7cf9:	mov	r8d, r12d
0x7cfc:	mov	rbp, r11
0x7cff:	mov	r11, rax
0x7d02:	nop	word ptr [rax + rax]
0x7d08:	cmp	r11, rbp
0x7d0b:	setne	r12b
0x7d0f:	cmp	r11, -1
0x7d13:	jne	0x7d22


0x7d15:	mov	rax, qword ptr [rsp + 0x10]
0x7d1a:	cmp	byte ptr [rax + rbp], 0
0x7d1e:	setne	r12b
0x7d22:	test	r12b, r12b
0x7d25:	je	0x8380


0x7d22:	test	r12b, r12b
0x7d25:	je	0x8380


0x8380:	cmp	dword ptr [rsp + 8], 2
0x8385:	movzx	ebx, byte ptr [rsp + 0xf]
0x838a:	mov	r12d, r8d
0x838d:	mov	rbp, r11
0x8390:	sete	dl
0x8393:	mov	eax, ebx
0x8395:	test	r15, r15
0x8398:	sete	cl
0x839b:	and	eax, edx
0x839d:	and	al, cl
0x839f:	jne	0x8e06


0x7d2b:	cmp	dword ptr [rsp + 8], 2
0x7d30:	mov	rdi, qword ptr [rsp + 0x10]
0x7d35:	lea	r9, [rdi + rbp]
0x7d39:	setne	al
0x7d3c:	and	al, byte ptr [rsp + 0xd]
0x7d40:	mov	r10d, eax
0x7d43:	je	0x7df0


0x83a5:	mov	eax, ebx
0x83a7:	xor	eax, 1
0x83aa:	and	dl, al
0x83ac:	je	0x8d1c


0x8e06:	mov	dword ptr [rsp + 8], 2
0x8e0e:	jmp	0x87a9


0x7df0:	movzx	ebx, byte ptr [r9]
0x7df4:	cmp	bl, 0x7e
0x7df7:	ja	0x8118


0x7d49:	mov	rax, qword ptr [rsp + 0x18]
0x7d4e:	test	rax, rax
0x7d51:	je	0x8180


0x8d1c:	mov	rbx, qword ptr [rsp + 0x48]
0x8d21:	test	rbx, rbx
0x8d24:	je	0x8d52


0x83b2:	cmp	byte ptr [rsp + 0x7c], 0
0x83b7:	je	0x8d1a


0x87a9:	cmp	byte ptr [rsp + 0xd], 0
0x87ae:	je	0x87c0


0x7dfd:	lea	rcx, [rip + 0x35c8]
0x7e04:	movzx	edx, bl
0x7e07:	movsxd	rax, dword ptr [rcx + rdx*4]
0x7e0b:	add	rax, rcx
0x7e0e:	jmp	rax


0x8118:	cmp	qword ptr [rsp + 0x58], 1
0x811e:	jne	0x84c8


0x8180:	movzx	ebx, byte ptr [r9]
0x8184:	cmp	bl, 0x7e
0x8187:	ja	0x8110


0x7d57:	cmp	r11, -1
0x7d5b:	lea	rbx, [rbp + rax]
0x7d60:	jne	0x7d90


0x8d52:	cmp	r13, r15
0x8d55:	jbe	0x87f9


0x8d26:	test	al, al
0x8d28:	je	0x8d52


0x8d1a:	mov	eax, edx
0x8d1c:	mov	rbx, qword ptr [rsp + 0x48]
0x8d21:	test	rbx, rbx
0x8d24:	je	0x8d52


0x83bd:	cmp	byte ptr [rsp + 0xe], 0
0x83c2:	jne	0x8dbd


0x87b0:	test	al, al
0x87b2:	mov	eax, 4
0x87b7:	cmove	eax, dword ptr [rsp + 8]
0x87bc:	mov	dword ptr [rsp + 8], eax


0x8124:	mov	qword ptr [rsp + 0x38], r11
0x8129:	mov	byte ptr [rsp + 0x30], r8b
0x812e:	mov	byte ptr [rsp + 0x28], r10b
0x8133:	call	0x18e0


0x84c8:	lea	rax, [rsp + 0xa0]
0x84d0:	cmp	r11, -1
0x84d4:	mov	qword ptr [rsp + 0xa0], 0
0x84e0:	mov	qword ptr [rsp + 0x28], rax
0x84e5:	jne	0x8514


0x8189:	lea	rcx, [rip + 0x3438]
0x8190:	movzx	edx, bl
0x8193:	movsxd	rax, dword ptr [rcx + rdx*4]
0x8197:	add	rax, rcx
0x819a:	jmp	rax


0x8110:	xor	r10d, r10d
0x8113:	nop	dword ptr [rax + rax]
0x8118:	cmp	qword ptr [rsp + 0x58], 1
0x811e:	jne	0x84c8


0x7d62:	cmp	rax, 1
0x7d66:	jbe	0x7d90


0x7d90:	cmp	rbx, r11
0x7d93:	mov	byte ptr [rsp + 0x28], r10b
0x7d98:	ja	0x8350


0x8d5b:	mov	byte ptr [r14 + r15], 0
0x8d60:	jmp	0x87f9


0x8d2a:	movzx	ecx, byte ptr [rbx]
0x8d2d:	mov	rax, rbx
0x8d30:	test	cl, cl
0x8d32:	je	0x8d52


0x83c8:	test	r13, r13
0x83cb:	sete	al
0x83ce:	cmp	qword ptr [rsp + 0x50], 0
0x83d4:	setne	dl
0x83d7:	and	al, dl
0x83d9:	je	0x8dfc


0x84e7:	mov	rdi, qword ptr [rsp + 0x10]
0x84ec:	mov	byte ptr [rsp + 0x40], r8b
0x84f1:	mov	byte ptr [rsp + 0x38], r10b
0x84f6:	mov	qword ptr [rsp + 0x30], r9
0x84fb:	call	0x1680


0x8514:	lea	rax, [rsp + 0x9c]
0x851c:	xor	ecx, ecx
0x851e:	mov	byte ptr [rsp + 0x7e], bl
0x8522:	mov	byte ptr [rsp + 0x7d], r8b
0x8527:	mov	rbx, rcx
0x852a:	mov	qword ptr [rsp + 0x88], r9
0x8532:	mov	qword ptr [rsp + 0x38], rax
0x8537:	mov	byte ptr [rsp + 0x7f], r10b
0x853c:	mov	qword ptr [rsp + 0x80], r15
0x8544:	mov	qword ptr [rsp + 0x40], r14
0x8549:	mov	qword ptr [rsp + 0x70], r13
0x854e:	mov	qword ptr [rsp + 0x30], r11
0x8553:	mov	rax, qword ptr [rsp + 0x10]
0x8558:	lea	r14, [rbp + rbx]
0x855d:	mov	rdx, qword ptr [rsp + 0x30]
0x8562:	mov	rcx, qword ptr [rsp + 0x28]
0x8567:	mov	rdi, qword ptr [rsp + 0x38]
0x856c:	lea	r13, [rax + r14]
0x8570:	sub	rdx, r14
0x8573:	mov	rsi, r13
0x8576:	call	0xa420


0x7d68:	mov	byte ptr [rsp + 0x38], r8b
0x7d6d:	mov	byte ptr [rsp + 0x30], r10b
0x7d72:	mov	qword ptr [rsp + 0x28], r9
0x7d77:	call	0x1680


0x7d9e:	mov	rdx, qword ptr [rsp + 0x18]
0x7da3:	mov	rsi, qword ptr [rsp + 0x48]
0x7da8:	mov	rdi, r9
0x7dab:	mov	qword ptr [rsp + 0x40], r11
0x7db0:	mov	byte ptr [rsp + 0x38], r8b
0x7db5:	mov	qword ptr [rsp + 0x30], r9
0x7dba:	call	0x1730


0x8350:	xor	r10d, r10d
0x8353:	jmp	0x7df0


0x8d34:	mov	rdx, r15
0x8d37:	sub	rax, r15
0x8d3a:	cmp	r13, rdx
0x8d3d:	jbe	0x8d43


0x8dfc:	movzx	eax, byte ptr [rsp + 0x7c]
0x8e01:	jmp	0x8d1c


0x83df:	mov	r13, qword ptr [rsp + 0x50]
0x83e4:	lea	rbx, [rip + 0x2f4a]
0x83eb:	mov	byte ptr [r14], 0x27
0x83ef:	mov	dword ptr [rsp + 8], 2
0x83f7:	mov	r15d, 1
0x83fd:	mov	qword ptr [rsp + 0x18], 1
0x8406:	mov	byte ptr [rsp + 0xf], 0
0x840b:	mov	qword ptr [rsp + 0x48], rbx
0x8410:	mov	byte ptr [rsp + 0x7c], al
0x8414:	jmp	0x7cf3


0x8d43:	add	rdx, 1
0x8d47:	movzx	ecx, byte ptr [rax + rdx]
0x8d4b:	test	cl, cl
0x8d4d:	jne	0x8d3a


0x8d3f:	mov	byte ptr [r14 + rdx], cl
0x8d43:	add	rdx, 1
0x8d47:	movzx	ecx, byte ptr [rax + rdx]
0x8d4b:	test	cl, cl
0x8d4d:	jne	0x8d3a


0x7cf3:	xor	r11d, r11d
0x7cf6:	mov	rax, rbp
0x7cf9:	mov	r8d, r12d
0x7cfc:	mov	rbp, r11
0x7cff:	mov	r11, rax
0x7d02:	nop	word ptr [rax + rax]
0x7d08:	cmp	r11, rbp
0x7d0b:	setne	r12b
0x7d0f:	cmp	r11, -1
0x7d13:	jne	0x7d22


0x8d4f:	mov	r15, rdx
0x8d52:	cmp	r13, r15
0x8d55:	jbe	0x87f9


0x8d3a:	cmp	r13, rdx
0x8d3d:	jbe	0x8d43


0x7dbf:	test	eax, eax
0x7dc1:	mov	r9, qword ptr [rsp + 0x30]
0x7dc6:	movzx	r8d, byte ptr [rsp + 0x38]
0x7dcc:	mov	r11, qword ptr [rsp + 0x40]
0x7dd1:	jne	0x8350


0x7dd7:	cmp	byte ptr [rsp + 0xf], 0
0x7ddc:	movzx	r10d, byte ptr [rsp + 0x28]
0x7de2:	jne	0x8d65


0x8d65:	cmp	dword ptr [rsp + 8], 2
0x8d6a:	movzx	ebx, byte ptr [rsp + 0xf]
0x8d6f:	mov	rbp, r11
0x8d72:	sete	al
0x8d75:	mov	byte ptr [rsp + 0xd], bl
0x8d79:	jmp	0x87a9


0x857b:	test	rax, rax
0x857e:	mov	r15, rax
0x8581:	je	0x85d1


0x85d1:	mov	edx, r12d
0x85d4:	mov	rdi, rbx
0x85d7:	movzx	r8d, byte ptr [rsp + 0x7d]
0x85dd:	xor	edx, 1
0x85e0:	movzx	ebx, byte ptr [rsp + 0x7e]
0x85e5:	movzx	r10d, byte ptr [rsp + 0x7f]
0x85eb:	and	dl, byte ptr [rsp + 0xd]
0x85ef:	mov	r15, qword ptr [rsp + 0x80]
0x85f7:	mov	r14, qword ptr [rsp + 0x40]
0x85fc:	mov	r13, qword ptr [rsp + 0x70]
0x8601:	mov	r11, qword ptr [rsp + 0x30]
0x8606:	cmp	rdi, 1
0x860a:	jbe	0x8c0b


0x8583:	cmp	rax, -1
0x8587:	je	0x8ba5


0x8c0b:	mov	eax, edx
0x8c0d:	jmp	0x8167


0x8610:	mov	rcx, rdi
0x8613:	xor	esi, esi
0x8615:	movzx	r9d, byte ptr [rsp + 0xf]
0x861b:	add	rcx, rbp
0x861e:	mov	rdi, qword ptr [rsp + 0x10]
0x8623:	jmp	0x86de


0x8ba5:	mov	rdi, rbx
0x8ba8:	movzx	r8d, byte ptr [rsp + 0x7d]
0x8bae:	movzx	ebx, byte ptr [rsp + 0x7e]
0x8bb3:	movzx	r10d, byte ptr [rsp + 0x7f]
0x8bb9:	mov	r15, qword ptr [rsp + 0x80]
0x8bc1:	xor	r12d, r12d
0x8bc4:	mov	r14, qword ptr [rsp + 0x40]
0x8bc9:	mov	r13, qword ptr [rsp + 0x70]
0x8bce:	mov	r11, qword ptr [rsp + 0x30]
0x8bd3:	movzx	edx, byte ptr [rsp + 0xd]
0x8bd8:	jmp	0x8606


0x858d:	cmp	rax, -2
0x8591:	je	0x8b31


0x8167:	test	al, al
0x8169:	jne	0x8b01


0x86de:	test	dl, dl
0x86e0:	jne	0x8630


0x8606:	cmp	rdi, 1
0x860a:	jbe	0x8c0b


0x8b31:	mov	r11, qword ptr [rsp + 0x30]
0x8b36:	mov	rsi, r14
0x8b39:	mov	rcx, r13
0x8b3c:	mov	rax, rbx
0x8b3f:	mov	rdi, rbx
0x8b42:	movzx	r8d, byte ptr [rsp + 0x7d]
0x8b48:	movzx	ebx, byte ptr [rsp + 0x7e]
0x8b4d:	mov	r9, qword ptr [rsp + 0x88]
0x8b55:	cmp	rsi, r11
0x8b58:	movzx	r10d, byte ptr [rsp + 0x7f]
0x8b5e:	mov	r15, qword ptr [rsp + 0x80]
0x8b66:	mov	r14, qword ptr [rsp + 0x40]
0x8b6b:	mov	r13, qword ptr [rsp + 0x70]
0x8b70:	jae	0x8b98


0x8597:	cmp	dword ptr [rsp + 8], 2
0x859c:	sete	al
0x859f:	and	al, byte ptr [rsp + 0xf]
0x85a3:	jne	0x8740


0x816f:	cmp	dword ptr [rsp + 8], 2
0x8174:	sete	dl
0x8177:	jmp	0x7e48


0x8b01:	movzx	edx, byte ptr [rsp + 0xd]
0x8b06:	xor	r12d, r12d
0x8b09:	jmp	0x8610


0x86e6:	mov	eax, esi
0x86e8:	xor	eax, 1
0x86eb:	and	eax, r8d
0x86ee:	test	r10b, r10b
0x86f1:	je	0x8701


0x8630:	cmp	dword ptr [rsp + 8], 2
0x8635:	sete	al
0x8638:	test	r9b, r9b
0x863b:	jne	0x8af0


0x8b72:	cmp	byte ptr [rcx], 0
0x8b75:	jne	0x8b87


0x8b98:	movzx	edx, byte ptr [rsp + 0xd]
0x8b9d:	xor	r12d, r12d
0x8ba0:	jmp	0x8606


0x85a9:	mov	edi, dword ptr [rsp + 0x9c]
0x85b0:	call	0x18c0


0x8740:	cmp	r15, 1
0x8744:	je	0x85a9


0x7e48:	cmp	byte ptr [rsp + 0xd], 1
0x7e4d:	jne	0x7f62


0x8701:	add	rbp, 1
0x8705:	cmp	rbp, rcx
0x8708:	jae	0x7e8c


0x86f3:	cmp	r13, r15
0x86f6:	jbe	0x86fd


0x8641:	mov	esi, r8d
0x8644:	xor	esi, 1
0x8647:	and	al, sil
0x864a:	je	0x867b


0x8af0:	movzx	ebx, byte ptr [rsp + 0xf]
0x8af5:	mov	rbp, r11
0x8af8:	mov	byte ptr [rsp + 0xd], bl
0x8afc:	jmp	0x87a9


0x8b77:	jmp	0x8b98


0x8b87:	add	rax, 1
0x8b8b:	lea	rdx, [rbp + rax]
0x8b90:	cmp	r11, rdx
0x8b93:	ja	0x8b80


0x874a:	mov	rdi, qword ptr [rsp + 0x10]
0x874f:	lea	rcx, [rdi + r15]
0x8753:	lea	rdx, [rdi + r14 + 1]
0x8758:	lea	r8, [rcx + r14]
0x875c:	jmp	0x876d


0x7e53:	test	dl, dl
0x7e55:	jne	0x7f62


0x7f62:	cmp	byte ptr [rsp + 0xf], 0
0x7f67:	jne	0x7e5b


0x870e:	test	al, al
0x8710:	je	0x8b0e


0x7e8c:	test	al, al
0x7e8e:	je	0x7eb0


0x86fd:	add	r15, 1
0x8701:	add	rbp, 1
0x8705:	cmp	rbp, rcx
0x8708:	jae	0x7e8c


0x86f8:	mov	byte ptr [r14 + r15], 0x5c
0x86fd:	add	r15, 1
0x8701:	add	rbp, 1
0x8705:	cmp	rbp, rcx
0x8708:	jae	0x7e8c


0x867b:	cmp	r13, r15
0x867e:	jbe	0x8685


0x864c:	cmp	r13, r15
0x864f:	jbe	0x8656


0x8b95:	mov	rdi, rax
0x8b98:	movzx	edx, byte ptr [rsp + 0xd]
0x8b9d:	xor	r12d, r12d
0x8ba0:	jmp	0x8606


0x8b80:	cmp	byte ptr [r9 + rax], 0
0x8b85:	je	0x8b95


0x876d:	movzx	ecx, byte ptr [rdx]
0x8770:	sub	ecx, 0x5b
0x8773:	cmp	cl, 0x21
0x8776:	ja	0x8760


0x7e5b:	mov	rsi, qword ptr [rsp + 0x20]
0x7e60:	test	rsi, rsi
0x7e63:	je	0x7e79


0x7f6d:	jmp	0x7e79


0x8b0e:	xor	r10d, r10d
0x8b11:	jmp	0x86cd


0x8716:	cmp	r13, r15
0x8719:	jbe	0x8720


0x7eb0:	cmp	r15, r13
0x7eb3:	jae	0x7eb9


0x7e90:	cmp	r13, r15
0x7e93:	jbe	0x7e9a


0x8685:	lea	rax, [r15 + 1]
0x8689:	cmp	r13, rax
0x868c:	jbe	0x869b


0x8680:	mov	byte ptr [r14 + r15], 0x5c
0x8685:	lea	rax, [r15 + 1]
0x8689:	cmp	r13, rax
0x868c:	jbe	0x869b


0x8656:	lea	rsi, [r15 + 1]
0x865a:	cmp	r13, rsi
0x865d:	jbe	0x8665


0x8651:	mov	byte ptr [r14 + r15], 0x27
0x8656:	lea	rsi, [r15 + 1]
0x865a:	cmp	r13, rsi
0x865d:	jbe	0x8665


0x8778:	mov	esi, 1
0x877d:	shl	rsi, cl
0x8780:	mov	rcx, rsi
0x8783:	movabs	rsi, 0x20000002b
0x878d:	test	rcx, rsi
0x8790:	je	0x8760


0x8760:	add	rdx, 1
0x8764:	cmp	r8, rdx
0x8767:	je	0x85a9


0x7e79:	test	r10b, r10b
0x7e7c:	jne	0x7fc3


0x7e65:	mov	edx, ebx
0x7e67:	shr	dl, 5
0x7e6a:	movzx	edx, dl
0x7e6d:	mov	edx, dword ptr [rsi + rdx*4]
0x7e70:	bt	edx, ebx
0x7e73:	jb	0x7fc3


0x86cd:	cmp	r13, r15
0x86d0:	jbe	0x86d6


0x8720:	lea	rax, [r15 + 1]
0x8724:	cmp	r13, rax
0x8727:	jbe	0x872f


0x871b:	mov	byte ptr [r14 + r15], 0x27
0x8720:	lea	rax, [r15 + 1]
0x8724:	cmp	r13, rax
0x8727:	jbe	0x872f


0x7eb5:	mov	byte ptr [r14 + r15], bl
0x7eb9:	movzx	edi, byte ptr [rsp + 0xe]
0x7ebe:	add	r15, 1
0x7ec2:	mov	eax, 0
0x7ec7:	test	r12b, r12b
0x7eca:	cmove	edi, eax
0x7ecd:	mov	byte ptr [rsp + 0xe], dil
0x7ed2:	jmp	0x7d08


0x7eb9:	movzx	edi, byte ptr [rsp + 0xe]
0x7ebe:	add	r15, 1
0x7ec2:	mov	eax, 0
0x7ec7:	test	r12b, r12b
0x7eca:	cmove	edi, eax
0x7ecd:	mov	byte ptr [rsp + 0xe], dil
0x7ed2:	jmp	0x7d08


0x7e9a:	lea	rax, [r15 + 1]
0x7e9e:	cmp	r13, rax
0x7ea1:	jbe	0x7ea9


0x7e95:	mov	byte ptr [r14 + r15], 0x27
0x7e9a:	lea	rax, [r15 + 1]
0x7e9e:	cmp	r13, rax
0x7ea1:	jbe	0x7ea9


0x869b:	lea	rax, [r15 + 2]
0x869f:	cmp	r13, rax
0x86a2:	jbe	0x86b4


0x868e:	mov	eax, ebx
0x8690:	shr	al, 6
0x8693:	add	eax, 0x30
0x8696:	mov	byte ptr [r14 + r15 + 1], al
0x869b:	lea	rax, [r15 + 2]
0x869f:	cmp	r13, rax
0x86a2:	jbe	0x86b4


0x8665:	lea	rsi, [r15 + 2]
0x8669:	cmp	r13, rsi
0x866c:	jbe	0x8674


0x865f:	mov	byte ptr [r14 + r15 + 1], 0x24
0x8665:	lea	rsi, [r15 + 2]
0x8669:	cmp	r13, rsi
0x866c:	jbe	0x8674


0x8792:	mov	r14, qword ptr [rsp + 0x40]
0x8797:	mov	r13, qword ptr [rsp + 0x70]
0x879c:	mov	rbp, qword ptr [rsp + 0x30]
0x87a1:	mov	dword ptr [rsp + 8], 2
0x87a9:	cmp	byte ptr [rsp + 0xd], 0
0x87ae:	je	0x87c0


0x7e82:	xor	eax, 1
0x7e85:	add	rbp, 1
0x7e89:	and	eax, r8d
0x7e8c:	test	al, al
0x7e8e:	je	0x7eb0


0x7fc3:	cmp	dword ptr [rsp + 8], 2
0x7fc8:	sete	dl
0x7fcb:	cmp	byte ptr [rsp + 0xf], 0
0x7fd0:	mov	eax, edx
0x7fd2:	jne	0x8828


0x86d6:	movzx	ebx, byte ptr [rdi + rbp]
0x86da:	add	r15, 1
0x86de:	test	dl, dl
0x86e0:	jne	0x8630


0x86d2:	mov	byte ptr [r14 + r15], bl
0x86d6:	movzx	ebx, byte ptr [rdi + rbp]
0x86da:	add	r15, 1
0x86de:	test	dl, dl
0x86e0:	jne	0x8630


0x872f:	add	r15, 2
0x8733:	xor	r10d, r10d
0x8736:	xor	r8d, r8d
0x8739:	jmp	0x86cd


0x8729:	mov	byte ptr [r14 + r15 + 1], 0x27
0x872f:	add	r15, 2
0x8733:	xor	r10d, r10d
0x8736:	xor	r8d, r8d
0x8739:	jmp	0x86cd


0x7d08:	cmp	r11, rbp
0x7d0b:	setne	r12b
0x7d0f:	cmp	r11, -1
0x7d13:	jne	0x7d22


0x7ea9:	add	r15, 2
0x7ead:	xor	r8d, r8d
0x7eb0:	cmp	r15, r13
0x7eb3:	jae	0x7eb9


0x7ea3:	mov	byte ptr [r14 + r15 + 1], 0x27
0x7ea9:	add	r15, 2
0x7ead:	xor	r8d, r8d
0x7eb0:	cmp	r15, r13
0x7eb3:	jae	0x7eb9


0x86b4:	and	ebx, 7
0x86b7:	add	rbp, 1
0x86bb:	add	r15, 3
0x86bf:	add	ebx, 0x30
0x86c2:	cmp	rbp, rcx
0x86c5:	jae	0x7eb0


0x86a4:	mov	eax, ebx
0x86a6:	shr	al, 3
0x86a9:	and	eax, 7
0x86ac:	add	eax, 0x30
0x86af:	mov	byte ptr [r14 + r15 + 2], al
0x86b4:	and	ebx, 7
0x86b7:	add	rbp, 1
0x86bb:	add	r15, 3
0x86bf:	add	ebx, 0x30
0x86c2:	cmp	rbp, rcx
0x86c5:	jae	0x7eb0


0x8674:	add	r15, 3
0x8678:	mov	r8d, eax
0x867b:	cmp	r13, r15
0x867e:	jbe	0x8685


0x866e:	mov	byte ptr [r14 + r15 + 2], 0x27
0x8674:	add	r15, 3
0x8678:	mov	r8d, eax
0x867b:	cmp	r13, r15
0x867e:	jbe	0x8685


0x7fd8:	mov	eax, r8d
0x7fdb:	xor	eax, 1
0x7fde:	and	al, dl
0x7fe0:	je	0x8011


0x8828:	mov	rbp, r11
0x882b:	jmp	0x87a9


0x86cb:	mov	esi, edx
0x86cd:	cmp	r13, r15
0x86d0:	jbe	0x86d6


0x8011:	cmp	r13, r15
0x8014:	jbe	0x801b


0x7fe2:	cmp	r13, r15
0x7fe5:	jbe	0x7fec


0x801b:	add	r15, 1
0x801f:	add	rbp, 1
0x8023:	jmp	0x7eb0


0x8016:	mov	byte ptr [r14 + r15], 0x5c
0x801b:	add	r15, 1
0x801f:	add	rbp, 1
0x8023:	jmp	0x7eb0


0x7fec:	lea	rdx, [r15 + 1]
0x7ff0:	cmp	r13, rdx
0x7ff3:	jbe	0x7ffb


0x7fe7:	mov	byte ptr [r14 + r15], 0x27
0x7fec:	lea	rdx, [r15 + 1]
0x7ff0:	cmp	r13, rdx
0x7ff3:	jbe	0x7ffb


0x7ffb:	lea	rdx, [r15 + 2]
0x7fff:	cmp	r13, rdx
0x8002:	jbe	0x800a


0x7ff5:	mov	byte ptr [r14 + r15 + 1], 0x24
0x7ffb:	lea	rdx, [r15 + 2]
0x7fff:	cmp	r13, rdx
0x8002:	jbe	0x800a


0x800a:	add	r15, 3
0x800e:	mov	r8d, eax
0x8011:	cmp	r13, r15
0x8014:	jbe	0x801b


0x8004:	mov	byte ptr [r14 + r15 + 2], 0x27
0x800a:	add	r15, 3
0x800e:	mov	r8d, eax
0x8011:	cmp	r13, r15
0x8014:	jbe	0x801b


0x85b5:	mov	rdi, qword ptr [rsp + 0x28]
0x85ba:	test	eax, eax
0x85bc:	mov	eax, 0
0x85c1:	cmove	r12d, eax
0x85c5:	add	rbx, r15
0x85c8:	call	0x18b0


0x85cd:	test	eax, eax
0x85cf:	je	0x8553


0x8553:	mov	rax, qword ptr [rsp + 0x10]
0x8558:	lea	r14, [rbp + rbx]
0x855d:	mov	rdx, qword ptr [rsp + 0x30]
0x8562:	mov	rcx, qword ptr [rsp + 0x28]
0x8567:	mov	rdi, qword ptr [rsp + 0x38]
0x856c:	lea	r13, [rax + r14]
0x8570:	sub	rdx, r14
0x8573:	mov	rsi, r13
0x8576:	call	0xa420


0x7d7c:	movzx	r8d, byte ptr [rsp + 0x38]
0x7d82:	movzx	r10d, byte ptr [rsp + 0x30]
0x7d88:	mov	r11, rax
0x7d8b:	mov	r9, qword ptr [rsp + 0x28]
0x7d90:	cmp	rbx, r11
0x7d93:	mov	byte ptr [rsp + 0x28], r10b
0x7d98:	ja	0x8350


0x8500:	movzx	r8d, byte ptr [rsp + 0x40]
0x8506:	movzx	r10d, byte ptr [rsp + 0x38]
0x850c:	mov	r11, rax
0x850f:	mov	r9, qword ptr [rsp + 0x30]
0x8514:	lea	rax, [rsp + 0x9c]
0x851c:	xor	ecx, ecx
0x851e:	mov	byte ptr [rsp + 0x7e], bl
0x8522:	mov	byte ptr [rsp + 0x7d], r8b
0x8527:	mov	rbx, rcx
0x852a:	mov	qword ptr [rsp + 0x88], r9
0x8532:	mov	qword ptr [rsp + 0x38], rax
0x8537:	mov	byte ptr [rsp + 0x7f], r10b
0x853c:	mov	qword ptr [rsp + 0x80], r15
0x8544:	mov	qword ptr [rsp + 0x40], r14
0x8549:	mov	qword ptr [rsp + 0x70], r13
0x854e:	mov	qword ptr [rsp + 0x30], r11
0x8553:	mov	rax, qword ptr [rsp + 0x10]
0x8558:	lea	r14, [rbp + rbx]
0x855d:	mov	rdx, qword ptr [rsp + 0x30]
0x8562:	mov	rcx, qword ptr [rsp + 0x28]
0x8567:	mov	rdi, qword ptr [rsp + 0x38]
0x856c:	lea	r13, [rax + r14]
0x8570:	sub	rdx, r14
0x8573:	mov	rsi, r13
0x8576:	call	0xa420


0x8138:	mov	rcx, qword ptr [rax]
0x813b:	movzx	edx, bl
0x813e:	movzx	r10d, byte ptr [rsp + 0x28]
0x8144:	movzx	r8d, byte ptr [rsp + 0x30]
0x814a:	mov	r11, qword ptr [rsp + 0x38]
0x814f:	mov	edi, 1
0x8154:	movzx	eax, word ptr [rcx + rdx*2]
0x8158:	and	ax, 0x4000
0x815c:	setne	r12b
0x8160:	sete	al
0x8163:	and	al, byte ptr [rsp + 0xd]
0x8167:	test	al, al
0x8169:	jne	0x8b01


0x7e10:	xor	r10d, r10d
0x7e13:	cmp	r11, 1
0x7e17:	setne	al
0x7e1a:	cmp	r11, -1
0x7e1e:	jne	0x7e2c


0x7e20:	mov	rax, qword ptr [rsp + 0x10]
0x7e25:	cmp	byte ptr [rax + 1], 0
0x7e29:	setne	al
0x7e2c:	cmp	dword ptr [rsp + 8], 2
0x7e31:	sete	dl
0x7e34:	test	al, al
0x7e36:	je	0x8088


0x7e2c:	cmp	dword ptr [rsp + 8], 2
0x7e31:	sete	dl
0x7e34:	test	al, al
0x7e36:	je	0x8088


0x8088:	test	rbp, rbp
0x808b:	jne	0x7e3c


0x7e3c:	xor	r12d, r12d
0x7e3f:	xor	eax, eax
0x7e41:	nop	dword ptr [rax]
0x7e48:	cmp	byte ptr [rsp + 0xd], 1
0x7e4d:	jne	0x7f62


0x8091:	movzx	eax, byte ptr [rsp + 0xf]
0x8096:	and	al, dl
0x8098:	je	0x7e48


0x809e:	mov	rbp, r11
0x80a1:	mov	dword ptr [rsp + 8], 2
0x80a9:	jmp	0x87a9


0x84a8:	cmp	byte ptr [rsp + 0xf], 0
0x84ad:	jne	0x8cd0


0x7ef0:	cmp	eax, 5
0x7ef3:	je	0x8468


0x84b3:	xor	r12d, r12d
0x84b6:	xor	eax, eax
0x84b8:	mov	ebx, 0x3f
0x84bd:	jmp	0x7e79


0x8cd0:	mov	rbp, r11
0x8cd3:	movzx	eax, byte ptr [rsp + 0xf]
0x8cd8:	jmp	0x87a9


0x8468:	test	byte ptr [rsp + 0x78], 4
0x846d:	je	0x8490


0x7ef9:	cmp	eax, 2
0x7efc:	mov	ebx, 0x3f
0x7f01:	sete	dl
0x7f04:	xor	r12d, r12d
0x7f07:	xor	eax, eax
0x7f09:	jmp	0x7e48


0x8490:	xor	edx, edx
0x8492:	xor	r12d, r12d
0x8495:	xor	eax, eax
0x8497:	mov	ebx, 0x3f
0x849c:	jmp	0x7e48


0x846f:	lea	rcx, [rbp + 2]
0x8473:	cmp	rcx, r11
0x8476:	jae	0x8490


0x8478:	mov	rax, qword ptr [rsp + 0x10]
0x847d:	cmp	byte ptr [rax + rbp + 1], 0x3f
0x8482:	je	0x8c12


0x8c12:	movzx	ebx, byte ptr [rax + rcx]
0x8c16:	cmp	bl, 0x3e
0x8c19:	ja	0x8490


0x8c1f:	movabs	rax, 0x7000a38200000000
0x8c29:	bt	rax, rbx
0x8c2d:	jae	0x8490


0x8c33:	cmp	byte ptr [rsp + 0xf], 0
0x8c38:	jne	0x8e22


0x8c3e:	cmp	r13, r15
0x8c41:	jbe	0x8c48


0x8e22:	mov	rbp, r11
0x8e25:	jmp	0x87c0


0x8c48:	lea	rax, [r15 + 1]
0x8c4c:	cmp	r13, rax
0x8c4f:	jbe	0x8c57


0x8c43:	mov	byte ptr [r14 + r15], 0x3f
0x8c48:	lea	rax, [r15 + 1]
0x8c4c:	cmp	r13, rax
0x8c4f:	jbe	0x8c57


0x8c57:	lea	rax, [r15 + 2]
0x8c5b:	cmp	r13, rax
0x8c5e:	jbe	0x8c66


0x8c51:	mov	byte ptr [r14 + r15 + 1], 0x22
0x8c57:	lea	rax, [r15 + 2]
0x8c5b:	cmp	r13, rax
0x8c5e:	jbe	0x8c66


0x8c66:	lea	rax, [r15 + 3]
0x8c6a:	cmp	r13, rax
0x8c6d:	jbe	0x8c75


0x8c60:	mov	byte ptr [r14 + r15 + 2], 0x22
0x8c66:	lea	rax, [r15 + 3]
0x8c6a:	cmp	r13, rax
0x8c6d:	jbe	0x8c75


0x8c75:	add	r15, 4
0x8c79:	xor	edx, edx
0x8c7b:	xor	r12d, r12d
0x8c7e:	xor	eax, eax
0x8c80:	mov	rbp, rcx
0x8c83:	jmp	0x7e48


0x8c6f:	mov	byte ptr [r14 + r15 + 3], 0x3f
0x8c75:	add	r15, 4
0x8c79:	xor	edx, edx
0x8c7b:	xor	r12d, r12d
0x8c7e:	xor	eax, eax
0x8c80:	mov	rbp, rcx
0x8c83:	jmp	0x7e48


0x8420:	cmp	byte ptr [rsp + 0xf], 0
0x8425:	jne	0x8cd0


0x7f1e:	mov	byte ptr [rsp + 0x7c], r12b
0x7f23:	xor	edx, edx
0x7f25:	xor	eax, eax
0x7f27:	mov	ebx, 0x27
0x7f2c:	jmp	0x7e48


0x842b:	test	r13, r13
0x842e:	je	0x8830


0x8830:	cmp	r13, r15
0x8833:	jbe	0x883a


0x8434:	xor	edx, edx
0x8436:	cmp	qword ptr [rsp + 0x50], 0
0x843c:	jne	0x8830


0x883a:	lea	rax, [r15 + 1]
0x883e:	cmp	r13, rax
0x8841:	jbe	0x8849


0x8835:	mov	byte ptr [r14 + r15], 0x27
0x883a:	lea	rax, [r15 + 1]
0x883e:	cmp	r13, rax
0x8841:	jbe	0x8849


0x8442:	mov	qword ptr [rsp + 0x50], r13
0x8447:	add	r15, 3
0x844b:	xor	eax, eax
0x844d:	mov	byte ptr [rsp + 0x7c], r12b
0x8452:	xor	r8d, r8d
0x8455:	mov	r13, rdx
0x8458:	mov	ebx, 0x27
0x845d:	jmp	0x7e79


0x8849:	lea	rax, [r15 + 2]
0x884d:	cmp	r13, rax
0x8850:	jbe	0x8e42


0x8843:	mov	byte ptr [r14 + r15 + 1], 0x5c
0x8849:	lea	rax, [r15 + 2]
0x884d:	cmp	r13, rax
0x8850:	jbe	0x8e42


0x8e42:	mov	rdx, r13
0x8e45:	mov	r13, qword ptr [rsp + 0x50]
0x8e4a:	jmp	0x8442


0x8856:	mov	rdx, r13
0x8859:	mov	byte ptr [r14 + r15 + 2], 0x27
0x885f:	mov	r13, qword ptr [rsp + 0x50]
0x8864:	jmp	0x8442


0x7f54:	cmp	byte ptr [rsp + 0xd], 0
0x7f59:	jne	0x7fc0


0x7f5b:	mov	ebx, edx
0x7f5d:	xor	r12d, r12d
0x7f60:	xor	eax, eax
0x7f62:	cmp	byte ptr [rsp + 0xf], 0
0x7f67:	jne	0x7e5b


0x7fc0:	xor	r12d, r12d
0x7fc3:	cmp	dword ptr [rsp + 8], 2
0x7fc8:	sete	dl
0x7fcb:	cmp	byte ptr [rsp + 0xf], 0
0x7fd0:	mov	eax, edx
0x7fd2:	jne	0x8828


0x8360:	cmp	byte ptr [rsp + 0xf], 0
0x8365:	jne	0x8cd0


0x7f93:	cmp	byte ptr [rsp + 0xd], 0
0x7f98:	je	0x81b0


0x836b:	add	rbp, 1
0x836f:	mov	eax, r8d
0x8372:	xor	r12d, r12d
0x8375:	mov	ebx, 0x5c
0x837a:	jmp	0x7e8c


0x81b0:	mov	edx, 0x5c
0x81b5:	mov	ebx, 0x5c
0x81ba:	jmp	0x7f54


0x7f9e:	cmp	byte ptr [rsp + 0xf], 0
0x7fa3:	je	0x81b0


0x7fa9:	cmp	qword ptr [rsp + 0x18], 0
0x7faf:	jne	0x836b


0x7fb5:	mov	ebx, 0x5c
0x7fba:	nop	word ptr [rax + rax]
0x7fc0:	xor	r12d, r12d
0x7fc3:	cmp	dword ptr [rsp + 8], 2
0x7fc8:	sete	dl
0x7fcb:	cmp	byte ptr [rsp + 0xf], 0
0x7fd0:	mov	eax, edx
0x7fd2:	jne	0x8828


0x803b:	xor	edx, edx
0x803d:	test	byte ptr [rsp + 0x78], 1
0x8042:	je	0x7f5b


0x8203:	cmp	dword ptr [rsp + 8], 2
0x8208:	sete	dl
0x820b:	cmp	byte ptr [rsp + 0xf], 0
0x8210:	jne	0x8daa


0x8048:	add	rbp, 1
0x804c:	jmp	0x7d08


0x8216:	mov	eax, r8d
0x8219:	mov	rcx, r15
0x821c:	xor	eax, 1
0x821f:	and	al, dl
0x8221:	je	0x8250


0x8daa:	movzx	ebx, byte ptr [rsp + 0xf]
0x8daf:	mov	rbp, r11
0x8db2:	mov	eax, edx
0x8db4:	mov	byte ptr [rsp + 0xd], bl
0x8db8:	jmp	0x87a9


0x8250:	cmp	r13, rcx
0x8253:	jbe	0x825a


0x8223:	cmp	r13, r15
0x8226:	jbe	0x822d


0x825a:	cmp	dword ptr [rsp + 8], 2
0x825f:	lea	r15, [rcx + 1]
0x8263:	je	0x8869


0x8255:	mov	byte ptr [r14 + rcx], 0x5c
0x825a:	cmp	dword ptr [rsp + 8], 2
0x825f:	lea	r15, [rcx + 1]
0x8263:	je	0x8869


0x822d:	lea	rcx, [r15 + 1]
0x8231:	cmp	r13, rcx
0x8234:	jbe	0x823c


0x8228:	mov	byte ptr [r14 + r15], 0x27
0x822d:	lea	rcx, [r15 + 1]
0x8231:	cmp	r13, rcx
0x8234:	jbe	0x823c


0x8869:	mov	eax, r12d
0x886c:	mov	ebx, 0x30
0x8871:	xor	r12d, r12d
0x8874:	jmp	0x7e79


0x8269:	lea	rax, [rbp + 1]
0x826d:	cmp	rax, r11
0x8270:	jae	0x828b


0x823c:	lea	rcx, [r15 + 2]
0x8240:	cmp	r13, rcx
0x8243:	ja	0x8879


0x8236:	mov	byte ptr [r14 + r15 + 1], 0x24
0x823c:	lea	rcx, [r15 + 2]
0x8240:	cmp	r13, rcx
0x8243:	ja	0x8879


0x8272:	mov	rax, qword ptr [rsp + 0x10]
0x8277:	movzx	eax, byte ptr [rax + rbp + 1]
0x827c:	mov	byte ptr [rsp + 0x28], al
0x8280:	sub	eax, 0x30
0x8283:	cmp	al, 9
0x8285:	jbe	0x8ab9


0x828b:	mov	eax, r12d
0x828e:	mov	ebx, 0x30
0x8293:	xor	r12d, r12d
0x8296:	jmp	0x7e48


0x8249:	lea	rcx, [r15 + 3]
0x824d:	mov	r8d, eax
0x8250:	cmp	r13, rcx
0x8253:	jbe	0x825a


0x8879:	mov	byte ptr [r14 + r15 + 2], 0x27
0x887f:	jmp	0x8249


0x8ab9:	cmp	r13, r15
0x8abc:	jbe	0x8ac3


0x8ac3:	lea	rax, [rcx + 2]
0x8ac7:	cmp	r13, rax
0x8aca:	jbe	0x8ad2


0x8abe:	mov	byte ptr [r14 + r15], 0x30
0x8ac3:	lea	rax, [rcx + 2]
0x8ac7:	cmp	r13, rax
0x8aca:	jbe	0x8ad2


0x8ad2:	mov	eax, r12d
0x8ad5:	lea	r15, [rcx + 3]
0x8ad9:	xor	r12d, r12d
0x8adc:	mov	ebx, 0x30
0x8ae1:	jmp	0x7e48


0x8acc:	mov	byte ptr [r14 + rcx + 2], 0x30
0x8ad2:	mov	eax, r12d
0x8ad5:	lea	r15, [rcx + 3]
0x8ad9:	xor	r12d, r12d
0x8adc:	mov	ebx, 0x30
0x8ae1:	jmp	0x7e48


0x7f42:	cmp	dword ptr [rsp + 8], 2
0x7f47:	sete	al
0x7f4a:	and	al, byte ptr [rsp + 0xf]
0x7f4e:	jne	0x809e


0x8300:	mov	edx, 0xd
0x8305:	xor	r10d, r10d
0x8308:	mov	ebx, 0x72
0x830d:	jmp	0x7f42


0x8884:	test	ebx, ebx
0x8886:	jne	0x7cb3


0x888c:	mov	byte ptr [rsp + 0xd], 1
0x8891:	test	r13, r13
0x8894:	jne	0x8e2a


0x889a:	lea	rax, [rip + 0x2a94]
0x88a1:	mov	qword ptr [rsp + 0x50], 0
0x88aa:	mov	byte ptr [rsp + 0xe], 1
0x88af:	mov	byte ptr [rsp + 0x7c], 0
0x88b4:	xor	r12d, r12d
0x88b7:	mov	byte ptr [rsp + 0xf], 0
0x88bc:	mov	qword ptr [rsp + 0x18], 1
0x88c5:	mov	qword ptr [rsp + 0x48], rax
0x88ca:	mov	r15d, 1
0x88d0:	mov	dword ptr [rsp + 8], 2
0x88d8:	jmp	0x7cf3


0x8e2a:	mov	byte ptr [rsp + 0xe], 1
0x8e2f:	xor	eax, eax
0x8e31:	xor	r12d, r12d
0x8e34:	mov	qword ptr [rsp + 0x50], 0
0x8e3d:	jmp	0x83e4


0x83e4:	lea	rbx, [rip + 0x2f4a]
0x83eb:	mov	byte ptr [r14], 0x27
0x83ef:	mov	dword ptr [rsp + 8], 2
0x83f7:	mov	r15d, 1
0x83fd:	mov	qword ptr [rsp + 0x18], 1
0x8406:	mov	byte ptr [rsp + 0xf], 0
0x840b:	mov	qword ptr [rsp + 0x48], rbx
0x8410:	mov	byte ptr [rsp + 0x7c], al
0x8414:	jmp	0x7cf3


0x88e8:	test	r13, r13
0x88eb:	je	0x8b16


0x8cdd:	lea	rax, [rip + 0x264f]
0x8ce4:	mov	byte ptr [rsp + 0xe], 1
0x8ce9:	mov	byte ptr [rsp + 0x7c], 0
0x8cee:	xor	r12d, r12d
0x8cf1:	mov	qword ptr [rsp + 0x50], 0
0x8cfa:	mov	byte ptr [rsp + 0xf], 1
0x8cff:	mov	byte ptr [rsp + 0xd], 1
0x8d04:	mov	qword ptr [rsp + 0x18], 1
0x8d0d:	xor	r15d, r15d
0x8d10:	mov	qword ptr [rsp + 0x48], rax
0x8d15:	jmp	0x7cf3


0x8b16:	mov	qword ptr [rsp + 0x50], 0
0x8b1f:	mov	byte ptr [rsp + 0xe], 1
0x8b24:	xor	r12d, r12d
0x8b27:	mov	byte ptr [rsp + 0x7c], 0
0x8b2c:	jmp	0x890b


0x88f1:	mov	byte ptr [r14], 0x22
0x88f5:	mov	byte ptr [rsp + 0xe], 1
0x88fa:	xor	r12d, r12d
0x88fd:	mov	byte ptr [rsp + 0x7c], 0
0x8902:	mov	qword ptr [rsp + 0x50], 0
0x890b:	lea	rax, [rip + 0x2a21]
0x8912:	mov	byte ptr [rsp + 0xf], 0
0x8917:	mov	byte ptr [rsp + 0xd], 1
0x891c:	mov	qword ptr [rsp + 0x18], 1
0x8925:	mov	r15d, 1
0x892b:	mov	qword ptr [rsp + 0x48], rax
0x8930:	jmp	0x7cf3


0x890b:	lea	rax, [rip + 0x2a21]
0x8912:	mov	byte ptr [rsp + 0xf], 0
0x8917:	mov	byte ptr [rsp + 0xd], 1
0x891c:	mov	qword ptr [rsp + 0x18], 1
0x8925:	mov	r15d, 1
0x892b:	mov	qword ptr [rsp + 0x48], rax
0x8930:	jmp	0x7cf3


0x8935:	lea	rax, [rip + 0x29f7]
0x893c:	mov	byte ptr [rsp + 0xe], 1
0x8941:	mov	byte ptr [rsp + 0x7c], 0
0x8946:	xor	r12d, r12d
0x8949:	mov	qword ptr [rsp + 0x50], 0
0x8952:	mov	byte ptr [rsp + 0xf], 1
0x8957:	mov	byte ptr [rsp + 0xd], 1
0x895c:	mov	qword ptr [rsp + 0x18], 1
0x8965:	xor	r15d, r15d
0x8968:	mov	qword ptr [rsp + 0x48], rax
0x896d:	mov	dword ptr [rsp + 8], 5
0x8975:	jmp	0x7cf3


0x897a:	mov	byte ptr [rsp + 0xe], 1
0x897f:	mov	byte ptr [rsp + 0x7c], 0
0x8984:	xor	r12d, r12d
0x8987:	mov	qword ptr [rsp + 0x50], 0
0x8990:	mov	byte ptr [rsp + 0xf], 0
0x8995:	xor	r15d, r15d
0x8998:	mov	byte ptr [rsp + 0xd], 1
0x899d:	mov	qword ptr [rsp + 0x18], 0
0x89a6:	mov	qword ptr [rsp + 0x48], 0
0x89af:	jmp	0x7cf3


0x89b4:	cmp	dword ptr [rsp + 8], 0xa
0x89b9:	je	0x8a11


0x8a11:	xor	r15d, r15d
0x8a14:	test	ebx, ebx
0x8a16:	je	0x8bdd


0x89bb:	lea	rsi, [rip + 0x2975]
0x89c2:	xor	edi, edi
0x89c4:	mov	edx, 5
0x89c9:	call	0x1660


0x8bdd:	mov	rdx, qword ptr [rsp + 0x68]
0x8be2:	movzx	eax, byte ptr [rdx]
0x8be5:	test	al, al
0x8be7:	je	0x8a1c


0x8a1c:	test	ebx, ebx
0x8a1e:	mov	rbx, qword ptr [rsp + 0x60]
0x8a23:	setne	byte ptr [rsp + 0xf]
0x8a28:	xor	r12d, r12d
0x8a2b:	mov	rdi, rbx
0x8a2e:	call	0x1680


0x8bf9:	add	r15, 1
0x8bfd:	movzx	eax, byte ptr [rdx + r15]
0x8c02:	test	al, al
0x8c04:	jne	0x8bf0


0x8bf5:	mov	byte ptr [r14 + r15], al
0x8bf9:	add	r15, 1
0x8bfd:	movzx	eax, byte ptr [rdx + r15]
0x8c02:	test	al, al
0x8c04:	jne	0x8bf0


0x8c06:	jmp	0x8a1c


0x8bf0:	cmp	r13, r15
0x8bf3:	jbe	0x8bf9


0x8a33:	mov	qword ptr [rsp + 0x48], rbx
0x8a38:	mov	qword ptr [rsp + 0x18], rax
0x8a3d:	mov	byte ptr [rsp + 0xe], 1
0x8a42:	mov	byte ptr [rsp + 0x7c], 0
0x8a47:	mov	qword ptr [rsp + 0x50], 0
0x8a50:	mov	byte ptr [rsp + 0xd], 1
0x8a55:	jmp	0x7cf3


0x89ce:	mov	rcx, rax
0x89d1:	mov	qword ptr [rsp + 0x68], rax
0x89d6:	lea	rax, [rip + 0x295a]
0x89dd:	cmp	rcx, rax
0x89e0:	je	0x8d7e


0x8d7e:	mov	esi, dword ptr [rsp + 8]
0x8d82:	mov	rdi, rcx
0x8d85:	call	0x7b30


0x89e6:	lea	rsi, [rip + 0x2948]
0x89ed:	xor	edi, edi
0x89ef:	mov	edx, 5
0x89f4:	call	0x1660


0x89f9:	mov	rcx, rax
0x89fc:	mov	qword ptr [rsp + 0x60], rax
0x8a01:	lea	rax, [rip + 0x292d]
0x8a08:	cmp	rcx, rax
0x8a0b:	je	0x8d94


0x8d94:	mov	esi, dword ptr [rsp + 8]
0x8d98:	mov	rdi, rcx
0x8d9b:	call	0x7b30


0x8da0:	mov	qword ptr [rsp + 0x60], rax
0x8da5:	jmp	0x8a11


0x8d8a:	mov	qword ptr [rsp + 0x68], rax
0x8d8f:	jmp	0x89e6


0x8a5a:	mov	byte ptr [rsp + 0xe], 1
0x8a5f:	mov	byte ptr [rsp + 0x7c], 0
0x8a64:	xor	r12d, r12d
0x8a67:	mov	qword ptr [rsp + 0x50], 0
0x8a70:	mov	byte ptr [rsp + 0xf], 0
0x8a75:	xor	r15d, r15d
0x8a78:	mov	byte ptr [rsp + 0xd], 0
0x8a7d:	mov	qword ptr [rsp + 0x18], 0
0x8a86:	mov	qword ptr [rsp + 0x48], 0
0x8a8f:	jmp	0x7cf3


0x8a94:	mov	byte ptr [rsp + 0xe], 1
0x8a99:	mov	byte ptr [rsp + 0x7c], 0
0x8a9e:	xor	r12d, r12d
0x8aa1:	mov	qword ptr [rsp + 0x50], 0
0x8aaa:	mov	byte ptr [rsp + 0xf], 1
0x8aaf:	mov	byte ptr [rsp + 0xd], 1
0x8ab4:	jmp	0x7cd3


0x7cd3:	lea	rax, [rip + 0x365b]
0x7cda:	mov	qword ptr [rsp + 0x18], 1
0x7ce3:	xor	r15d, r15d
0x7ce6:	mov	dword ptr [rsp + 8], 2
0x7cee:	mov	qword ptr [rsp + 0x48], rax
0x7cf3:	xor	r11d, r11d
0x7cf6:	mov	rax, rbp
0x7cf9:	mov	r8d, r12d
0x7cfc:	mov	rbp, r11
0x7cff:	mov	r11, rax
0x7d02:	nop	word ptr [rax + rax]
0x7d08:	cmp	r11, rbp
0x7d0b:	setne	r12b
0x7d0f:	cmp	r11, -1
0x7d13:	jne	0x7d22


0x8c88:	test	ebx, ebx
0x8c8a:	je	0x8e18


0x8e18:	mov	byte ptr [rsp + 0xd], 0
0x8e1d:	jmp	0x8891


0x8c90:	lea	rax, [rip + 0x269e]
0x8c97:	mov	byte ptr [rsp + 0xe], 1
0x8c9c:	mov	byte ptr [rsp + 0x7c], 0
0x8ca1:	xor	r12d, r12d
0x8ca4:	mov	qword ptr [rsp + 0x50], 0
0x8cad:	mov	byte ptr [rsp + 0xf], 1
0x8cb2:	mov	byte ptr [rsp + 0xd], 0
0x8cb7:	mov	qword ptr [rsp + 0x18], 1
0x8cc0:	xor	r15d, r15d
0x8cc3:	mov	qword ptr [rsp + 0x48], rax
0x8cc8:	jmp	0x7cf3


0x8891:	test	r13, r13
0x8894:	jne	0x8e2a


0x8e54:	nop	
0x8e56:	nop	word ptr cs:[rax + rax]


0x900b:	nop	dword ptr [rax + rax]


0x9046:	nop	word ptr cs:[rax + rax]


0x9061:	nop	dword ptr [rax + rax]
0x9066:	nop	word ptr cs:[rax + rax]


0x9081:	nop	dword ptr [rax + rax]
0x9086:	nop	word ptr cs:[rax + rax]


0x90c5:	nop	
0x90c6:	nop	word ptr cs:[rax + rax]


0x90e5:	nop	
0x90e6:	nop	word ptr cs:[rax + rax]


0x9194:	nop	
0x9196:	nop	word ptr cs:[rax + rax]


0x9283:	nop	dword ptr [rax]
0x9286:	nop	word ptr cs:[rax + rax]


0x929a:	nop	word ptr [rax + rax]


0x9333:	nop	dword ptr [rax]
0x9336:	nop	word ptr cs:[rax + rax]


0x9353:	nop	dword ptr [rax]
0x9356:	nop	word ptr cs:[rax + rax]


0x936c:	nop	dword ptr [rax]


0x9388:	nop	dword ptr [rax + rax]


0x93a4:	nop	
0x93a6:	nop	word ptr cs:[rax + rax]


0x943e:	nop	


0x94ca:	nop	word ptr [rax + rax]


0x94dc:	nop	dword ptr [rax]


0x94ef:	nop	


0x9588:	nop	dword ptr [rax + rax]


0x95b1:	nop	dword ptr [rax + rax]
0x95b6:	nop	word ptr cs:[rax + rax]


0x95ca:	nop	word ptr [rax + rax]


0x965e:	nop	


0x96f1:	nop	dword ptr [rax + rax]
0x96f6:	nop	word ptr cs:[rax + rax]


0x970c:	nop	dword ptr [rax]


0x9727:	nop	word ptr [rax + rax]


0x9743:	nop	dword ptr [rax]
0x9746:	nop	word ptr cs:[rax + rax]


0x975c:	nop	dword ptr [rax]


0x9774:	nop	
0x9776:	nop	word ptr cs:[rax + rax]


0x9793:	nop	dword ptr [rax]
0x9796:	nop	word ptr cs:[rax + rax]


0x97b8:	nop	dword ptr [rax + rax]


0x97ce:	nop	


0x9be7:	nop	word ptr [rax + rax]


0x9c88:	nop	dword ptr [rax + rax]


0x9d65:	nop	
0x9d66:	nop	word ptr cs:[rax + rax]


0x9e0a:	nop	word ptr [rax + rax]


0x9e34:	nop	
0x9e36:	nop	word ptr cs:[rax + rax]


0x9e42:	nop	dword ptr [rax]
0x9e46:	nop	word ptr cs:[rax + rax]


0x9e86:	nop	word ptr cs:[rax + rax]


0x9eb4:	nop	
0x9eb6:	nop	word ptr cs:[rax + rax]


0x9f42:	nop	dword ptr [rax]
0x9f46:	nop	word ptr cs:[rax + rax]


0x9f9a:	nop	word ptr [rax + rax]


0x9fb7:	nop	word ptr [rax + rax]


0x9fee:	nop	


0xa018:	nop	dword ptr [rax + rax]


0xa033:	nop	word ptr cs:[rax + rax]
0xa03d:	nop	dword ptr [rax]


0xa075:	nop	word ptr cs:[rax + rax]
0xa07f:	nop	


0xa0fb:	nop	dword ptr [rax + rax]


0xa37e:	nop	


0xa417:	nop	word ptr [rax + rax]


0xa4a3:	nop	word ptr cs:[rax + rax]
0xa4ad:	nop	dword ptr [rax]


0xa52d:	nop	dword ptr [rax]


0xa5cc:	nop	dword ptr [rax]


0xa635:	nop	
0xa636:	nop	word ptr cs:[rax + rax]


0xa642:	nop	word ptr cs:[rax + rax]
0xa64c:	nop	dword ptr [rax]


0x7ee0:	xor	r10d, r10d
0x7ee3:	mov	eax, dword ptr [rsp + 8]
0x7ee7:	cmp	eax, 2
0x7eea:	je	0x84a8


0x7f10:	xor	r10d, r10d
0x7f13:	cmp	dword ptr [rsp + 8], 2
0x7f18:	je	0x8420


0x7f38:	mov	edx, 9
0x7f3d:	mov	ebx, 0x74
0x7f42:	cmp	dword ptr [rsp + 8], 2
0x7f47:	sete	al
0x7f4a:	and	al, byte ptr [rsp + 0xf]
0x7f4e:	jne	0x809e


0x7f78:	mov	edx, 8
0x7f7d:	mov	ebx, 0x62
0x7f82:	jmp	0x7f54


0x7f88:	cmp	dword ptr [rsp + 8], 2
0x7f8d:	je	0x8360


0x8030:	cmp	byte ptr [rsp + 0xd], 0
0x8035:	jne	0x8203


0x8058:	cmp	dword ptr [rsp + 8], 2
0x805d:	sete	dl
0x8060:	xor	eax, eax
0x8062:	jmp	0x7e48


0x8070:	mov	edx, 7
0x8075:	mov	ebx, 0x61
0x807a:	jmp	0x7f54


0x8080:	cmp	dword ptr [rsp + 8], 2
0x8085:	sete	dl
0x8088:	test	rbp, rbp
0x808b:	jne	0x7e3c


0x80b0:	cmp	dword ptr [rsp + 8], 2
0x80b5:	sete	dl
0x80b8:	xor	r12d, r12d
0x80bb:	jmp	0x8091


0x80c0:	cmp	dword ptr [rsp + 8], 2
0x80c5:	mov	ebx, 0x20
0x80ca:	sete	dl
0x80cd:	jmp	0x8091


0x80d0:	mov	edx, 0xd
0x80d5:	mov	ebx, 0x72
0x80da:	jmp	0x7f42


0x80e0:	mov	edx, 0xc
0x80e5:	mov	ebx, 0x66
0x80ea:	jmp	0x7f54


0x80f0:	mov	edx, 0xb
0x80f5:	mov	ebx, 0x76
0x80fa:	jmp	0x7f54


0x8100:	mov	edx, 0xa
0x8105:	mov	ebx, 0x6e
0x810a:	jmp	0x7f42


0x81a0:	xor	r10d, r10d
0x81a3:	cmp	byte ptr [rsp + 0xd], 0
0x81a8:	jne	0x7f9e


0x81c0:	mov	edx, 0xc
0x81c5:	xor	r10d, r10d
0x81c8:	mov	ebx, 0x66
0x81cd:	jmp	0x7f54


0x81d8:	mov	edx, 0xa
0x81dd:	xor	r10d, r10d
0x81e0:	mov	ebx, 0x6e
0x81e5:	jmp	0x7f42


0x81f0:	mov	ebx, 0x61
0x81f5:	jmp	0x7fc0


0x8200:	xor	r10d, r10d
0x8203:	cmp	dword ptr [rsp + 8], 2
0x8208:	sete	dl
0x820b:	cmp	byte ptr [rsp + 0xf], 0
0x8210:	jne	0x8daa


0x82a0:	cmp	dword ptr [rsp + 8], 2
0x82a5:	mov	r12d, r10d
0x82a8:	sete	dl
0x82ab:	xor	r10d, r10d
0x82ae:	xor	eax, eax
0x82b0:	jmp	0x7e48


0x82b8:	cmp	dword ptr [rsp + 8], 2
0x82bd:	sete	dl
0x82c0:	xor	r10d, r10d
0x82c3:	jmp	0x8088


0x82d0:	cmp	dword ptr [rsp + 8], 2
0x82d5:	sete	dl
0x82d8:	xor	r10d, r10d
0x82db:	xor	r12d, r12d
0x82de:	jmp	0x8091


0x82e8:	cmp	dword ptr [rsp + 8], 2
0x82ed:	mov	r12d, r10d
0x82f0:	mov	ebx, 0x20
0x82f5:	sete	dl
0x82f8:	xor	r10d, r10d
0x82fb:	jmp	0x8091


0x8318:	mov	ebx, 0x76
0x831d:	jmp	0x7fc0


0x8328:	mov	edx, 9
0x832d:	xor	r10d, r10d
0x8330:	mov	ebx, 0x74
0x8335:	jmp	0x7f42


0x8340:	mov	ebx, 0x62
0x8345:	jmp	0x7fc0


0x88e0:	test	ebx, ebx
0x88e2:	jne	0x8cdd


0x19fd:	nop	dword ptr [rax]


0x1a24:	nop	dword ptr [rax]


0x1a46:	nop	word ptr cs:[rax + rax]


0x1a9d:	nop	dword ptr [rax]


0x1aba:	nop	word ptr [rax + rax]


0x1ada:	nop	word ptr [rax + rax]


0x1aec:	nop	dword ptr [rax]


0x1b0a:	nop	word ptr [rax + rax]


0x1b1a:	nop	word ptr [rax + rax]


0x1b2a:	nop	word ptr [rax + rax]


0x1eee:	nop	


0x21cc:	nop	dword ptr [rax]


0x2217:	nop	word ptr [rax + rax]


0x2277:	nop	word ptr [rax + rax]


0x233e:	nop	


0x23ea:	nop	word ptr [rax + rax]


0x2a96:	nop	word ptr cs:[rax + rax]


0x2ae7:	nop	word ptr [rax + rax]


0x2b31:	nop	dword ptr [rax]


0x2b89:	nop	dword ptr [rax]


0x2b93:	nop	dword ptr [rax + rax]


0x2bbb:	nop	dword ptr [rax + rax]


0x2bf2:	nop	word ptr [rax + rax]


0x2c18:	nop	dword ptr [rax + rax]


0x2c53:	nop	dword ptr [rax + rax]


0x2cb5:	nop	dword ptr [rax]


0x2ccc:	nop	dword ptr [rax]


0x2ce2:	nop	word ptr [rax + rax]


0x2d6f:	nop	


0x2dbe:	nop	


0x2e3e:	nop	


0x2e86:	nop	word ptr cs:[rax + rax]


0x747d:	nop	dword ptr [rax]


0x74b4:	nop	dword ptr [rax]


0x74fe:	nop	


0x7568:	nop	dword ptr [rax + rax]


0x75c9:	nop	dword ptr [rax]


0x761b:	nop	dword ptr [rax + rax]


0x78ae:	nop	


0x791d:	nop	dword ptr [rax]


0x7935:	nop	dword ptr [rax]


0x794c:	nop	dword ptr [rax]


0x79db:	nop	dword ptr [rax + rax]


0x7a19:	nop	dword ptr [rax]


0x7a65:	nop	dword ptr [rax]


0x7b6c:	nop	dword ptr [rax]


0x7bbd:	nop	dword ptr [rax]


0x7de8:	nop	dword ptr [rax + rax]


0x7ed7:	nop	word ptr [rax + rax]


0x7f0e:	nop	


0x7f31:	nop	dword ptr [rax]


0x7f72:	nop	word ptr [rax + rax]


0x7f84:	nop	dword ptr [rax]


0x8028:	nop	dword ptr [rax + rax]


0x8051:	nop	dword ptr [rax]


0x8067:	nop	word ptr [rax + rax]


0x807f:	nop	


0x80ae:	nop	


0x80bd:	nop	dword ptr [rax]


0x80cf:	nop	


0x80df:	nop	


0x80ef:	nop	


0x80ff:	nop	


0x810f:	nop	


0x817c:	nop	dword ptr [rax]


0x819c:	nop	dword ptr [rax]


0x81ae:	nop	


0x81bf:	nop	


0x81d2:	nop	word ptr [rax + rax]


0x81ea:	nop	word ptr [rax + rax]


0x81fa:	nop	word ptr [rax + rax]


0x829b:	nop	dword ptr [rax + rax]


0x82b5:	nop	dword ptr [rax]


0x82c8:	nop	dword ptr [rax + rax]


0x82e3:	nop	dword ptr [rax + rax]


0x8312:	nop	word ptr [rax + rax]


0x8322:	nop	word ptr [rax + rax]


0x833a:	nop	word ptr [rax + rax]


0x834a:	nop	word ptr [rax + rax]


0x8358:	nop	dword ptr [rax + rax]


0x837f:	nop	


0x8419:	nop	dword ptr [rax]


0x8462:	nop	word ptr [rax + rax]


0x8488:	nop	dword ptr [rax + rax]


0x84a1:	nop	dword ptr [rax]


0x84c2:	nop	word ptr [rax + rax]


0x8628:	nop	dword ptr [rax + rax]


0x873b:	nop	dword ptr [rax + rax]


0x875e:	nop	


0x8825:	nop	dword ptr [rax]


0x88dd:	nop	dword ptr [rax]


0x8ae6:	nop	word ptr cs:[rax + rax]


0x8b79:	nop	dword ptr [rax]


0x8bed:	nop	dword ptr [rax]


0x8ccd:	nop	dword ptr [rax]


0x8fdb:	nop	dword ptr [rax + rax]


0x9876:	nop	word ptr cs:[rax + rax]


0x9905:	nop	dword ptr [rax]


0x9926:	nop	word ptr cs:[rax + rax]


0x9985:	nop	dword ptr [rax]


0x99c1:	nop	dword ptr [rax]


0x9a08:	nop	dword ptr [rax + rax]


0x9a57:	nop	word ptr [rax + rax]


0x9ab4:	nop	dword ptr [rax]


0x9ae2:	nop	word ptr [rax + rax]


0x9b96:	nop	word ptr cs:[rax + rax]


0x9bf9:	nop	dword ptr [rax]


0x9e72:	nop	word ptr [rax + rax]


0x9ef9:	nop	dword ptr [rax]


0x9f24:	nop	dword ptr [rax]


0x9f7d:	nop	dword ptr [rax]


0xa0c5:	nop	dword ptr [rax]


0xa19b:	nop	dword ptr [rax + rax]


0xa1c6:	nop	word ptr cs:[rax + rax]


0xa1ff:	nop	


0xa249:	nop	dword ptr [rax]


0xa26b:	nop	dword ptr [rax + rax]


0xa311:	nop	dword ptr [rax]


0xa3a3:	nop	dword ptr [rax + rax]


0xa3cf:	nop	


0xa4e4:	nop	dword ptr [rax]


0xa501:	nop	dword ptr [rax]


0xa512:	nop	word ptr [rax + rax]


0xa56a:	nop	word ptr [rax + rax]


0xa5b6:	nop	word ptr cs:[rax + rax]


